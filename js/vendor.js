//---------------------------------------//// Подключаем набор плагинов ( requare/plugins.js )//---------------------------------------////---------------------------------------//// Подключаем плагины bower//---------------------------------------///*! * jQuery JavaScript Library v3.2.1 * https://jquery.com/ * * Includes Sizzle.js * https://sizzlejs.com/ * * Copyright JS Foundation and other contributors * Released under the MIT license * https://jquery.org/license * * Date: 2017-03-20T18:59Z */( function( global, factory ) {	"use strict";	if ( typeof module === "object" && typeof module.exports === "object" ) {		// For CommonJS and CommonJS-like environments where a proper `window`		// is present, execute the factory and get jQuery.		// For environments that do not have a `window` with a `document`		// (such as Node.js), expose a factory as module.exports.		// This accentuates the need for the creation of a real `window`.		// e.g. var jQuery = require("jquery")(window);		// See ticket #14549 for more info.		module.exports = global.document ?			factory( global, true ) :			function( w ) {				if ( !w.document ) {					throw new Error( "jQuery requires a window with a document" );				}				return factory( w );			};	} else {		factory( global );	}// Pass this if window is not defined yet} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common// enough that all such attempts are guarded in a try block."use strict";var arr = [];var document = window.document;var getProto = Object.getPrototypeOf;var slice = arr.slice;var concat = arr.concat;var push = arr.push;var indexOf = arr.indexOf;var class2type = {};var toString = class2type.toString;var hasOwn = class2type.hasOwnProperty;var fnToString = hasOwn.toString;var ObjectFunctionString = fnToString.call( Object );var support = {};	function DOMEval( code, doc ) {		doc = doc || document;		var script = doc.createElement( "script" );		script.text = code;		doc.head.appendChild( script ).parentNode.removeChild( script );	}/* global Symbol */// Defining this global in .eslintrc.json would create a danger of using the global// unguarded in another place, it seems safer to define global only for this modulevar	version = "3.2.1",	// Define a local copy of jQuery	jQuery = function( selector, context ) {		// The jQuery object is actually just the init constructor 'enhanced'		// Need init if jQuery is called (just allow error to be thrown if not included)		return new jQuery.fn.init( selector, context );	},	// Support: Android <=4.0 only	// Make sure we trim BOM and NBSP	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,	// Matches dashed string for camelizing	rmsPrefix = /^-ms-/,	rdashAlpha = /-([a-z])/g,	// Used by jQuery.camelCase as callback to replace()	fcamelCase = function( all, letter ) {		return letter.toUpperCase();	};jQuery.fn = jQuery.prototype = {	// The current version of jQuery being used	jquery: version,	constructor: jQuery,	// The default length of a jQuery object is 0	length: 0,	toArray: function() {		return slice.call( this );	},	// Get the Nth element in the matched element set OR	// Get the whole matched element set as a clean array	get: function( num ) {		// Return all the elements in a clean array		if ( num == null ) {			return slice.call( this );		}		// Return just the one element from the set		return num < 0 ? this[ num + this.length ] : this[ num ];	},	// Take an array of elements and push it onto the stack	// (returning the new matched element set)	pushStack: function( elems ) {		// Build a new jQuery matched element set		var ret = jQuery.merge( this.constructor(), elems );		// Add the old object onto the stack (as a reference)		ret.prevObject = this;		// Return the newly-formed element set		return ret;	},	// Execute a callback for every element in the matched set.	each: function( callback ) {		return jQuery.each( this, callback );	},	map: function( callback ) {		return this.pushStack( jQuery.map( this, function( elem, i ) {			return callback.call( elem, i, elem );		} ) );	},	slice: function() {		return this.pushStack( slice.apply( this, arguments ) );	},	first: function() {		return this.eq( 0 );	},	last: function() {		return this.eq( -1 );	},	eq: function( i ) {		var len = this.length,			j = +i + ( i < 0 ? len : 0 );		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );	},	end: function() {		return this.prevObject || this.constructor();	},	// For internal use only.	// Behaves like an Array's method, not like a jQuery method.	push: push,	sort: arr.sort,	splice: arr.splice};jQuery.extend = jQuery.fn.extend = function() {	var options, name, src, copy, copyIsArray, clone,		target = arguments[ 0 ] || {},		i = 1,		length = arguments.length,		deep = false;	// Handle a deep copy situation	if ( typeof target === "boolean" ) {		deep = target;		// Skip the boolean and the target		target = arguments[ i ] || {};		i++;	}	// Handle case when target is a string or something (possible in deep copy)	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {		target = {};	}	// Extend jQuery itself if only one argument is passed	if ( i === length ) {		target = this;		i--;	}	for ( ; i < length; i++ ) {		// Only deal with non-null/undefined values		if ( ( options = arguments[ i ] ) != null ) {			// Extend the base object			for ( name in options ) {				src = target[ name ];				copy = options[ name ];				// Prevent never-ending loop				if ( target === copy ) {					continue;				}				// Recurse if we're merging plain objects or arrays				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||					( copyIsArray = Array.isArray( copy ) ) ) ) {					if ( copyIsArray ) {						copyIsArray = false;						clone = src && Array.isArray( src ) ? src : [];					} else {						clone = src && jQuery.isPlainObject( src ) ? src : {};					}					// Never move original objects, clone them					target[ name ] = jQuery.extend( deep, clone, copy );				// Don't bring in undefined values				} else if ( copy !== undefined ) {					target[ name ] = copy;				}			}		}	}	// Return the modified object	return target;};jQuery.extend( {	// Unique for each copy of jQuery on the page	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),	// Assume jQuery is ready without the ready module	isReady: true,	error: function( msg ) {		throw new Error( msg );	},	noop: function() {},	isFunction: function( obj ) {		return jQuery.type( obj ) === "function";	},	isWindow: function( obj ) {		return obj != null && obj === obj.window;	},	isNumeric: function( obj ) {		// As of jQuery 3.0, isNumeric is limited to		// strings and numbers (primitives or objects)		// that can be coerced to finite numbers (gh-2662)		var type = jQuery.type( obj );		return ( type === "number" || type === "string" ) &&			// parseFloat NaNs numeric-cast false positives ("")			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")			// subtraction forces infinities to NaN			!isNaN( obj - parseFloat( obj ) );	},	isPlainObject: function( obj ) {		var proto, Ctor;		// Detect obvious negatives		// Use toString instead of jQuery.type to catch host objects		if ( !obj || toString.call( obj ) !== "[object Object]" ) {			return false;		}		proto = getProto( obj );		// Objects with no prototype (e.g., `Object.create( null )`) are plain		if ( !proto ) {			return true;		}		// Objects with prototype are plain iff they were constructed by a global Object function		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;	},	isEmptyObject: function( obj ) {		/* eslint-disable no-unused-vars */		// See https://github.com/eslint/eslint/issues/6125		var name;		for ( name in obj ) {			return false;		}		return true;	},	type: function( obj ) {		if ( obj == null ) {			return obj + "";		}		// Support: Android <=2.3 only (functionish RegExp)		return typeof obj === "object" || typeof obj === "function" ?			class2type[ toString.call( obj ) ] || "object" :			typeof obj;	},	// Evaluates a script in a global context	globalEval: function( code ) {		DOMEval( code );	},	// Convert dashed to camelCase; used by the css and data modules	// Support: IE <=9 - 11, Edge 12 - 13	// Microsoft forgot to hump their vendor prefix (#9572)	camelCase: function( string ) {		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );	},	each: function( obj, callback ) {		var length, i = 0;		if ( isArrayLike( obj ) ) {			length = obj.length;			for ( ; i < length; i++ ) {				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {					break;				}			}		} else {			for ( i in obj ) {				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {					break;				}			}		}		return obj;	},	// Support: Android <=4.0 only	trim: function( text ) {		return text == null ?			"" :			( text + "" ).replace( rtrim, "" );	},	// results is for internal usage only	makeArray: function( arr, results ) {		var ret = results || [];		if ( arr != null ) {			if ( isArrayLike( Object( arr ) ) ) {				jQuery.merge( ret,					typeof arr === "string" ?					[ arr ] : arr				);			} else {				push.call( ret, arr );			}		}		return ret;	},	inArray: function( elem, arr, i ) {		return arr == null ? -1 : indexOf.call( arr, elem, i );	},	// Support: Android <=4.0 only, PhantomJS 1 only	// push.apply(_, arraylike) throws on ancient WebKit	merge: function( first, second ) {		var len = +second.length,			j = 0,			i = first.length;		for ( ; j < len; j++ ) {			first[ i++ ] = second[ j ];		}		first.length = i;		return first;	},	grep: function( elems, callback, invert ) {		var callbackInverse,			matches = [],			i = 0,			length = elems.length,			callbackExpect = !invert;		// Go through the array, only saving the items		// that pass the validator function		for ( ; i < length; i++ ) {			callbackInverse = !callback( elems[ i ], i );			if ( callbackInverse !== callbackExpect ) {				matches.push( elems[ i ] );			}		}		return matches;	},	// arg is for internal usage only	map: function( elems, callback, arg ) {		var length, value,			i = 0,			ret = [];		// Go through the array, translating each of the items to their new values		if ( isArrayLike( elems ) ) {			length = elems.length;			for ( ; i < length; i++ ) {				value = callback( elems[ i ], i, arg );				if ( value != null ) {					ret.push( value );				}			}		// Go through every key on the object,		} else {			for ( i in elems ) {				value = callback( elems[ i ], i, arg );				if ( value != null ) {					ret.push( value );				}			}		}		// Flatten any nested arrays		return concat.apply( [], ret );	},	// A global GUID counter for objects	guid: 1,	// Bind a function to a context, optionally partially applying any	// arguments.	proxy: function( fn, context ) {		var tmp, args, proxy;		if ( typeof context === "string" ) {			tmp = fn[ context ];			context = fn;			fn = tmp;		}		// Quick check to determine if target is callable, in the spec		// this throws a TypeError, but we will just return undefined.		if ( !jQuery.isFunction( fn ) ) {			return undefined;		}		// Simulated bind		args = slice.call( arguments, 2 );		proxy = function() {			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );		};		// Set the guid of unique handler to the same of original handler, so it can be removed		proxy.guid = fn.guid = fn.guid || jQuery.guid++;		return proxy;	},	now: Date.now,	// jQuery.support is not used in Core but other projects attach their	// properties to it so it needs to exist.	support: support} );if ( typeof Symbol === "function" ) {	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];}// Populate the class2type mapjQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),function( i, name ) {	class2type[ "[object " + name + "]" ] = name.toLowerCase();} );function isArrayLike( obj ) {	// Support: real iOS 8.2 only (not reproducible in simulator)	// `in` check used to prevent JIT error (gh-2145)	// hasOwn isn't used here due to false negatives	// regarding Nodelist length in IE	var length = !!obj && "length" in obj && obj.length,		type = jQuery.type( obj );	if ( type === "function" || jQuery.isWindow( obj ) ) {		return false;	}	return type === "array" || length === 0 ||		typeof length === "number" && length > 0 && ( length - 1 ) in obj;}var Sizzle =/*! * Sizzle CSS Selector Engine v2.3.3 * https://sizzlejs.com/ * * Copyright jQuery Foundation and other contributors * Released under the MIT license * http://jquery.org/license * * Date: 2016-08-08 */(function( window ) {var i,	support,	Expr,	getText,	isXML,	tokenize,	compile,	select,	outermostContext,	sortInput,	hasDuplicate,	// Local document vars	setDocument,	document,	docElem,	documentIsHTML,	rbuggyQSA,	rbuggyMatches,	matches,	contains,	// Instance-specific data	expando = "sizzle" + 1 * new Date(),	preferredDoc = window.document,	dirruns = 0,	done = 0,	classCache = createCache(),	tokenCache = createCache(),	compilerCache = createCache(),	sortOrder = function( a, b ) {		if ( a === b ) {			hasDuplicate = true;		}		return 0;	},	// Instance methods	hasOwn = ({}).hasOwnProperty,	arr = [],	pop = arr.pop,	push_native = arr.push,	push = arr.push,	slice = arr.slice,	// Use a stripped-down indexOf as it's faster than native	// https://jsperf.com/thor-indexof-vs-for/5	indexOf = function( list, elem ) {		var i = 0,			len = list.length;		for ( ; i < len; i++ ) {			if ( list[i] === elem ) {				return i;			}		}		return -1;	},	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",	// Regular expressions	// http://www.w3.org/TR/css3-selectors/#whitespace	whitespace = "[\\x20\\t\\r\\n\\f]",	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +		// Operator (capture 2)		"*([*^$|!~]?=)" + whitespace +		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +		"*\\]",	pseudos = ":(" + identifier + ")(?:\\((" +		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:		// 1. quoted (capture 3; capture 4 or capture 5)		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +		// 2. simple (capture 6)		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +		// 3. anything else (capture 2)		".*" +		")\\)|)",	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter	rwhitespace = new RegExp( whitespace + "+", "g" ),	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),	rpseudo = new RegExp( pseudos ),	ridentifier = new RegExp( "^" + identifier + "$" ),	matchExpr = {		"ID": new RegExp( "^#(" + identifier + ")" ),		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),		"TAG": new RegExp( "^(" + identifier + "|[*])" ),		"ATTR": new RegExp( "^" + attributes ),		"PSEUDO": new RegExp( "^" + pseudos ),		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),		// For use in libraries implementing .is()		// We use this for POS matching in `select`		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )	},	rinputs = /^(?:input|select|textarea|button)$/i,	rheader = /^h\d$/i,	rnative = /^[^{]+\{\s*\[native \w/,	// Easily-parseable/retrievable ID or TAG or CLASS selectors	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,	rsibling = /[+~]/,	// CSS escapes	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),	funescape = function( _, escaped, escapedWhitespace ) {		var high = "0x" + escaped - 0x10000;		// NaN means non-codepoint		// Support: Firefox<24		// Workaround erroneous numeric interpretation of +"0x"		return high !== high || escapedWhitespace ?			escaped :			high < 0 ?				// BMP codepoint				String.fromCharCode( high + 0x10000 ) :				// Supplemental Plane codepoint (surrogate pair)				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );	},	// CSS string/identifier serialization	// https://drafts.csswg.org/cssom/#common-serializing-idioms	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,	fcssescape = function( ch, asCodePoint ) {		if ( asCodePoint ) {			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER			if ( ch === "\0" ) {				return "\uFFFD";			}			// Control characters and (dependent upon position) numbers get escaped as code points			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";		}		// Other potentially-special ASCII characters get backslash-escaped		return "\\" + ch;	},	// Used for iframes	// See setDocument()	// Removing the function wrapper causes a "Permission Denied"	// error in IE	unloadHandler = function() {		setDocument();	},	disabledAncestor = addCombinator(		function( elem ) {			return elem.disabled === true && ("form" in elem || "label" in elem);		},		{ dir: "parentNode", next: "legend" }	);// Optimize for push.apply( _, NodeList )try {	push.apply(		(arr = slice.call( preferredDoc.childNodes )),		preferredDoc.childNodes	);	// Support: Android<4.0	// Detect silently failing push.apply	arr[ preferredDoc.childNodes.length ].nodeType;} catch ( e ) {	push = { apply: arr.length ?		// Leverage slice if possible		function( target, els ) {			push_native.apply( target, slice.call(els) );		} :		// Support: IE<9		// Otherwise append directly		function( target, els ) {			var j = target.length,				i = 0;			// Can't trust NodeList.length			while ( (target[j++] = els[i++]) ) {}			target.length = j - 1;		}	};}function Sizzle( selector, context, results, seed ) {	var m, i, elem, nid, match, groups, newSelector,		newContext = context && context.ownerDocument,		// nodeType defaults to 9, since context defaults to document		nodeType = context ? context.nodeType : 9;	results = results || [];	// Return early from calls with invalid selector or context	if ( typeof selector !== "string" || !selector ||		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {		return results;	}	// Try to shortcut find operations (as opposed to filters) in HTML documents	if ( !seed ) {		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {			setDocument( context );		}		context = context || document;		if ( documentIsHTML ) {			// If the selector is sufficiently simple, try using a "get*By*" DOM method			// (excepting DocumentFragment context, where the methods don't exist)			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {				// ID selector				if ( (m = match[1]) ) {					// Document context					if ( nodeType === 9 ) {						if ( (elem = context.getElementById( m )) ) {							// Support: IE, Opera, Webkit							// TODO: identify versions							// getElementById can match elements by name instead of ID							if ( elem.id === m ) {								results.push( elem );								return results;							}						} else {							return results;						}					// Element context					} else {						// Support: IE, Opera, Webkit						// TODO: identify versions						// getElementById can match elements by name instead of ID						if ( newContext && (elem = newContext.getElementById( m )) &&							contains( context, elem ) &&							elem.id === m ) {							results.push( elem );							return results;						}					}				// Type selector				} else if ( match[2] ) {					push.apply( results, context.getElementsByTagName( selector ) );					return results;				// Class selector				} else if ( (m = match[3]) && support.getElementsByClassName &&					context.getElementsByClassName ) {					push.apply( results, context.getElementsByClassName( m ) );					return results;				}			}			// Take advantage of querySelectorAll			if ( support.qsa &&				!compilerCache[ selector + " " ] &&				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {				if ( nodeType !== 1 ) {					newContext = context;					newSelector = selector;				// qSA looks outside Element context, which is not what we want				// Thanks to Andrew Dupont for this workaround technique				// Support: IE <=8				// Exclude object elements				} else if ( context.nodeName.toLowerCase() !== "object" ) {					// Capture the context ID, setting it first if necessary					if ( (nid = context.getAttribute( "id" )) ) {						nid = nid.replace( rcssescape, fcssescape );					} else {						context.setAttribute( "id", (nid = expando) );					}					// Prefix every selector in the list					groups = tokenize( selector );					i = groups.length;					while ( i-- ) {						groups[i] = "#" + nid + " " + toSelector( groups[i] );					}					newSelector = groups.join( "," );					// Expand context for sibling selectors					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||						context;				}				if ( newSelector ) {					try {						push.apply( results,							newContext.querySelectorAll( newSelector )						);						return results;					} catch ( qsaError ) {					} finally {						if ( nid === expando ) {							context.removeAttribute( "id" );						}					}				}			}		}	}	// All others	return select( selector.replace( rtrim, "$1" ), context, results, seed );}/** * Create key-value caches of limited size * @returns {function(string, object)} Returns the Object data after storing it on itself with *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength) *	deleting the oldest entry */function createCache() {	var keys = [];	function cache( key, value ) {		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)		if ( keys.push( key + " " ) > Expr.cacheLength ) {			// Only keep the most recent entries			delete cache[ keys.shift() ];		}		return (cache[ key + " " ] = value);	}	return cache;}/** * Mark a function for special use by Sizzle * @param {Function} fn The function to mark */function markFunction( fn ) {	fn[ expando ] = true;	return fn;}/** * Support testing using an element * @param {Function} fn Passed the created element and returns a boolean result */function assert( fn ) {	var el = document.createElement("fieldset");	try {		return !!fn( el );	} catch (e) {		return false;	} finally {		// Remove from its parent by default		if ( el.parentNode ) {			el.parentNode.removeChild( el );		}		// release memory in IE		el = null;	}}/** * Adds the same handler for all of the specified attrs * @param {String} attrs Pipe-separated list of attributes * @param {Function} handler The method that will be applied */function addHandle( attrs, handler ) {	var arr = attrs.split("|"),		i = arr.length;	while ( i-- ) {		Expr.attrHandle[ arr[i] ] = handler;	}}/** * Checks document order of two siblings * @param {Element} a * @param {Element} b * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b */function siblingCheck( a, b ) {	var cur = b && a,		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&			a.sourceIndex - b.sourceIndex;	// Use IE sourceIndex if available on both nodes	if ( diff ) {		return diff;	}	// Check if b follows a	if ( cur ) {		while ( (cur = cur.nextSibling) ) {			if ( cur === b ) {				return -1;			}		}	}	return a ? 1 : -1;}/** * Returns a function to use in pseudos for input types * @param {String} type */function createInputPseudo( type ) {	return function( elem ) {		var name = elem.nodeName.toLowerCase();		return name === "input" && elem.type === type;	};}/** * Returns a function to use in pseudos for buttons * @param {String} type */function createButtonPseudo( type ) {	return function( elem ) {		var name = elem.nodeName.toLowerCase();		return (name === "input" || name === "button") && elem.type === type;	};}/** * Returns a function to use in pseudos for :enabled/:disabled * @param {Boolean} disabled true for :disabled; false for :enabled */function createDisabledPseudo( disabled ) {	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable	return function( elem ) {		// Only certain elements can match :enabled or :disabled		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled		if ( "form" in elem ) {			// Check for inherited disabledness on relevant non-disabled elements:			// * listed form-associated elements in a disabled fieldset			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled			// * option elements in a disabled optgroup			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled			// All such elements have a "form" property.			if ( elem.parentNode && elem.disabled === false ) {				// Option elements defer to a parent optgroup if present				if ( "label" in elem ) {					if ( "label" in elem.parentNode ) {						return elem.parentNode.disabled === disabled;					} else {						return elem.disabled === disabled;					}				}				// Support: IE 6 - 11				// Use the isDisabled shortcut property to check for disabled fieldset ancestors				return elem.isDisabled === disabled ||					// Where there is no isDisabled, check manually					/* jshint -W018 */					elem.isDisabled !== !disabled &&						disabledAncestor( elem ) === disabled;			}			return elem.disabled === disabled;		// Try to winnow out elements that can't be disabled before trusting the disabled property.		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't		// even exist on them, let alone have a boolean value.		} else if ( "label" in elem ) {			return elem.disabled === disabled;		}		// Remaining elements are neither :enabled nor :disabled		return false;	};}/** * Returns a function to use in pseudos for positionals * @param {Function} fn */function createPositionalPseudo( fn ) {	return markFunction(function( argument ) {		argument = +argument;		return markFunction(function( seed, matches ) {			var j,				matchIndexes = fn( [], seed.length, argument ),				i = matchIndexes.length;			// Match elements found at the specified indexes			while ( i-- ) {				if ( seed[ (j = matchIndexes[i]) ] ) {					seed[j] = !(matches[j] = seed[j]);				}			}		});	});}/** * Checks a node for validity as a Sizzle context * @param {Element|Object=} context * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value */function testContext( context ) {	return context && typeof context.getElementsByTagName !== "undefined" && context;}// Expose support vars for conveniencesupport = Sizzle.support = {};/** * Detects XML nodes * @param {Element|Object} elem An element or a document * @returns {Boolean} True iff elem is a non-HTML XML node */isXML = Sizzle.isXML = function( elem ) {	// documentElement is verified for cases where it doesn't yet exist	// (such as loading iframes in IE - #4833)	var documentElement = elem && (elem.ownerDocument || elem).documentElement;	return documentElement ? documentElement.nodeName !== "HTML" : false;};/** * Sets document-related variables once based on the current document * @param {Element|Object} [doc] An element or document object to use to set the document * @returns {Object} Returns the current document */setDocument = Sizzle.setDocument = function( node ) {	var hasCompare, subWindow,		doc = node ? node.ownerDocument || node : preferredDoc;	// Return early if doc is invalid or already selected	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {		return document;	}	// Update global variables	document = doc;	docElem = document.documentElement;	documentIsHTML = !isXML( document );	// Support: IE 9-11, Edge	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)	if ( preferredDoc !== document &&		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {		// Support: IE 11, Edge		if ( subWindow.addEventListener ) {			subWindow.addEventListener( "unload", unloadHandler, false );		// Support: IE 9 - 10 only		} else if ( subWindow.attachEvent ) {			subWindow.attachEvent( "onunload", unloadHandler );		}	}	/* Attributes	---------------------------------------------------------------------- */	// Support: IE<8	// Verify that getAttribute really returns attributes and not properties	// (excepting IE8 booleans)	support.attributes = assert(function( el ) {		el.className = "i";		return !el.getAttribute("className");	});	/* getElement(s)By*	---------------------------------------------------------------------- */	// Check if getElementsByTagName("*") returns only elements	support.getElementsByTagName = assert(function( el ) {		el.appendChild( document.createComment("") );		return !el.getElementsByTagName("*").length;	});	// Support: IE<9	support.getElementsByClassName = rnative.test( document.getElementsByClassName );	// Support: IE<10	// Check if getElementById returns elements by name	// The broken getElementById methods don't pick up programmatically-set names,	// so use a roundabout getElementsByName test	support.getById = assert(function( el ) {		docElem.appendChild( el ).id = expando;		return !document.getElementsByName || !document.getElementsByName( expando ).length;	});	// ID filter and find	if ( support.getById ) {		Expr.filter["ID"] = function( id ) {			var attrId = id.replace( runescape, funescape );			return function( elem ) {				return elem.getAttribute("id") === attrId;			};		};		Expr.find["ID"] = function( id, context ) {			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {				var elem = context.getElementById( id );				return elem ? [ elem ] : [];			}		};	} else {		Expr.filter["ID"] =  function( id ) {			var attrId = id.replace( runescape, funescape );			return function( elem ) {				var node = typeof elem.getAttributeNode !== "undefined" &&					elem.getAttributeNode("id");				return node && node.value === attrId;			};		};		// Support: IE 6 - 7 only		// getElementById is not reliable as a find shortcut		Expr.find["ID"] = function( id, context ) {			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {				var node, i, elems,					elem = context.getElementById( id );				if ( elem ) {					// Verify the id attribute					node = elem.getAttributeNode("id");					if ( node && node.value === id ) {						return [ elem ];					}					// Fall back on getElementsByName					elems = context.getElementsByName( id );					i = 0;					while ( (elem = elems[i++]) ) {						node = elem.getAttributeNode("id");						if ( node && node.value === id ) {							return [ elem ];						}					}				}				return [];			}		};	}	// Tag	Expr.find["TAG"] = support.getElementsByTagName ?		function( tag, context ) {			if ( typeof context.getElementsByTagName !== "undefined" ) {				return context.getElementsByTagName( tag );			// DocumentFragment nodes don't have gEBTN			} else if ( support.qsa ) {				return context.querySelectorAll( tag );			}		} :		function( tag, context ) {			var elem,				tmp = [],				i = 0,				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too				results = context.getElementsByTagName( tag );			// Filter out possible comments			if ( tag === "*" ) {				while ( (elem = results[i++]) ) {					if ( elem.nodeType === 1 ) {						tmp.push( elem );					}				}				return tmp;			}			return results;		};	// Class	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {			return context.getElementsByClassName( className );		}	};	/* QSA/matchesSelector	---------------------------------------------------------------------- */	// QSA and matchesSelector support	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)	rbuggyMatches = [];	// qSa(:focus) reports false when true (Chrome 21)	// We allow this because of a bug in IE8/9 that throws an error	// whenever `document.activeElement` is accessed on an iframe	// So, we allow :focus to pass through QSA all the time to avoid the IE error	// See https://bugs.jquery.com/ticket/13378	rbuggyQSA = [];	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {		// Build QSA regex		// Regex strategy adopted from Diego Perini		assert(function( el ) {			// Select is set to empty string on purpose			// This is to test IE's treatment of not explicitly			// setting a boolean content attribute,			// since its presence should be enough			// https://bugs.jquery.com/ticket/12359			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +				"<select id='" + expando + "-\r\\' msallowcapture=''>" +				"<option selected=''></option></select>";			// Support: IE8, Opera 11-12.16			// Nothing should be selected when empty strings follow ^= or $= or *=			// The test attribute must be unknown in Opera but "safe" for WinRT			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section			if ( el.querySelectorAll("[msallowcapture^='']").length ) {				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );			}			// Support: IE8			// Boolean attributes and "value" are not treated correctly			if ( !el.querySelectorAll("[selected]").length ) {				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );			}			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {				rbuggyQSA.push("~=");			}			// Webkit/Opera - :checked should return selected option elements			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked			// IE8 throws error here and will not see later tests			if ( !el.querySelectorAll(":checked").length ) {				rbuggyQSA.push(":checked");			}			// Support: Safari 8+, iOS 8+			// https://bugs.webkit.org/show_bug.cgi?id=136851			// In-page `selector#id sibling-combinator selector` fails			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {				rbuggyQSA.push(".#.+[+~]");			}		});		assert(function( el ) {			el.innerHTML = "<a href='' disabled='disabled'></a>" +				"<select disabled='disabled'><option/></select>";			// Support: Windows 8 Native Apps			// The type and name attributes are restricted during .innerHTML assignment			var input = document.createElement("input");			input.setAttribute( "type", "hidden" );			el.appendChild( input ).setAttribute( "name", "D" );			// Support: IE8			// Enforce case-sensitivity of name attribute			if ( el.querySelectorAll("[name=d]").length ) {				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );			}			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)			// IE8 throws error here and will not see later tests			if ( el.querySelectorAll(":enabled").length !== 2 ) {				rbuggyQSA.push( ":enabled", ":disabled" );			}			// Support: IE9-11+			// IE's :disabled selector does not pick up the children of disabled fieldsets			docElem.appendChild( el ).disabled = true;			if ( el.querySelectorAll(":disabled").length !== 2 ) {				rbuggyQSA.push( ":enabled", ":disabled" );			}			// Opera 10-11 does not throw on post-comma invalid pseudos			el.querySelectorAll("*,:x");			rbuggyQSA.push(",.*:");		});	}	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||		docElem.webkitMatchesSelector ||		docElem.mozMatchesSelector ||		docElem.oMatchesSelector ||		docElem.msMatchesSelector) )) ) {		assert(function( el ) {			// Check to see if it's possible to do matchesSelector			// on a disconnected node (IE 9)			support.disconnectedMatch = matches.call( el, "*" );			// This should fail with an exception			// Gecko does not error, returns false instead			matches.call( el, "[s!='']:x" );			rbuggyMatches.push( "!=", pseudos );		});	}	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );	/* Contains	---------------------------------------------------------------------- */	hasCompare = rnative.test( docElem.compareDocumentPosition );	// Element contains another	// Purposefully self-exclusive	// As in, an element does not contain itself	contains = hasCompare || rnative.test( docElem.contains ) ?		function( a, b ) {			var adown = a.nodeType === 9 ? a.documentElement : a,				bup = b && b.parentNode;			return a === bup || !!( bup && bup.nodeType === 1 && (				adown.contains ?					adown.contains( bup ) :					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16			));		} :		function( a, b ) {			if ( b ) {				while ( (b = b.parentNode) ) {					if ( b === a ) {						return true;					}				}			}			return false;		};	/* Sorting	---------------------------------------------------------------------- */	// Document order sorting	sortOrder = hasCompare ?	function( a, b ) {		// Flag for duplicate removal		if ( a === b ) {			hasDuplicate = true;			return 0;		}		// Sort on method existence if only one input has compareDocumentPosition		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;		if ( compare ) {			return compare;		}		// Calculate position if both inputs belong to the same document		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?			a.compareDocumentPosition( b ) :			// Otherwise we know they are disconnected			1;		// Disconnected nodes		if ( compare & 1 ||			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {			// Choose the first element that is related to our preferred document			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {				return -1;			}			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {				return 1;			}			// Maintain original order			return sortInput ?				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :				0;		}		return compare & 4 ? -1 : 1;	} :	function( a, b ) {		// Exit early if the nodes are identical		if ( a === b ) {			hasDuplicate = true;			return 0;		}		var cur,			i = 0,			aup = a.parentNode,			bup = b.parentNode,			ap = [ a ],			bp = [ b ];		// Parentless nodes are either documents or disconnected		if ( !aup || !bup ) {			return a === document ? -1 :				b === document ? 1 :				aup ? -1 :				bup ? 1 :				sortInput ?				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :				0;		// If the nodes are siblings, we can do a quick check		} else if ( aup === bup ) {			return siblingCheck( a, b );		}		// Otherwise we need full lists of their ancestors for comparison		cur = a;		while ( (cur = cur.parentNode) ) {			ap.unshift( cur );		}		cur = b;		while ( (cur = cur.parentNode) ) {			bp.unshift( cur );		}		// Walk down the tree looking for a discrepancy		while ( ap[i] === bp[i] ) {			i++;		}		return i ?			// Do a sibling check if the nodes have a common ancestor			siblingCheck( ap[i], bp[i] ) :			// Otherwise nodes in our document sort first			ap[i] === preferredDoc ? -1 :			bp[i] === preferredDoc ? 1 :			0;	};	return document;};Sizzle.matches = function( expr, elements ) {	return Sizzle( expr, null, null, elements );};Sizzle.matchesSelector = function( elem, expr ) {	// Set document vars if needed	if ( ( elem.ownerDocument || elem ) !== document ) {		setDocument( elem );	}	// Make sure that attribute selectors are quoted	expr = expr.replace( rattributeQuotes, "='$1']" );	if ( support.matchesSelector && documentIsHTML &&		!compilerCache[ expr + " " ] &&		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {		try {			var ret = matches.call( elem, expr );			// IE 9's matchesSelector returns false on disconnected nodes			if ( ret || support.disconnectedMatch ||					// As well, disconnected nodes are said to be in a document					// fragment in IE 9					elem.document && elem.document.nodeType !== 11 ) {				return ret;			}		} catch (e) {}	}	return Sizzle( expr, document, null, [ elem ] ).length > 0;};Sizzle.contains = function( context, elem ) {	// Set document vars if needed	if ( ( context.ownerDocument || context ) !== document ) {		setDocument( context );	}	return contains( context, elem );};Sizzle.attr = function( elem, name ) {	// Set document vars if needed	if ( ( elem.ownerDocument || elem ) !== document ) {		setDocument( elem );	}	var fn = Expr.attrHandle[ name.toLowerCase() ],		// Don't get fooled by Object.prototype properties (jQuery #13807)		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?			fn( elem, name, !documentIsHTML ) :			undefined;	return val !== undefined ?		val :		support.attributes || !documentIsHTML ?			elem.getAttribute( name ) :			(val = elem.getAttributeNode(name)) && val.specified ?				val.value :				null;};Sizzle.escape = function( sel ) {	return (sel + "").replace( rcssescape, fcssescape );};Sizzle.error = function( msg ) {	throw new Error( "Syntax error, unrecognized expression: " + msg );};/** * Document sorting and removing duplicates * @param {ArrayLike} results */Sizzle.uniqueSort = function( results ) {	var elem,		duplicates = [],		j = 0,		i = 0;	// Unless we *know* we can detect duplicates, assume their presence	hasDuplicate = !support.detectDuplicates;	sortInput = !support.sortStable && results.slice( 0 );	results.sort( sortOrder );	if ( hasDuplicate ) {		while ( (elem = results[i++]) ) {			if ( elem === results[ i ] ) {				j = duplicates.push( i );			}		}		while ( j-- ) {			results.splice( duplicates[ j ], 1 );		}	}	// Clear input after sorting to release objects	// See https://github.com/jquery/sizzle/pull/225	sortInput = null;	return results;};/** * Utility function for retrieving the text value of an array of DOM nodes * @param {Array|Element} elem */getText = Sizzle.getText = function( elem ) {	var node,		ret = "",		i = 0,		nodeType = elem.nodeType;	if ( !nodeType ) {		// If no nodeType, this is expected to be an array		while ( (node = elem[i++]) ) {			// Do not traverse comment nodes			ret += getText( node );		}	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {		// Use textContent for elements		// innerText usage removed for consistency of new lines (jQuery #11153)		if ( typeof elem.textContent === "string" ) {			return elem.textContent;		} else {			// Traverse its children			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {				ret += getText( elem );			}		}	} else if ( nodeType === 3 || nodeType === 4 ) {		return elem.nodeValue;	}	// Do not include comment or processing instruction nodes	return ret;};Expr = Sizzle.selectors = {	// Can be adjusted by the user	cacheLength: 50,	createPseudo: markFunction,	match: matchExpr,	attrHandle: {},	find: {},	relative: {		">": { dir: "parentNode", first: true },		" ": { dir: "parentNode" },		"+": { dir: "previousSibling", first: true },		"~": { dir: "previousSibling" }	},	preFilter: {		"ATTR": function( match ) {			match[1] = match[1].replace( runescape, funescape );			// Move the given value to match[3] whether quoted or unquoted			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );			if ( match[2] === "~=" ) {				match[3] = " " + match[3] + " ";			}			return match.slice( 0, 4 );		},		"CHILD": function( match ) {			/* matches from matchExpr["CHILD"]				1 type (only|nth|...)				2 what (child|of-type)				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)				4 xn-component of xn+y argument ([+-]?\d*n|)				5 sign of xn-component				6 x of xn-component				7 sign of y-component				8 y of y-component			*/			match[1] = match[1].toLowerCase();			if ( match[1].slice( 0, 3 ) === "nth" ) {				// nth-* requires argument				if ( !match[3] ) {					Sizzle.error( match[0] );				}				// numeric x and y parameters for Expr.filter.CHILD				// remember that false/true cast respectively to 0/1				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );			// other types prohibit arguments			} else if ( match[3] ) {				Sizzle.error( match[0] );			}			return match;		},		"PSEUDO": function( match ) {			var excess,				unquoted = !match[6] && match[2];			if ( matchExpr["CHILD"].test( match[0] ) ) {				return null;			}			// Accept quoted arguments as-is			if ( match[3] ) {				match[2] = match[4] || match[5] || "";			// Strip excess characters from unquoted arguments			} else if ( unquoted && rpseudo.test( unquoted ) &&				// Get excess from tokenize (recursively)				(excess = tokenize( unquoted, true )) &&				// advance to the next closing parenthesis				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {				// excess is a negative index				match[0] = match[0].slice( 0, excess );				match[2] = unquoted.slice( 0, excess );			}			// Return only captures needed by the pseudo filter method (type and argument)			return match.slice( 0, 3 );		}	},	filter: {		"TAG": function( nodeNameSelector ) {			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();			return nodeNameSelector === "*" ?				function() { return true; } :				function( elem ) {					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;				};		},		"CLASS": function( className ) {			var pattern = classCache[ className + " " ];			return pattern ||				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&				classCache( className, function( elem ) {					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );				});		},		"ATTR": function( name, operator, check ) {			return function( elem ) {				var result = Sizzle.attr( elem, name );				if ( result == null ) {					return operator === "!=";				}				if ( !operator ) {					return true;				}				result += "";				return operator === "=" ? result === check :					operator === "!=" ? result !== check :					operator === "^=" ? check && result.indexOf( check ) === 0 :					operator === "*=" ? check && result.indexOf( check ) > -1 :					operator === "$=" ? check && result.slice( -check.length ) === check :					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :					false;			};		},		"CHILD": function( type, what, argument, first, last ) {			var simple = type.slice( 0, 3 ) !== "nth",				forward = type.slice( -4 ) !== "last",				ofType = what === "of-type";			return first === 1 && last === 0 ?				// Shortcut for :nth-*(n)				function( elem ) {					return !!elem.parentNode;				} :				function( elem, context, xml ) {					var cache, uniqueCache, outerCache, node, nodeIndex, start,						dir = simple !== forward ? "nextSibling" : "previousSibling",						parent = elem.parentNode,						name = ofType && elem.nodeName.toLowerCase(),						useCache = !xml && !ofType,						diff = false;					if ( parent ) {						// :(first|last|only)-(child|of-type)						if ( simple ) {							while ( dir ) {								node = elem;								while ( (node = node[ dir ]) ) {									if ( ofType ?										node.nodeName.toLowerCase() === name :										node.nodeType === 1 ) {										return false;									}								}								// Reverse direction for :only-* (if we haven't yet done so)								start = dir = type === "only" && !start && "nextSibling";							}							return true;						}						start = [ forward ? parent.firstChild : parent.lastChild ];						// non-xml :nth-child(...) stores cache data on `parent`						if ( forward && useCache ) {							// Seek `elem` from a previously-cached index							// ...in a gzip-friendly way							node = parent;							outerCache = node[ expando ] || (node[ expando ] = {});							// Support: IE <9 only							// Defend against cloned attroperties (jQuery gh-1709)							uniqueCache = outerCache[ node.uniqueID ] ||								(outerCache[ node.uniqueID ] = {});							cache = uniqueCache[ type ] || [];							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];							diff = nodeIndex && cache[ 2 ];							node = nodeIndex && parent.childNodes[ nodeIndex ];							while ( (node = ++nodeIndex && node && node[ dir ] ||								// Fallback to seeking `elem` from the start								(diff = nodeIndex = 0) || start.pop()) ) {								// When found, cache indexes on `parent` and break								if ( node.nodeType === 1 && ++diff && node === elem ) {									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];									break;								}							}						} else {							// Use previously-cached element index if available							if ( useCache ) {								// ...in a gzip-friendly way								node = elem;								outerCache = node[ expando ] || (node[ expando ] = {});								// Support: IE <9 only								// Defend against cloned attroperties (jQuery gh-1709)								uniqueCache = outerCache[ node.uniqueID ] ||									(outerCache[ node.uniqueID ] = {});								cache = uniqueCache[ type ] || [];								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];								diff = nodeIndex;							}							// xml :nth-child(...)							// or :nth-last-child(...) or :nth(-last)?-of-type(...)							if ( diff === false ) {								// Use the same loop as above to seek `elem` from the start								while ( (node = ++nodeIndex && node && node[ dir ] ||									(diff = nodeIndex = 0) || start.pop()) ) {									if ( ( ofType ?										node.nodeName.toLowerCase() === name :										node.nodeType === 1 ) &&										++diff ) {										// Cache the index of each encountered element										if ( useCache ) {											outerCache = node[ expando ] || (node[ expando ] = {});											// Support: IE <9 only											// Defend against cloned attroperties (jQuery gh-1709)											uniqueCache = outerCache[ node.uniqueID ] ||												(outerCache[ node.uniqueID ] = {});											uniqueCache[ type ] = [ dirruns, diff ];										}										if ( node === elem ) {											break;										}									}								}							}						}						// Incorporate the offset, then check against cycle size						diff -= last;						return diff === first || ( diff % first === 0 && diff / first >= 0 );					}				};		},		"PSEUDO": function( pseudo, argument ) {			// pseudo-class names are case-insensitive			// http://www.w3.org/TR/selectors/#pseudo-classes			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters			// Remember that setFilters inherits from pseudos			var args,				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||					Sizzle.error( "unsupported pseudo: " + pseudo );			// The user may use createPseudo to indicate that			// arguments are needed to create the filter function			// just as Sizzle does			if ( fn[ expando ] ) {				return fn( argument );			}			// But maintain support for old signatures			if ( fn.length > 1 ) {				args = [ pseudo, pseudo, "", argument ];				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?					markFunction(function( seed, matches ) {						var idx,							matched = fn( seed, argument ),							i = matched.length;						while ( i-- ) {							idx = indexOf( seed, matched[i] );							seed[ idx ] = !( matches[ idx ] = matched[i] );						}					}) :					function( elem ) {						return fn( elem, 0, args );					};			}			return fn;		}	},	pseudos: {		// Potentially complex pseudos		"not": markFunction(function( selector ) {			// Trim the selector passed to compile			// to avoid treating leading and trailing			// spaces as combinators			var input = [],				results = [],				matcher = compile( selector.replace( rtrim, "$1" ) );			return matcher[ expando ] ?				markFunction(function( seed, matches, context, xml ) {					var elem,						unmatched = matcher( seed, null, xml, [] ),						i = seed.length;					// Match elements unmatched by `matcher`					while ( i-- ) {						if ( (elem = unmatched[i]) ) {							seed[i] = !(matches[i] = elem);						}					}				}) :				function( elem, context, xml ) {					input[0] = elem;					matcher( input, null, xml, results );					// Don't keep the element (issue #299)					input[0] = null;					return !results.pop();				};		}),		"has": markFunction(function( selector ) {			return function( elem ) {				return Sizzle( selector, elem ).length > 0;			};		}),		"contains": markFunction(function( text ) {			text = text.replace( runescape, funescape );			return function( elem ) {				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;			};		}),		// "Whether an element is represented by a :lang() selector		// is based solely on the element's language value		// being equal to the identifier C,		// or beginning with the identifier C immediately followed by "-".		// The matching of C against the element's language value is performed case-insensitively.		// The identifier C does not have to be a valid language name."		// http://www.w3.org/TR/selectors/#lang-pseudo		"lang": markFunction( function( lang ) {			// lang value must be a valid identifier			if ( !ridentifier.test(lang || "") ) {				Sizzle.error( "unsupported lang: " + lang );			}			lang = lang.replace( runescape, funescape ).toLowerCase();			return function( elem ) {				var elemLang;				do {					if ( (elemLang = documentIsHTML ?						elem.lang :						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {						elemLang = elemLang.toLowerCase();						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;					}				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );				return false;			};		}),		// Miscellaneous		"target": function( elem ) {			var hash = window.location && window.location.hash;			return hash && hash.slice( 1 ) === elem.id;		},		"root": function( elem ) {			return elem === docElem;		},		"focus": function( elem ) {			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);		},		// Boolean properties		"enabled": createDisabledPseudo( false ),		"disabled": createDisabledPseudo( true ),		"checked": function( elem ) {			// In CSS3, :checked should return both checked and selected elements			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked			var nodeName = elem.nodeName.toLowerCase();			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);		},		"selected": function( elem ) {			// Accessing this property makes selected-by-default			// options in Safari work properly			if ( elem.parentNode ) {				elem.parentNode.selectedIndex;			}			return elem.selected === true;		},		// Contents		"empty": function( elem ) {			// http://www.w3.org/TR/selectors/#empty-pseudo			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),			//   but not by others (comment: 8; processing instruction: 7; etc.)			// nodeType < 6 works because attributes (2) do not appear as children			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {				if ( elem.nodeType < 6 ) {					return false;				}			}			return true;		},		"parent": function( elem ) {			return !Expr.pseudos["empty"]( elem );		},		// Element/input types		"header": function( elem ) {			return rheader.test( elem.nodeName );		},		"input": function( elem ) {			return rinputs.test( elem.nodeName );		},		"button": function( elem ) {			var name = elem.nodeName.toLowerCase();			return name === "input" && elem.type === "button" || name === "button";		},		"text": function( elem ) {			var attr;			return elem.nodeName.toLowerCase() === "input" &&				elem.type === "text" &&				// Support: IE<8				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );		},		// Position-in-collection		"first": createPositionalPseudo(function() {			return [ 0 ];		}),		"last": createPositionalPseudo(function( matchIndexes, length ) {			return [ length - 1 ];		}),		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {			return [ argument < 0 ? argument + length : argument ];		}),		"even": createPositionalPseudo(function( matchIndexes, length ) {			var i = 0;			for ( ; i < length; i += 2 ) {				matchIndexes.push( i );			}			return matchIndexes;		}),		"odd": createPositionalPseudo(function( matchIndexes, length ) {			var i = 1;			for ( ; i < length; i += 2 ) {				matchIndexes.push( i );			}			return matchIndexes;		}),		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {			var i = argument < 0 ? argument + length : argument;			for ( ; --i >= 0; ) {				matchIndexes.push( i );			}			return matchIndexes;		}),		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {			var i = argument < 0 ? argument + length : argument;			for ( ; ++i < length; ) {				matchIndexes.push( i );			}			return matchIndexes;		})	}};Expr.pseudos["nth"] = Expr.pseudos["eq"];// Add button/input type pseudosfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {	Expr.pseudos[ i ] = createInputPseudo( i );}for ( i in { submit: true, reset: true } ) {	Expr.pseudos[ i ] = createButtonPseudo( i );}// Easy API for creating new setFiltersfunction setFilters() {}setFilters.prototype = Expr.filters = Expr.pseudos;Expr.setFilters = new setFilters();tokenize = Sizzle.tokenize = function( selector, parseOnly ) {	var matched, match, tokens, type,		soFar, groups, preFilters,		cached = tokenCache[ selector + " " ];	if ( cached ) {		return parseOnly ? 0 : cached.slice( 0 );	}	soFar = selector;	groups = [];	preFilters = Expr.preFilter;	while ( soFar ) {		// Comma and first run		if ( !matched || (match = rcomma.exec( soFar )) ) {			if ( match ) {				// Don't consume trailing commas as valid				soFar = soFar.slice( match[0].length ) || soFar;			}			groups.push( (tokens = []) );		}		matched = false;		// Combinators		if ( (match = rcombinators.exec( soFar )) ) {			matched = match.shift();			tokens.push({				value: matched,				// Cast descendant combinators to space				type: match[0].replace( rtrim, " " )			});			soFar = soFar.slice( matched.length );		}		// Filters		for ( type in Expr.filter ) {			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||				(match = preFilters[ type ]( match ))) ) {				matched = match.shift();				tokens.push({					value: matched,					type: type,					matches: match				});				soFar = soFar.slice( matched.length );			}		}		if ( !matched ) {			break;		}	}	// Return the length of the invalid excess	// if we're just parsing	// Otherwise, throw an error or return tokens	return parseOnly ?		soFar.length :		soFar ?			Sizzle.error( selector ) :			// Cache the tokens			tokenCache( selector, groups ).slice( 0 );};function toSelector( tokens ) {	var i = 0,		len = tokens.length,		selector = "";	for ( ; i < len; i++ ) {		selector += tokens[i].value;	}	return selector;}function addCombinator( matcher, combinator, base ) {	var dir = combinator.dir,		skip = combinator.next,		key = skip || dir,		checkNonElements = base && key === "parentNode",		doneName = done++;	return combinator.first ?		// Check against closest ancestor/preceding element		function( elem, context, xml ) {			while ( (elem = elem[ dir ]) ) {				if ( elem.nodeType === 1 || checkNonElements ) {					return matcher( elem, context, xml );				}			}			return false;		} :		// Check against all ancestor/preceding elements		function( elem, context, xml ) {			var oldCache, uniqueCache, outerCache,				newCache = [ dirruns, doneName ];			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching			if ( xml ) {				while ( (elem = elem[ dir ]) ) {					if ( elem.nodeType === 1 || checkNonElements ) {						if ( matcher( elem, context, xml ) ) {							return true;						}					}				}			} else {				while ( (elem = elem[ dir ]) ) {					if ( elem.nodeType === 1 || checkNonElements ) {						outerCache = elem[ expando ] || (elem[ expando ] = {});						// Support: IE <9 only						// Defend against cloned attroperties (jQuery gh-1709)						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});						if ( skip && skip === elem.nodeName.toLowerCase() ) {							elem = elem[ dir ] || elem;						} else if ( (oldCache = uniqueCache[ key ]) &&							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {							// Assign to newCache so results back-propagate to previous elements							return (newCache[ 2 ] = oldCache[ 2 ]);						} else {							// Reuse newcache so results back-propagate to previous elements							uniqueCache[ key ] = newCache;							// A match means we're done; a fail means we have to keep checking							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {								return true;							}						}					}				}			}			return false;		};}function elementMatcher( matchers ) {	return matchers.length > 1 ?		function( elem, context, xml ) {			var i = matchers.length;			while ( i-- ) {				if ( !matchers[i]( elem, context, xml ) ) {					return false;				}			}			return true;		} :		matchers[0];}function multipleContexts( selector, contexts, results ) {	var i = 0,		len = contexts.length;	for ( ; i < len; i++ ) {		Sizzle( selector, contexts[i], results );	}	return results;}function condense( unmatched, map, filter, context, xml ) {	var elem,		newUnmatched = [],		i = 0,		len = unmatched.length,		mapped = map != null;	for ( ; i < len; i++ ) {		if ( (elem = unmatched[i]) ) {			if ( !filter || filter( elem, context, xml ) ) {				newUnmatched.push( elem );				if ( mapped ) {					map.push( i );				}			}		}	}	return newUnmatched;}function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {	if ( postFilter && !postFilter[ expando ] ) {		postFilter = setMatcher( postFilter );	}	if ( postFinder && !postFinder[ expando ] ) {		postFinder = setMatcher( postFinder, postSelector );	}	return markFunction(function( seed, results, context, xml ) {		var temp, i, elem,			preMap = [],			postMap = [],			preexisting = results.length,			// Get initial elements from seed or context			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),			// Prefilter to get matcher input, preserving a map for seed-results synchronization			matcherIn = preFilter && ( seed || !selector ) ?				condense( elems, preMap, preFilter, context, xml ) :				elems,			matcherOut = matcher ?				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?					// ...intermediate processing is necessary					[] :					// ...otherwise use results directly					results :				matcherIn;		// Find primary matches		if ( matcher ) {			matcher( matcherIn, matcherOut, context, xml );		}		// Apply postFilter		if ( postFilter ) {			temp = condense( matcherOut, postMap );			postFilter( temp, [], context, xml );			// Un-match failing elements by moving them back to matcherIn			i = temp.length;			while ( i-- ) {				if ( (elem = temp[i]) ) {					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);				}			}		}		if ( seed ) {			if ( postFinder || preFilter ) {				if ( postFinder ) {					// Get the final matcherOut by condensing this intermediate into postFinder contexts					temp = [];					i = matcherOut.length;					while ( i-- ) {						if ( (elem = matcherOut[i]) ) {							// Restore matcherIn since elem is not yet a final match							temp.push( (matcherIn[i] = elem) );						}					}					postFinder( null, (matcherOut = []), temp, xml );				}				// Move matched elements from seed to results to keep them synchronized				i = matcherOut.length;				while ( i-- ) {					if ( (elem = matcherOut[i]) &&						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {						seed[temp] = !(results[temp] = elem);					}				}			}		// Add elements to results, through postFinder if defined		} else {			matcherOut = condense(				matcherOut === results ?					matcherOut.splice( preexisting, matcherOut.length ) :					matcherOut			);			if ( postFinder ) {				postFinder( null, results, matcherOut, xml );			} else {				push.apply( results, matcherOut );			}		}	});}function matcherFromTokens( tokens ) {	var checkContext, matcher, j,		len = tokens.length,		leadingRelative = Expr.relative[ tokens[0].type ],		implicitRelative = leadingRelative || Expr.relative[" "],		i = leadingRelative ? 1 : 0,		// The foundational matcher ensures that elements are reachable from top-level context(s)		matchContext = addCombinator( function( elem ) {			return elem === checkContext;		}, implicitRelative, true ),		matchAnyContext = addCombinator( function( elem ) {			return indexOf( checkContext, elem ) > -1;		}, implicitRelative, true ),		matchers = [ function( elem, context, xml ) {			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (				(checkContext = context).nodeType ?					matchContext( elem, context, xml ) :					matchAnyContext( elem, context, xml ) );			// Avoid hanging onto element (issue #299)			checkContext = null;			return ret;		} ];	for ( ; i < len; i++ ) {		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];		} else {			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );			// Return special upon seeing a positional matcher			if ( matcher[ expando ] ) {				// Find the next relative operator (if any) for proper handling				j = ++i;				for ( ; j < len; j++ ) {					if ( Expr.relative[ tokens[j].type ] ) {						break;					}				}				return setMatcher(					i > 1 && elementMatcher( matchers ),					i > 1 && toSelector(						// If the preceding token was a descendant combinator, insert an implicit any-element `*`						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })					).replace( rtrim, "$1" ),					matcher,					i < j && matcherFromTokens( tokens.slice( i, j ) ),					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),					j < len && toSelector( tokens )				);			}			matchers.push( matcher );		}	}	return elementMatcher( matchers );}function matcherFromGroupMatchers( elementMatchers, setMatchers ) {	var bySet = setMatchers.length > 0,		byElement = elementMatchers.length > 0,		superMatcher = function( seed, context, xml, results, outermost ) {			var elem, j, matcher,				matchedCount = 0,				i = "0",				unmatched = seed && [],				setMatched = [],				contextBackup = outermostContext,				// We must always have either seed elements or outermost context				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),				// Use integer dirruns iff this is the outermost matcher				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),				len = elems.length;			if ( outermost ) {				outermostContext = context === document || context || outermost;			}			// Add elements passing elementMatchers directly to results			// Support: IE<9, Safari			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {				if ( byElement && elem ) {					j = 0;					if ( !context && elem.ownerDocument !== document ) {						setDocument( elem );						xml = !documentIsHTML;					}					while ( (matcher = elementMatchers[j++]) ) {						if ( matcher( elem, context || document, xml) ) {							results.push( elem );							break;						}					}					if ( outermost ) {						dirruns = dirrunsUnique;					}				}				// Track unmatched elements for set filters				if ( bySet ) {					// They will have gone through all possible matchers					if ( (elem = !matcher && elem) ) {						matchedCount--;					}					// Lengthen the array for every element, matched or not					if ( seed ) {						unmatched.push( elem );					}				}			}			// `i` is now the count of elements visited above, and adding it to `matchedCount`			// makes the latter nonnegative.			matchedCount += i;			// Apply set filters to unmatched elements			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have			// no element matchers and no seed.			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that			// case, which will result in a "00" `matchedCount` that differs from `i` but is also			// numerically zero.			if ( bySet && i !== matchedCount ) {				j = 0;				while ( (matcher = setMatchers[j++]) ) {					matcher( unmatched, setMatched, context, xml );				}				if ( seed ) {					// Reintegrate element matches to eliminate the need for sorting					if ( matchedCount > 0 ) {						while ( i-- ) {							if ( !(unmatched[i] || setMatched[i]) ) {								setMatched[i] = pop.call( results );							}						}					}					// Discard index placeholder values to get only actual matches					setMatched = condense( setMatched );				}				// Add matches to results				push.apply( results, setMatched );				// Seedless set matches succeeding multiple successful matchers stipulate sorting				if ( outermost && !seed && setMatched.length > 0 &&					( matchedCount + setMatchers.length ) > 1 ) {					Sizzle.uniqueSort( results );				}			}			// Override manipulation of globals by nested matchers			if ( outermost ) {				dirruns = dirrunsUnique;				outermostContext = contextBackup;			}			return unmatched;		};	return bySet ?		markFunction( superMatcher ) :		superMatcher;}compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {	var i,		setMatchers = [],		elementMatchers = [],		cached = compilerCache[ selector + " " ];	if ( !cached ) {		// Generate a function of recursive functions that can be used to check each element		if ( !match ) {			match = tokenize( selector );		}		i = match.length;		while ( i-- ) {			cached = matcherFromTokens( match[i] );			if ( cached[ expando ] ) {				setMatchers.push( cached );			} else {				elementMatchers.push( cached );			}		}		// Cache the compiled function		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );		// Save selector and tokenization		cached.selector = selector;	}	return cached;};/** * A low-level selection function that works with Sizzle's compiled *  selector functions * @param {String|Function} selector A selector or a pre-compiled *  selector function built with Sizzle.compile * @param {Element} context * @param {Array} [results] * @param {Array} [seed] A set of elements to match against */select = Sizzle.select = function( selector, context, results, seed ) {	var i, tokens, token, type, find,		compiled = typeof selector === "function" && selector,		match = !seed && tokenize( (selector = compiled.selector || selector) );	results = results || [];	// Try to minimize operations if there is only one selector in the list and no seed	// (the latter of which guarantees us context)	if ( match.length === 1 ) {		// Reduce context if the leading compound selector is an ID		tokens = match[0] = match[0].slice( 0 );		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];			if ( !context ) {				return results;			// Precompiled matchers will still verify ancestry, so step up a level			} else if ( compiled ) {				context = context.parentNode;			}			selector = selector.slice( tokens.shift().value.length );		}		// Fetch a seed set for right-to-left matching		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;		while ( i-- ) {			token = tokens[i];			// Abort if we hit a combinator			if ( Expr.relative[ (type = token.type) ] ) {				break;			}			if ( (find = Expr.find[ type ]) ) {				// Search, expanding context for leading sibling combinators				if ( (seed = find(					token.matches[0].replace( runescape, funescape ),					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context				)) ) {					// If seed is empty or no tokens remain, we can return early					tokens.splice( i, 1 );					selector = seed.length && toSelector( tokens );					if ( !selector ) {						push.apply( results, seed );						return results;					}					break;				}			}		}	}	// Compile and execute a filtering function if one is not provided	// Provide `match` to avoid retokenization if we modified the selector above	( compiled || compile( selector, match ) )(		seed,		context,		!documentIsHTML,		results,		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context	);	return results;};// One-time assignments// Sort stabilitysupport.sortStable = expando.split("").sort( sortOrder ).join("") === expando;// Support: Chrome 14-35+// Always assume duplicates if they aren't passed to the comparison functionsupport.detectDuplicates = !!hasDuplicate;// Initialize against the default documentsetDocument();// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)// Detached nodes confoundingly follow *each other*support.sortDetached = assert(function( el ) {	// Should return 1, but returns 4 (following)	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;});// Support: IE<8// Prevent attribute/property "interpolation"// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspxif ( !assert(function( el ) {	el.innerHTML = "<a href='#'></a>";	return el.firstChild.getAttribute("href") === "#" ;}) ) {	addHandle( "type|href|height|width", function( elem, name, isXML ) {		if ( !isXML ) {			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );		}	});}// Support: IE<9// Use defaultValue in place of getAttribute("value")if ( !support.attributes || !assert(function( el ) {	el.innerHTML = "<input/>";	el.firstChild.setAttribute( "value", "" );	return el.firstChild.getAttribute( "value" ) === "";}) ) {	addHandle( "value", function( elem, name, isXML ) {		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {			return elem.defaultValue;		}	});}// Support: IE<9// Use getAttributeNode to fetch booleans when getAttribute liesif ( !assert(function( el ) {	return el.getAttribute("disabled") == null;}) ) {	addHandle( booleans, function( elem, name, isXML ) {		var val;		if ( !isXML ) {			return elem[ name ] === true ? name.toLowerCase() :					(val = elem.getAttributeNode( name )) && val.specified ?					val.value :				null;		}	});}return Sizzle;})( window );jQuery.find = Sizzle;jQuery.expr = Sizzle.selectors;// DeprecatedjQuery.expr[ ":" ] = jQuery.expr.pseudos;jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;jQuery.text = Sizzle.getText;jQuery.isXMLDoc = Sizzle.isXML;jQuery.contains = Sizzle.contains;jQuery.escapeSelector = Sizzle.escape;var dir = function( elem, dir, until ) {	var matched = [],		truncate = until !== undefined;	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {		if ( elem.nodeType === 1 ) {			if ( truncate && jQuery( elem ).is( until ) ) {				break;			}			matched.push( elem );		}	}	return matched;};var siblings = function( n, elem ) {	var matched = [];	for ( ; n; n = n.nextSibling ) {		if ( n.nodeType === 1 && n !== elem ) {			matched.push( n );		}	}	return matched;};var rneedsContext = jQuery.expr.match.needsContext;function nodeName( elem, name ) {  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();};var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );var risSimple = /^.[^:#\[\.,]*$/;// Implement the identical functionality for filter and notfunction winnow( elements, qualifier, not ) {	if ( jQuery.isFunction( qualifier ) ) {		return jQuery.grep( elements, function( elem, i ) {			return !!qualifier.call( elem, i, elem ) !== not;		} );	}	// Single element	if ( qualifier.nodeType ) {		return jQuery.grep( elements, function( elem ) {			return ( elem === qualifier ) !== not;		} );	}	// Arraylike of elements (jQuery, arguments, Array)	if ( typeof qualifier !== "string" ) {		return jQuery.grep( elements, function( elem ) {			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;		} );	}	// Simple selector that can be filtered directly, removing non-Elements	if ( risSimple.test( qualifier ) ) {		return jQuery.filter( qualifier, elements, not );	}	// Complex selector, compare the two sets, removing non-Elements	qualifier = jQuery.filter( qualifier, elements );	return jQuery.grep( elements, function( elem ) {		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;	} );}jQuery.filter = function( expr, elems, not ) {	var elem = elems[ 0 ];	if ( not ) {		expr = ":not(" + expr + ")";	}	if ( elems.length === 1 && elem.nodeType === 1 ) {		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];	}	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {		return elem.nodeType === 1;	} ) );};jQuery.fn.extend( {	find: function( selector ) {		var i, ret,			len = this.length,			self = this;		if ( typeof selector !== "string" ) {			return this.pushStack( jQuery( selector ).filter( function() {				for ( i = 0; i < len; i++ ) {					if ( jQuery.contains( self[ i ], this ) ) {						return true;					}				}			} ) );		}		ret = this.pushStack( [] );		for ( i = 0; i < len; i++ ) {			jQuery.find( selector, self[ i ], ret );		}		return len > 1 ? jQuery.uniqueSort( ret ) : ret;	},	filter: function( selector ) {		return this.pushStack( winnow( this, selector || [], false ) );	},	not: function( selector ) {		return this.pushStack( winnow( this, selector || [], true ) );	},	is: function( selector ) {		return !!winnow(			this,			// If this is a positional/relative selector, check membership in the returned set			// so $("p:first").is("p:last") won't return true for a doc with two "p".			typeof selector === "string" && rneedsContext.test( selector ) ?				jQuery( selector ) :				selector || [],			false		).length;	}} );// Initialize a jQuery object// A central reference to the root jQuery(document)var rootjQuery,	// A simple way to check for HTML strings	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)	// Strict HTML recognition (#11290: must start with <)	// Shortcut simple #id case for speed	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,	init = jQuery.fn.init = function( selector, context, root ) {		var match, elem;		// HANDLE: $(""), $(null), $(undefined), $(false)		if ( !selector ) {			return this;		}		// Method init() accepts an alternate rootjQuery		// so migrate can support jQuery.sub (gh-2101)		root = root || rootjQuery;		// Handle HTML strings		if ( typeof selector === "string" ) {			if ( selector[ 0 ] === "<" &&				selector[ selector.length - 1 ] === ">" &&				selector.length >= 3 ) {				// Assume that strings that start and end with <> are HTML and skip the regex check				match = [ null, selector, null ];			} else {				match = rquickExpr.exec( selector );			}			// Match html or make sure no context is specified for #id			if ( match && ( match[ 1 ] || !context ) ) {				// HANDLE: $(html) -> $(array)				if ( match[ 1 ] ) {					context = context instanceof jQuery ? context[ 0 ] : context;					// Option to run scripts is true for back-compat					// Intentionally let the error be thrown if parseHTML is not present					jQuery.merge( this, jQuery.parseHTML(						match[ 1 ],						context && context.nodeType ? context.ownerDocument || context : document,						true					) );					// HANDLE: $(html, props)					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {						for ( match in context ) {							// Properties of context are called as methods if possible							if ( jQuery.isFunction( this[ match ] ) ) {								this[ match ]( context[ match ] );							// ...and otherwise set as attributes							} else {								this.attr( match, context[ match ] );							}						}					}					return this;				// HANDLE: $(#id)				} else {					elem = document.getElementById( match[ 2 ] );					if ( elem ) {						// Inject the element directly into the jQuery object						this[ 0 ] = elem;						this.length = 1;					}					return this;				}			// HANDLE: $(expr, $(...))			} else if ( !context || context.jquery ) {				return ( context || root ).find( selector );			// HANDLE: $(expr, context)			// (which is just equivalent to: $(context).find(expr)			} else {				return this.constructor( context ).find( selector );			}		// HANDLE: $(DOMElement)		} else if ( selector.nodeType ) {			this[ 0 ] = selector;			this.length = 1;			return this;		// HANDLE: $(function)		// Shortcut for document ready		} else if ( jQuery.isFunction( selector ) ) {			return root.ready !== undefined ?				root.ready( selector ) :				// Execute immediately if ready is not present				selector( jQuery );		}		return jQuery.makeArray( selector, this );	};// Give the init function the jQuery prototype for later instantiationinit.prototype = jQuery.fn;// Initialize central referencerootjQuery = jQuery( document );var rparentsprev = /^(?:parents|prev(?:Until|All))/,	// Methods guaranteed to produce a unique set when starting from a unique set	guaranteedUnique = {		children: true,		contents: true,		next: true,		prev: true	};jQuery.fn.extend( {	has: function( target ) {		var targets = jQuery( target, this ),			l = targets.length;		return this.filter( function() {			var i = 0;			for ( ; i < l; i++ ) {				if ( jQuery.contains( this, targets[ i ] ) ) {					return true;				}			}		} );	},	closest: function( selectors, context ) {		var cur,			i = 0,			l = this.length,			matched = [],			targets = typeof selectors !== "string" && jQuery( selectors );		// Positional selectors never match, since there's no _selection_ context		if ( !rneedsContext.test( selectors ) ) {			for ( ; i < l; i++ ) {				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {					// Always skip document fragments					if ( cur.nodeType < 11 && ( targets ?						targets.index( cur ) > -1 :						// Don't pass non-elements to Sizzle						cur.nodeType === 1 &&							jQuery.find.matchesSelector( cur, selectors ) ) ) {						matched.push( cur );						break;					}				}			}		}		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );	},	// Determine the position of an element within the set	index: function( elem ) {		// No argument, return index in parent		if ( !elem ) {			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;		}		// Index in selector		if ( typeof elem === "string" ) {			return indexOf.call( jQuery( elem ), this[ 0 ] );		}		// Locate the position of the desired element		return indexOf.call( this,			// If it receives a jQuery object, the first element is used			elem.jquery ? elem[ 0 ] : elem		);	},	add: function( selector, context ) {		return this.pushStack(			jQuery.uniqueSort(				jQuery.merge( this.get(), jQuery( selector, context ) )			)		);	},	addBack: function( selector ) {		return this.add( selector == null ?			this.prevObject : this.prevObject.filter( selector )		);	}} );function sibling( cur, dir ) {	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}	return cur;}jQuery.each( {	parent: function( elem ) {		var parent = elem.parentNode;		return parent && parent.nodeType !== 11 ? parent : null;	},	parents: function( elem ) {		return dir( elem, "parentNode" );	},	parentsUntil: function( elem, i, until ) {		return dir( elem, "parentNode", until );	},	next: function( elem ) {		return sibling( elem, "nextSibling" );	},	prev: function( elem ) {		return sibling( elem, "previousSibling" );	},	nextAll: function( elem ) {		return dir( elem, "nextSibling" );	},	prevAll: function( elem ) {		return dir( elem, "previousSibling" );	},	nextUntil: function( elem, i, until ) {		return dir( elem, "nextSibling", until );	},	prevUntil: function( elem, i, until ) {		return dir( elem, "previousSibling", until );	},	siblings: function( elem ) {		return siblings( ( elem.parentNode || {} ).firstChild, elem );	},	children: function( elem ) {		return siblings( elem.firstChild );	},	contents: function( elem ) {        if ( nodeName( elem, "iframe" ) ) {            return elem.contentDocument;        }        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only        // Treat the template element as a regular one in browsers that        // don't support it.        if ( nodeName( elem, "template" ) ) {            elem = elem.content || elem;        }        return jQuery.merge( [], elem.childNodes );	}}, function( name, fn ) {	jQuery.fn[ name ] = function( until, selector ) {		var matched = jQuery.map( this, fn, until );		if ( name.slice( -5 ) !== "Until" ) {			selector = until;		}		if ( selector && typeof selector === "string" ) {			matched = jQuery.filter( selector, matched );		}		if ( this.length > 1 ) {			// Remove duplicates			if ( !guaranteedUnique[ name ] ) {				jQuery.uniqueSort( matched );			}			// Reverse order for parents* and prev-derivatives			if ( rparentsprev.test( name ) ) {				matched.reverse();			}		}		return this.pushStack( matched );	};} );var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );// Convert String-formatted options into Object-formatted onesfunction createOptions( options ) {	var object = {};	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {		object[ flag ] = true;	} );	return object;}/* * Create a callback list using the following parameters: * *	options: an optional list of space-separated options that will change how *			the callback list behaves or a more traditional option object * * By default a callback list will act like an event callback list and can be * "fired" multiple times. * * Possible options: * *	once:			will ensure the callback list can only be fired once (like a Deferred) * *	memory:			will keep track of previous values and will call any callback added *					after the list has been fired right away with the latest "memorized" *					values (like a Deferred) * *	unique:			will ensure a callback can only be added once (no duplicate in the list) * *	stopOnFalse:	interrupt callings when a callback returns false * */jQuery.Callbacks = function( options ) {	// Convert options from String-formatted to Object-formatted if needed	// (we check in cache first)	options = typeof options === "string" ?		createOptions( options ) :		jQuery.extend( {}, options );	var // Flag to know if list is currently firing		firing,		// Last fire value for non-forgettable lists		memory,		// Flag to know if list was already fired		fired,		// Flag to prevent firing		locked,		// Actual callback list		list = [],		// Queue of execution data for repeatable lists		queue = [],		// Index of currently firing callback (modified by add/remove as needed)		firingIndex = -1,		// Fire callbacks		fire = function() {			// Enforce single-firing			locked = locked || options.once;			// Execute callbacks for all pending executions,			// respecting firingIndex overrides and runtime changes			fired = firing = true;			for ( ; queue.length; firingIndex = -1 ) {				memory = queue.shift();				while ( ++firingIndex < list.length ) {					// Run callback and check for early termination					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&						options.stopOnFalse ) {						// Jump to end and forget the data so .add doesn't re-fire						firingIndex = list.length;						memory = false;					}				}			}			// Forget the data if we're done with it			if ( !options.memory ) {				memory = false;			}			firing = false;			// Clean up if we're done firing for good			if ( locked ) {				// Keep an empty list if we have data for future add calls				if ( memory ) {					list = [];				// Otherwise, this object is spent				} else {					list = "";				}			}		},		// Actual Callbacks object		self = {			// Add a callback or a collection of callbacks to the list			add: function() {				if ( list ) {					// If we have memory from a past run, we should fire after adding					if ( memory && !firing ) {						firingIndex = list.length - 1;						queue.push( memory );					}					( function add( args ) {						jQuery.each( args, function( _, arg ) {							if ( jQuery.isFunction( arg ) ) {								if ( !options.unique || !self.has( arg ) ) {									list.push( arg );								}							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {								// Inspect recursively								add( arg );							}						} );					} )( arguments );					if ( memory && !firing ) {						fire();					}				}				return this;			},			// Remove a callback from the list			remove: function() {				jQuery.each( arguments, function( _, arg ) {					var index;					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {						list.splice( index, 1 );						// Handle firing indexes						if ( index <= firingIndex ) {							firingIndex--;						}					}				} );				return this;			},			// Check if a given callback is in the list.			// If no argument is given, return whether or not list has callbacks attached.			has: function( fn ) {				return fn ?					jQuery.inArray( fn, list ) > -1 :					list.length > 0;			},			// Remove all callbacks from the list			empty: function() {				if ( list ) {					list = [];				}				return this;			},			// Disable .fire and .add			// Abort any current/pending executions			// Clear all callbacks and values			disable: function() {				locked = queue = [];				list = memory = "";				return this;			},			disabled: function() {				return !list;			},			// Disable .fire			// Also disable .add unless we have memory (since it would have no effect)			// Abort any pending executions			lock: function() {				locked = queue = [];				if ( !memory && !firing ) {					list = memory = "";				}				return this;			},			locked: function() {				return !!locked;			},			// Call all callbacks with the given context and arguments			fireWith: function( context, args ) {				if ( !locked ) {					args = args || [];					args = [ context, args.slice ? args.slice() : args ];					queue.push( args );					if ( !firing ) {						fire();					}				}				return this;			},			// Call all the callbacks with the given arguments			fire: function() {				self.fireWith( this, arguments );				return this;			},			// To know if the callbacks have already been called at least once			fired: function() {				return !!fired;			}		};	return self;};function Identity( v ) {	return v;}function Thrower( ex ) {	throw ex;}function adoptValue( value, resolve, reject, noValue ) {	var method;	try {		// Check for promise aspect first to privilege synchronous behavior		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {			method.call( value ).done( resolve ).fail( reject );		// Other thenables		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {			method.call( value, resolve, reject );		// Other non-thenables		} else {			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:			// * false: [ value ].slice( 0 ) => resolve( value )			// * true: [ value ].slice( 1 ) => resolve()			resolve.apply( undefined, [ value ].slice( noValue ) );		}	// For Promises/A+, convert exceptions into rejections	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in	// Deferred#then to conditionally suppress rejection.	} catch ( value ) {		// Support: Android 4.0 only		// Strict mode functions invoked without .call/.apply get global-object context		reject.apply( undefined, [ value ] );	}}jQuery.extend( {	Deferred: function( func ) {		var tuples = [				// action, add listener, callbacks,				// ... .then handlers, argument index, [final state]				[ "notify", "progress", jQuery.Callbacks( "memory" ),					jQuery.Callbacks( "memory" ), 2 ],				[ "resolve", "done", jQuery.Callbacks( "once memory" ),					jQuery.Callbacks( "once memory" ), 0, "resolved" ],				[ "reject", "fail", jQuery.Callbacks( "once memory" ),					jQuery.Callbacks( "once memory" ), 1, "rejected" ]			],			state = "pending",			promise = {				state: function() {					return state;				},				always: function() {					deferred.done( arguments ).fail( arguments );					return this;				},				"catch": function( fn ) {					return promise.then( null, fn );				},				// Keep pipe for back-compat				pipe: function( /* fnDone, fnFail, fnProgress */ ) {					var fns = arguments;					return jQuery.Deferred( function( newDefer ) {						jQuery.each( tuples, function( i, tuple ) {							// Map tuples (progress, done, fail) to arguments (done, fail, progress)							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];							// deferred.progress(function() { bind to newDefer or newDefer.notify })							// deferred.done(function() { bind to newDefer or newDefer.resolve })							// deferred.fail(function() { bind to newDefer or newDefer.reject })							deferred[ tuple[ 1 ] ]( function() {								var returned = fn && fn.apply( this, arguments );								if ( returned && jQuery.isFunction( returned.promise ) ) {									returned.promise()										.progress( newDefer.notify )										.done( newDefer.resolve )										.fail( newDefer.reject );								} else {									newDefer[ tuple[ 0 ] + "With" ](										this,										fn ? [ returned ] : arguments									);								}							} );						} );						fns = null;					} ).promise();				},				then: function( onFulfilled, onRejected, onProgress ) {					var maxDepth = 0;					function resolve( depth, deferred, handler, special ) {						return function() {							var that = this,								args = arguments,								mightThrow = function() {									var returned, then;									// Support: Promises/A+ section 2.3.3.3.3									// https://promisesaplus.com/#point-59									// Ignore double-resolution attempts									if ( depth < maxDepth ) {										return;									}									returned = handler.apply( that, args );									// Support: Promises/A+ section 2.3.1									// https://promisesaplus.com/#point-48									if ( returned === deferred.promise() ) {										throw new TypeError( "Thenable self-resolution" );									}									// Support: Promises/A+ sections 2.3.3.1, 3.5									// https://promisesaplus.com/#point-54									// https://promisesaplus.com/#point-75									// Retrieve `then` only once									then = returned &&										// Support: Promises/A+ section 2.3.4										// https://promisesaplus.com/#point-64										// Only check objects and functions for thenability										( typeof returned === "object" ||											typeof returned === "function" ) &&										returned.then;									// Handle a returned thenable									if ( jQuery.isFunction( then ) ) {										// Special processors (notify) just wait for resolution										if ( special ) {											then.call(												returned,												resolve( maxDepth, deferred, Identity, special ),												resolve( maxDepth, deferred, Thrower, special )											);										// Normal processors (resolve) also hook into progress										} else {											// ...and disregard older resolution values											maxDepth++;											then.call(												returned,												resolve( maxDepth, deferred, Identity, special ),												resolve( maxDepth, deferred, Thrower, special ),												resolve( maxDepth, deferred, Identity,													deferred.notifyWith )											);										}									// Handle all other returned values									} else {										// Only substitute handlers pass on context										// and multiple values (non-spec behavior)										if ( handler !== Identity ) {											that = undefined;											args = [ returned ];										}										// Process the value(s)										// Default process is resolve										( special || deferred.resolveWith )( that, args );									}								},								// Only normal processors (resolve) catch and reject exceptions								process = special ?									mightThrow :									function() {										try {											mightThrow();										} catch ( e ) {											if ( jQuery.Deferred.exceptionHook ) {												jQuery.Deferred.exceptionHook( e,													process.stackTrace );											}											// Support: Promises/A+ section 2.3.3.3.4.1											// https://promisesaplus.com/#point-61											// Ignore post-resolution exceptions											if ( depth + 1 >= maxDepth ) {												// Only substitute handlers pass on context												// and multiple values (non-spec behavior)												if ( handler !== Thrower ) {													that = undefined;													args = [ e ];												}												deferred.rejectWith( that, args );											}										}									};							// Support: Promises/A+ section 2.3.3.3.1							// https://promisesaplus.com/#point-57							// Re-resolve promises immediately to dodge false rejection from							// subsequent errors							if ( depth ) {								process();							} else {								// Call an optional hook to record the stack, in case of exception								// since it's otherwise lost when execution goes async								if ( jQuery.Deferred.getStackHook ) {									process.stackTrace = jQuery.Deferred.getStackHook();								}								window.setTimeout( process );							}						};					}					return jQuery.Deferred( function( newDefer ) {						// progress_handlers.add( ... )						tuples[ 0 ][ 3 ].add(							resolve(								0,								newDefer,								jQuery.isFunction( onProgress ) ?									onProgress :									Identity,								newDefer.notifyWith							)						);						// fulfilled_handlers.add( ... )						tuples[ 1 ][ 3 ].add(							resolve(								0,								newDefer,								jQuery.isFunction( onFulfilled ) ?									onFulfilled :									Identity							)						);						// rejected_handlers.add( ... )						tuples[ 2 ][ 3 ].add(							resolve(								0,								newDefer,								jQuery.isFunction( onRejected ) ?									onRejected :									Thrower							)						);					} ).promise();				},				// Get a promise for this deferred				// If obj is provided, the promise aspect is added to the object				promise: function( obj ) {					return obj != null ? jQuery.extend( obj, promise ) : promise;				}			},			deferred = {};		// Add list-specific methods		jQuery.each( tuples, function( i, tuple ) {			var list = tuple[ 2 ],				stateString = tuple[ 5 ];			// promise.progress = list.add			// promise.done = list.add			// promise.fail = list.add			promise[ tuple[ 1 ] ] = list.add;			// Handle state			if ( stateString ) {				list.add(					function() {						// state = "resolved" (i.e., fulfilled)						// state = "rejected"						state = stateString;					},					// rejected_callbacks.disable					// fulfilled_callbacks.disable					tuples[ 3 - i ][ 2 ].disable,					// progress_callbacks.lock					tuples[ 0 ][ 2 ].lock				);			}			// progress_handlers.fire			// fulfilled_handlers.fire			// rejected_handlers.fire			list.add( tuple[ 3 ].fire );			// deferred.notify = function() { deferred.notifyWith(...) }			// deferred.resolve = function() { deferred.resolveWith(...) }			// deferred.reject = function() { deferred.rejectWith(...) }			deferred[ tuple[ 0 ] ] = function() {				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );				return this;			};			// deferred.notifyWith = list.fireWith			// deferred.resolveWith = list.fireWith			// deferred.rejectWith = list.fireWith			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;		} );		// Make the deferred a promise		promise.promise( deferred );		// Call given func if any		if ( func ) {			func.call( deferred, deferred );		}		// All done!		return deferred;	},	// Deferred helper	when: function( singleValue ) {		var			// count of uncompleted subordinates			remaining = arguments.length,			// count of unprocessed arguments			i = remaining,			// subordinate fulfillment data			resolveContexts = Array( i ),			resolveValues = slice.call( arguments ),			// the master Deferred			master = jQuery.Deferred(),			// subordinate callback factory			updateFunc = function( i ) {				return function( value ) {					resolveContexts[ i ] = this;					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;					if ( !( --remaining ) ) {						master.resolveWith( resolveContexts, resolveValues );					}				};			};		// Single- and empty arguments are adopted like Promise.resolve		if ( remaining <= 1 ) {			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,				!remaining );			// Use .then() to unwrap secondary thenables (cf. gh-3000)			if ( master.state() === "pending" ||				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {				return master.then();			}		}		// Multiple arguments are aggregated like Promise.all array elements		while ( i-- ) {			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );		}		return master.promise();	}} );// These usually indicate a programmer mistake during development,// warn about them ASAP rather than swallowing them by default.var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;jQuery.Deferred.exceptionHook = function( error, stack ) {	// Support: IE 8 - 9 only	// Console exists when dev tools are open, which can happen at any time	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );	}};jQuery.readyException = function( error ) {	window.setTimeout( function() {		throw error;	} );};// The deferred used on DOM readyvar readyList = jQuery.Deferred();jQuery.fn.ready = function( fn ) {	readyList		.then( fn )		// Wrap jQuery.readyException in a function so that the lookup		// happens at the time of error handling instead of callback		// registration.		.catch( function( error ) {			jQuery.readyException( error );		} );	return this;};jQuery.extend( {	// Is the DOM ready to be used? Set to true once it occurs.	isReady: false,	// A counter to track how many items to wait for before	// the ready event fires. See #6781	readyWait: 1,	// Handle when the DOM is ready	ready: function( wait ) {		// Abort if there are pending holds or we're already ready		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {			return;		}		// Remember that the DOM is ready		jQuery.isReady = true;		// If a normal DOM Ready event fired, decrement, and wait if need be		if ( wait !== true && --jQuery.readyWait > 0 ) {			return;		}		// If there are functions bound, to execute		readyList.resolveWith( document, [ jQuery ] );	}} );jQuery.ready.then = readyList.then;// The ready event handler and self cleanup methodfunction completed() {	document.removeEventListener( "DOMContentLoaded", completed );	window.removeEventListener( "load", completed );	jQuery.ready();}// Catch cases where $(document).ready() is called// after the browser event has already occurred.// Support: IE <=9 - 10 only// Older IE sometimes signals "interactive" too soonif ( document.readyState === "complete" ||	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {	// Handle it asynchronously to allow scripts the opportunity to delay ready	window.setTimeout( jQuery.ready );} else {	// Use the handy event callback	document.addEventListener( "DOMContentLoaded", completed );	// A fallback to window.onload, that will always work	window.addEventListener( "load", completed );}// Multifunctional method to get and set values of a collection// The value/s can optionally be executed if it's a functionvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {	var i = 0,		len = elems.length,		bulk = key == null;	// Sets many values	if ( jQuery.type( key ) === "object" ) {		chainable = true;		for ( i in key ) {			access( elems, fn, i, key[ i ], true, emptyGet, raw );		}	// Sets one value	} else if ( value !== undefined ) {		chainable = true;		if ( !jQuery.isFunction( value ) ) {			raw = true;		}		if ( bulk ) {			// Bulk operations run against the entire set			if ( raw ) {				fn.call( elems, value );				fn = null;			// ...except when executing function values			} else {				bulk = fn;				fn = function( elem, key, value ) {					return bulk.call( jQuery( elem ), value );				};			}		}		if ( fn ) {			for ( ; i < len; i++ ) {				fn(					elems[ i ], key, raw ?					value :					value.call( elems[ i ], i, fn( elems[ i ], key ) )				);			}		}	}	if ( chainable ) {		return elems;	}	// Gets	if ( bulk ) {		return fn.call( elems );	}	return len ? fn( elems[ 0 ], key ) : emptyGet;};var acceptData = function( owner ) {	// Accepts only:	//  - Node	//    - Node.ELEMENT_NODE	//    - Node.DOCUMENT_NODE	//  - Object	//    - Any	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );};function Data() {	this.expando = jQuery.expando + Data.uid++;}Data.uid = 1;Data.prototype = {	cache: function( owner ) {		// Check if the owner object already has a cache		var value = owner[ this.expando ];		// If not, create one		if ( !value ) {			value = {};			// We can accept data for non-element nodes in modern browsers,			// but we should not, see #8335.			// Always return an empty object.			if ( acceptData( owner ) ) {				// If it is a node unlikely to be stringify-ed or looped over				// use plain assignment				if ( owner.nodeType ) {					owner[ this.expando ] = value;				// Otherwise secure it in a non-enumerable property				// configurable must be true to allow the property to be				// deleted when data is removed				} else {					Object.defineProperty( owner, this.expando, {						value: value,						configurable: true					} );				}			}		}		return value;	},	set: function( owner, data, value ) {		var prop,			cache = this.cache( owner );		// Handle: [ owner, key, value ] args		// Always use camelCase key (gh-2257)		if ( typeof data === "string" ) {			cache[ jQuery.camelCase( data ) ] = value;		// Handle: [ owner, { properties } ] args		} else {			// Copy the properties one-by-one to the cache object			for ( prop in data ) {				cache[ jQuery.camelCase( prop ) ] = data[ prop ];			}		}		return cache;	},	get: function( owner, key ) {		return key === undefined ?			this.cache( owner ) :			// Always use camelCase key (gh-2257)			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];	},	access: function( owner, key, value ) {		// In cases where either:		//		//   1. No key was specified		//   2. A string key was specified, but no value provided		//		// Take the "read" path and allow the get method to determine		// which value to return, respectively either:		//		//   1. The entire cache object		//   2. The data stored at the key		//		if ( key === undefined ||				( ( key && typeof key === "string" ) && value === undefined ) ) {			return this.get( owner, key );		}		// When the key is not a string, or both a key and value		// are specified, set or extend (existing objects) with either:		//		//   1. An object of properties		//   2. A key and value		//		this.set( owner, key, value );		// Since the "set" path can have two possible entry points		// return the expected data based on which path was taken[*]		return value !== undefined ? value : key;	},	remove: function( owner, key ) {		var i,			cache = owner[ this.expando ];		if ( cache === undefined ) {			return;		}		if ( key !== undefined ) {			// Support array or space separated string of keys			if ( Array.isArray( key ) ) {				// If key is an array of keys...				// We always set camelCase keys, so remove that.				key = key.map( jQuery.camelCase );			} else {				key = jQuery.camelCase( key );				// If a key with the spaces exists, use it.				// Otherwise, create an array by matching non-whitespace				key = key in cache ?					[ key ] :					( key.match( rnothtmlwhite ) || [] );			}			i = key.length;			while ( i-- ) {				delete cache[ key[ i ] ];			}		}		// Remove the expando if there's no more data		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {			// Support: Chrome <=35 - 45			// Webkit & Blink performance suffers when deleting properties			// from DOM nodes, so set to undefined instead			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)			if ( owner.nodeType ) {				owner[ this.expando ] = undefined;			} else {				delete owner[ this.expando ];			}		}	},	hasData: function( owner ) {		var cache = owner[ this.expando ];		return cache !== undefined && !jQuery.isEmptyObject( cache );	}};var dataPriv = new Data();var dataUser = new Data();//	Implementation Summary////	1. Enforce API surface and semantic compatibility with 1.9.x branch//	2. Improve the module's maintainability by reducing the storage//		paths to a single mechanism.//	3. Use the same single mechanism to support "private" and "user" data.//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)//	5. Avoid exposing implementation details on user objects (eg. expando properties)//	6. Provide a clear path for implementation upgrade to WeakMap in 2014var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,	rmultiDash = /[A-Z]/g;function getData( data ) {	if ( data === "true" ) {		return true;	}	if ( data === "false" ) {		return false;	}	if ( data === "null" ) {		return null;	}	// Only convert to a number if it doesn't change the string	if ( data === +data + "" ) {		return +data;	}	if ( rbrace.test( data ) ) {		return JSON.parse( data );	}	return data;}function dataAttr( elem, key, data ) {	var name;	// If nothing was found internally, try to fetch any	// data from the HTML5 data-* attribute	if ( data === undefined && elem.nodeType === 1 ) {		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();		data = elem.getAttribute( name );		if ( typeof data === "string" ) {			try {				data = getData( data );			} catch ( e ) {}			// Make sure we set the data so it isn't changed later			dataUser.set( elem, key, data );		} else {			data = undefined;		}	}	return data;}jQuery.extend( {	hasData: function( elem ) {		return dataUser.hasData( elem ) || dataPriv.hasData( elem );	},	data: function( elem, name, data ) {		return dataUser.access( elem, name, data );	},	removeData: function( elem, name ) {		dataUser.remove( elem, name );	},	// TODO: Now that all calls to _data and _removeData have been replaced	// with direct calls to dataPriv methods, these can be deprecated.	_data: function( elem, name, data ) {		return dataPriv.access( elem, name, data );	},	_removeData: function( elem, name ) {		dataPriv.remove( elem, name );	}} );jQuery.fn.extend( {	data: function( key, value ) {		var i, name, data,			elem = this[ 0 ],			attrs = elem && elem.attributes;		// Gets all values		if ( key === undefined ) {			if ( this.length ) {				data = dataUser.get( elem );				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {					i = attrs.length;					while ( i-- ) {						// Support: IE 11 only						// The attrs elements can be null (#14894)						if ( attrs[ i ] ) {							name = attrs[ i ].name;							if ( name.indexOf( "data-" ) === 0 ) {								name = jQuery.camelCase( name.slice( 5 ) );								dataAttr( elem, name, data[ name ] );							}						}					}					dataPriv.set( elem, "hasDataAttrs", true );				}			}			return data;		}		// Sets multiple values		if ( typeof key === "object" ) {			return this.each( function() {				dataUser.set( this, key );			} );		}		return access( this, function( value ) {			var data;			// The calling jQuery object (element matches) is not empty			// (and therefore has an element appears at this[ 0 ]) and the			// `value` parameter was not undefined. An empty jQuery object			// will result in `undefined` for elem = this[ 0 ] which will			// throw an exception if an attempt to read a data cache is made.			if ( elem && value === undefined ) {				// Attempt to get data from the cache				// The key will always be camelCased in Data				data = dataUser.get( elem, key );				if ( data !== undefined ) {					return data;				}				// Attempt to "discover" the data in				// HTML5 custom data-* attrs				data = dataAttr( elem, key );				if ( data !== undefined ) {					return data;				}				// We tried really hard, but the data doesn't exist.				return;			}			// Set the data...			this.each( function() {				// We always store the camelCased key				dataUser.set( this, key, value );			} );		}, null, value, arguments.length > 1, null, true );	},	removeData: function( key ) {		return this.each( function() {			dataUser.remove( this, key );		} );	}} );jQuery.extend( {	queue: function( elem, type, data ) {		var queue;		if ( elem ) {			type = ( type || "fx" ) + "queue";			queue = dataPriv.get( elem, type );			// Speed up dequeue by getting out quickly if this is just a lookup			if ( data ) {				if ( !queue || Array.isArray( data ) ) {					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );				} else {					queue.push( data );				}			}			return queue || [];		}	},	dequeue: function( elem, type ) {		type = type || "fx";		var queue = jQuery.queue( elem, type ),			startLength = queue.length,			fn = queue.shift(),			hooks = jQuery._queueHooks( elem, type ),			next = function() {				jQuery.dequeue( elem, type );			};		// If the fx queue is dequeued, always remove the progress sentinel		if ( fn === "inprogress" ) {			fn = queue.shift();			startLength--;		}		if ( fn ) {			// Add a progress sentinel to prevent the fx queue from being			// automatically dequeued			if ( type === "fx" ) {				queue.unshift( "inprogress" );			}			// Clear up the last queue stop function			delete hooks.stop;			fn.call( elem, next, hooks );		}		if ( !startLength && hooks ) {			hooks.empty.fire();		}	},	// Not public - generate a queueHooks object, or return the current one	_queueHooks: function( elem, type ) {		var key = type + "queueHooks";		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {			empty: jQuery.Callbacks( "once memory" ).add( function() {				dataPriv.remove( elem, [ type + "queue", key ] );			} )		} );	}} );jQuery.fn.extend( {	queue: function( type, data ) {		var setter = 2;		if ( typeof type !== "string" ) {			data = type;			type = "fx";			setter--;		}		if ( arguments.length < setter ) {			return jQuery.queue( this[ 0 ], type );		}		return data === undefined ?			this :			this.each( function() {				var queue = jQuery.queue( this, type, data );				// Ensure a hooks for this queue				jQuery._queueHooks( this, type );				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {					jQuery.dequeue( this, type );				}			} );	},	dequeue: function( type ) {		return this.each( function() {			jQuery.dequeue( this, type );		} );	},	clearQueue: function( type ) {		return this.queue( type || "fx", [] );	},	// Get a promise resolved when queues of a certain type	// are emptied (fx is the type by default)	promise: function( type, obj ) {		var tmp,			count = 1,			defer = jQuery.Deferred(),			elements = this,			i = this.length,			resolve = function() {				if ( !( --count ) ) {					defer.resolveWith( elements, [ elements ] );				}			};		if ( typeof type !== "string" ) {			obj = type;			type = undefined;		}		type = type || "fx";		while ( i-- ) {			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );			if ( tmp && tmp.empty ) {				count++;				tmp.empty.add( resolve );			}		}		resolve();		return defer.promise( obj );	}} );var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );var cssExpand = [ "Top", "Right", "Bottom", "Left" ];var isHiddenWithinTree = function( elem, el ) {		// isHiddenWithinTree might be called from jQuery#filter function;		// in that case, element will be second argument		elem = el || elem;		// Inline style trumps all		return elem.style.display === "none" ||			elem.style.display === "" &&			// Otherwise, check computed style			// Support: Firefox <=43 - 45			// Disconnected elements can have computed display: none, so first confirm that elem is			// in the document.			jQuery.contains( elem.ownerDocument, elem ) &&			jQuery.css( elem, "display" ) === "none";	};var swap = function( elem, options, callback, args ) {	var ret, name,		old = {};	// Remember the old values, and insert the new ones	for ( name in options ) {		old[ name ] = elem.style[ name ];		elem.style[ name ] = options[ name ];	}	ret = callback.apply( elem, args || [] );	// Revert the old values	for ( name in options ) {		elem.style[ name ] = old[ name ];	}	return ret;};function adjustCSS( elem, prop, valueParts, tween ) {	var adjusted,		scale = 1,		maxIterations = 20,		currentValue = tween ?			function() {				return tween.cur();			} :			function() {				return jQuery.css( elem, prop, "" );			},		initial = currentValue(),		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),		// Starting value computation is required for potential unit mismatches		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&			rcssNum.exec( jQuery.css( elem, prop ) );	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {		// Trust units reported by jQuery.css		unit = unit || initialInUnit[ 3 ];		// Make sure we update the tween properties later on		valueParts = valueParts || [];		// Iteratively approximate from a nonzero starting point		initialInUnit = +initial || 1;		do {			// If previous iteration zeroed out, double until we get *something*.			// Use string for doubling so we don't accidentally see scale as unchanged below			scale = scale || ".5";			// Adjust and apply			initialInUnit = initialInUnit / scale;			jQuery.style( elem, prop, initialInUnit + unit );		// Update scale, tolerating zero or NaN from tween.cur()		// Break the loop if scale is unchanged or perfect, or if we've just had enough.		} while (			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations		);	}	if ( valueParts ) {		initialInUnit = +initialInUnit || +initial || 0;		// Apply relative offset (+=/-=) if specified		adjusted = valueParts[ 1 ] ?			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :			+valueParts[ 2 ];		if ( tween ) {			tween.unit = unit;			tween.start = initialInUnit;			tween.end = adjusted;		}	}	return adjusted;}var defaultDisplayMap = {};function getDefaultDisplay( elem ) {	var temp,		doc = elem.ownerDocument,		nodeName = elem.nodeName,		display = defaultDisplayMap[ nodeName ];	if ( display ) {		return display;	}	temp = doc.body.appendChild( doc.createElement( nodeName ) );	display = jQuery.css( temp, "display" );	temp.parentNode.removeChild( temp );	if ( display === "none" ) {		display = "block";	}	defaultDisplayMap[ nodeName ] = display;	return display;}function showHide( elements, show ) {	var display, elem,		values = [],		index = 0,		length = elements.length;	// Determine new display value for elements that need to change	for ( ; index < length; index++ ) {		elem = elements[ index ];		if ( !elem.style ) {			continue;		}		display = elem.style.display;		if ( show ) {			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)			// check is required in this first loop unless we have a nonempty display value (either			// inline or about-to-be-restored)			if ( display === "none" ) {				values[ index ] = dataPriv.get( elem, "display" ) || null;				if ( !values[ index ] ) {					elem.style.display = "";				}			}			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {				values[ index ] = getDefaultDisplay( elem );			}		} else {			if ( display !== "none" ) {				values[ index ] = "none";				// Remember what we're overwriting				dataPriv.set( elem, "display", display );			}		}	}	// Set the display of the elements in a second loop to avoid constant reflow	for ( index = 0; index < length; index++ ) {		if ( values[ index ] != null ) {			elements[ index ].style.display = values[ index ];		}	}	return elements;}jQuery.fn.extend( {	show: function() {		return showHide( this, true );	},	hide: function() {		return showHide( this );	},	toggle: function( state ) {		if ( typeof state === "boolean" ) {			return state ? this.show() : this.hide();		}		return this.each( function() {			if ( isHiddenWithinTree( this ) ) {				jQuery( this ).show();			} else {				jQuery( this ).hide();			}		} );	}} );var rcheckableType = ( /^(?:checkbox|radio)$/i );var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );var rscriptType = ( /^$|\/(?:java|ecma)script/i );// We have to close these tags to support XHTML (#13200)var wrapMap = {	// Support: IE <=9 only	option: [ 1, "<select multiple='multiple'>", "</select>" ],	// XHTML parsers do not magically insert elements in the	// same way that tag soup parsers do. So we cannot shorten	// this by omitting <tbody> or other required elements.	thead: [ 1, "<table>", "</table>" ],	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],	tr: [ 2, "<table><tbody>", "</tbody></table>" ],	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],	_default: [ 0, "", "" ]};// Support: IE <=9 onlywrapMap.optgroup = wrapMap.option;wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;wrapMap.th = wrapMap.td;function getAll( context, tag ) {	// Support: IE <=9 - 11 only	// Use typeof to avoid zero-argument method invocation on host objects (#15151)	var ret;	if ( typeof context.getElementsByTagName !== "undefined" ) {		ret = context.getElementsByTagName( tag || "*" );	} else if ( typeof context.querySelectorAll !== "undefined" ) {		ret = context.querySelectorAll( tag || "*" );	} else {		ret = [];	}	if ( tag === undefined || tag && nodeName( context, tag ) ) {		return jQuery.merge( [ context ], ret );	}	return ret;}// Mark scripts as having already been evaluatedfunction setGlobalEval( elems, refElements ) {	var i = 0,		l = elems.length;	for ( ; i < l; i++ ) {		dataPriv.set(			elems[ i ],			"globalEval",			!refElements || dataPriv.get( refElements[ i ], "globalEval" )		);	}}var rhtml = /<|&#?\w+;/;function buildFragment( elems, context, scripts, selection, ignored ) {	var elem, tmp, tag, wrap, contains, j,		fragment = context.createDocumentFragment(),		nodes = [],		i = 0,		l = elems.length;	for ( ; i < l; i++ ) {		elem = elems[ i ];		if ( elem || elem === 0 ) {			// Add nodes directly			if ( jQuery.type( elem ) === "object" ) {				// Support: Android <=4.0 only, PhantomJS 1 only				// push.apply(_, arraylike) throws on ancient WebKit				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );			// Convert non-html into a text node			} else if ( !rhtml.test( elem ) ) {				nodes.push( context.createTextNode( elem ) );			// Convert html into DOM nodes			} else {				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );				// Deserialize a standard representation				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();				wrap = wrapMap[ tag ] || wrapMap._default;				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];				// Descend through wrappers to the right content				j = wrap[ 0 ];				while ( j-- ) {					tmp = tmp.lastChild;				}				// Support: Android <=4.0 only, PhantomJS 1 only				// push.apply(_, arraylike) throws on ancient WebKit				jQuery.merge( nodes, tmp.childNodes );				// Remember the top-level container				tmp = fragment.firstChild;				// Ensure the created nodes are orphaned (#12392)				tmp.textContent = "";			}		}	}	// Remove wrapper from fragment	fragment.textContent = "";	i = 0;	while ( ( elem = nodes[ i++ ] ) ) {		// Skip elements already in the context collection (trac-4087)		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {			if ( ignored ) {				ignored.push( elem );			}			continue;		}		contains = jQuery.contains( elem.ownerDocument, elem );		// Append to fragment		tmp = getAll( fragment.appendChild( elem ), "script" );		// Preserve script evaluation history		if ( contains ) {			setGlobalEval( tmp );		}		// Capture executables		if ( scripts ) {			j = 0;			while ( ( elem = tmp[ j++ ] ) ) {				if ( rscriptType.test( elem.type || "" ) ) {					scripts.push( elem );				}			}		}	}	return fragment;}( function() {	var fragment = document.createDocumentFragment(),		div = fragment.appendChild( document.createElement( "div" ) ),		input = document.createElement( "input" );	// Support: Android 4.0 - 4.3 only	// Check state lost if the name is set (#11217)	// Support: Windows Web Apps (WWA)	// `name` and `type` must use .setAttribute for WWA (#14901)	input.setAttribute( "type", "radio" );	input.setAttribute( "checked", "checked" );	input.setAttribute( "name", "t" );	div.appendChild( input );	// Support: Android <=4.1 only	// Older WebKit doesn't clone checked state correctly in fragments	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;	// Support: IE <=11 only	// Make sure textarea (and checkbox) defaultValue is properly cloned	div.innerHTML = "<textarea>x</textarea>";	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;} )();var documentElement = document.documentElement;var	rkeyEvent = /^key/,	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;function returnTrue() {	return true;}function returnFalse() {	return false;}// Support: IE <=9 only// See #13393 for more infofunction safeActiveElement() {	try {		return document.activeElement;	} catch ( err ) { }}function on( elem, types, selector, data, fn, one ) {	var origFn, type;	// Types can be a map of types/handlers	if ( typeof types === "object" ) {		// ( types-Object, selector, data )		if ( typeof selector !== "string" ) {			// ( types-Object, data )			data = data || selector;			selector = undefined;		}		for ( type in types ) {			on( elem, type, selector, data, types[ type ], one );		}		return elem;	}	if ( data == null && fn == null ) {		// ( types, fn )		fn = selector;		data = selector = undefined;	} else if ( fn == null ) {		if ( typeof selector === "string" ) {			// ( types, selector, fn )			fn = data;			data = undefined;		} else {			// ( types, data, fn )			fn = data;			data = selector;			selector = undefined;		}	}	if ( fn === false ) {		fn = returnFalse;	} else if ( !fn ) {		return elem;	}	if ( one === 1 ) {		origFn = fn;		fn = function( event ) {			// Can use an empty set, since event contains the info			jQuery().off( event );			return origFn.apply( this, arguments );		};		// Use same guid so caller can remove using origFn		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );	}	return elem.each( function() {		jQuery.event.add( this, types, fn, data, selector );	} );}/* * Helper functions for managing events -- not part of the public interface. * Props to Dean Edwards' addEvent library for many of the ideas. */jQuery.event = {	global: {},	add: function( elem, types, handler, data, selector ) {		var handleObjIn, eventHandle, tmp,			events, t, handleObj,			special, handlers, type, namespaces, origType,			elemData = dataPriv.get( elem );		// Don't attach events to noData or text/comment nodes (but allow plain objects)		if ( !elemData ) {			return;		}		// Caller can pass in an object of custom data in lieu of the handler		if ( handler.handler ) {			handleObjIn = handler;			handler = handleObjIn.handler;			selector = handleObjIn.selector;		}		// Ensure that invalid selectors throw exceptions at attach time		// Evaluate against documentElement in case elem is a non-element node (e.g., document)		if ( selector ) {			jQuery.find.matchesSelector( documentElement, selector );		}		// Make sure that the handler has a unique ID, used to find/remove it later		if ( !handler.guid ) {			handler.guid = jQuery.guid++;		}		// Init the element's event structure and main handler, if this is the first		if ( !( events = elemData.events ) ) {			events = elemData.events = {};		}		if ( !( eventHandle = elemData.handle ) ) {			eventHandle = elemData.handle = function( e ) {				// Discard the second event of a jQuery.event.trigger() and				// when an event is called after a page has unloaded				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?					jQuery.event.dispatch.apply( elem, arguments ) : undefined;			};		}		// Handle multiple events separated by a space		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];		t = types.length;		while ( t-- ) {			tmp = rtypenamespace.exec( types[ t ] ) || [];			type = origType = tmp[ 1 ];			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();			// There *must* be a type, no attaching namespace-only handlers			if ( !type ) {				continue;			}			// If event changes its type, use the special event handlers for the changed type			special = jQuery.event.special[ type ] || {};			// If selector defined, determine special event api type, otherwise given type			type = ( selector ? special.delegateType : special.bindType ) || type;			// Update special based on newly reset type			special = jQuery.event.special[ type ] || {};			// handleObj is passed to all event handlers			handleObj = jQuery.extend( {				type: type,				origType: origType,				data: data,				handler: handler,				guid: handler.guid,				selector: selector,				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),				namespace: namespaces.join( "." )			}, handleObjIn );			// Init the event handler queue if we're the first			if ( !( handlers = events[ type ] ) ) {				handlers = events[ type ] = [];				handlers.delegateCount = 0;				// Only use addEventListener if the special events handler returns false				if ( !special.setup ||					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {					if ( elem.addEventListener ) {						elem.addEventListener( type, eventHandle );					}				}			}			if ( special.add ) {				special.add.call( elem, handleObj );				if ( !handleObj.handler.guid ) {					handleObj.handler.guid = handler.guid;				}			}			// Add to the element's handler list, delegates in front			if ( selector ) {				handlers.splice( handlers.delegateCount++, 0, handleObj );			} else {				handlers.push( handleObj );			}			// Keep track of which events have ever been used, for event optimization			jQuery.event.global[ type ] = true;		}	},	// Detach an event or set of events from an element	remove: function( elem, types, handler, selector, mappedTypes ) {		var j, origCount, tmp,			events, t, handleObj,			special, handlers, type, namespaces, origType,			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );		if ( !elemData || !( events = elemData.events ) ) {			return;		}		// Once for each type.namespace in types; type may be omitted		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];		t = types.length;		while ( t-- ) {			tmp = rtypenamespace.exec( types[ t ] ) || [];			type = origType = tmp[ 1 ];			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();			// Unbind all events (on this namespace, if provided) for the element			if ( !type ) {				for ( type in events ) {					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );				}				continue;			}			special = jQuery.event.special[ type ] || {};			type = ( selector ? special.delegateType : special.bindType ) || type;			handlers = events[ type ] || [];			tmp = tmp[ 2 ] &&				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );			// Remove matching events			origCount = j = handlers.length;			while ( j-- ) {				handleObj = handlers[ j ];				if ( ( mappedTypes || origType === handleObj.origType ) &&					( !handler || handler.guid === handleObj.guid ) &&					( !tmp || tmp.test( handleObj.namespace ) ) &&					( !selector || selector === handleObj.selector ||						selector === "**" && handleObj.selector ) ) {					handlers.splice( j, 1 );					if ( handleObj.selector ) {						handlers.delegateCount--;					}					if ( special.remove ) {						special.remove.call( elem, handleObj );					}				}			}			// Remove generic event handler if we removed something and no more handlers exist			// (avoids potential for endless recursion during removal of special event handlers)			if ( origCount && !handlers.length ) {				if ( !special.teardown ||					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {					jQuery.removeEvent( elem, type, elemData.handle );				}				delete events[ type ];			}		}		// Remove data and the expando if it's no longer used		if ( jQuery.isEmptyObject( events ) ) {			dataPriv.remove( elem, "handle events" );		}	},	dispatch: function( nativeEvent ) {		// Make a writable jQuery.Event from the native event object		var event = jQuery.event.fix( nativeEvent );		var i, j, ret, matched, handleObj, handlerQueue,			args = new Array( arguments.length ),			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],			special = jQuery.event.special[ event.type ] || {};		// Use the fix-ed jQuery.Event rather than the (read-only) native event		args[ 0 ] = event;		for ( i = 1; i < arguments.length; i++ ) {			args[ i ] = arguments[ i ];		}		event.delegateTarget = this;		// Call the preDispatch hook for the mapped type, and let it bail if desired		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {			return;		}		// Determine handlers		handlerQueue = jQuery.event.handlers.call( this, event, handlers );		// Run delegates first; they may want to stop propagation beneath us		i = 0;		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {			event.currentTarget = matched.elem;			j = 0;			while ( ( handleObj = matched.handlers[ j++ ] ) &&				!event.isImmediatePropagationStopped() ) {				// Triggered event must either 1) have no namespace, or 2) have namespace(s)				// a subset or equal to those in the bound event (both can have no namespace).				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {					event.handleObj = handleObj;					event.data = handleObj.data;					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||						handleObj.handler ).apply( matched.elem, args );					if ( ret !== undefined ) {						if ( ( event.result = ret ) === false ) {							event.preventDefault();							event.stopPropagation();						}					}				}			}		}		// Call the postDispatch hook for the mapped type		if ( special.postDispatch ) {			special.postDispatch.call( this, event );		}		return event.result;	},	handlers: function( event, handlers ) {		var i, handleObj, sel, matchedHandlers, matchedSelectors,			handlerQueue = [],			delegateCount = handlers.delegateCount,			cur = event.target;		// Find delegate handlers		if ( delegateCount &&			// Support: IE <=9			// Black-hole SVG <use> instance trees (trac-13180)			cur.nodeType &&			// Support: Firefox <=42			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click			// Support: IE 11 only			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)			!( event.type === "click" && event.button >= 1 ) ) {			for ( ; cur !== this; cur = cur.parentNode || this ) {				// Don't check non-elements (#13208)				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {					matchedHandlers = [];					matchedSelectors = {};					for ( i = 0; i < delegateCount; i++ ) {						handleObj = handlers[ i ];						// Don't conflict with Object.prototype properties (#13203)						sel = handleObj.selector + " ";						if ( matchedSelectors[ sel ] === undefined ) {							matchedSelectors[ sel ] = handleObj.needsContext ?								jQuery( sel, this ).index( cur ) > -1 :								jQuery.find( sel, this, null, [ cur ] ).length;						}						if ( matchedSelectors[ sel ] ) {							matchedHandlers.push( handleObj );						}					}					if ( matchedHandlers.length ) {						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );					}				}			}		}		// Add the remaining (directly-bound) handlers		cur = this;		if ( delegateCount < handlers.length ) {			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );		}		return handlerQueue;	},	addProp: function( name, hook ) {		Object.defineProperty( jQuery.Event.prototype, name, {			enumerable: true,			configurable: true,			get: jQuery.isFunction( hook ) ?				function() {					if ( this.originalEvent ) {							return hook( this.originalEvent );					}				} :				function() {					if ( this.originalEvent ) {							return this.originalEvent[ name ];					}				},			set: function( value ) {				Object.defineProperty( this, name, {					enumerable: true,					configurable: true,					writable: true,					value: value				} );			}		} );	},	fix: function( originalEvent ) {		return originalEvent[ jQuery.expando ] ?			originalEvent :			new jQuery.Event( originalEvent );	},	special: {		load: {			// Prevent triggered image.load events from bubbling to window.load			noBubble: true		},		focus: {			// Fire native event if possible so blur/focus sequence is correct			trigger: function() {				if ( this !== safeActiveElement() && this.focus ) {					this.focus();					return false;				}			},			delegateType: "focusin"		},		blur: {			trigger: function() {				if ( this === safeActiveElement() && this.blur ) {					this.blur();					return false;				}			},			delegateType: "focusout"		},		click: {			// For checkbox, fire native event so checked state will be right			trigger: function() {				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {					this.click();					return false;				}			},			// For cross-browser consistency, don't fire native .click() on links			_default: function( event ) {				return nodeName( event.target, "a" );			}		},		beforeunload: {			postDispatch: function( event ) {				// Support: Firefox 20+				// Firefox doesn't alert if the returnValue field is not set.				if ( event.result !== undefined && event.originalEvent ) {					event.originalEvent.returnValue = event.result;				}			}		}	}};jQuery.removeEvent = function( elem, type, handle ) {	// This "if" is needed for plain objects	if ( elem.removeEventListener ) {		elem.removeEventListener( type, handle );	}};jQuery.Event = function( src, props ) {	// Allow instantiation without the 'new' keyword	if ( !( this instanceof jQuery.Event ) ) {		return new jQuery.Event( src, props );	}	// Event object	if ( src && src.type ) {		this.originalEvent = src;		this.type = src.type;		// Events bubbling up the document may have been marked as prevented		// by a handler lower down the tree; reflect the correct value.		this.isDefaultPrevented = src.defaultPrevented ||				src.defaultPrevented === undefined &&				// Support: Android <=2.3 only				src.returnValue === false ?			returnTrue :			returnFalse;		// Create target properties		// Support: Safari <=6 - 7 only		// Target should not be a text node (#504, #13143)		this.target = ( src.target && src.target.nodeType === 3 ) ?			src.target.parentNode :			src.target;		this.currentTarget = src.currentTarget;		this.relatedTarget = src.relatedTarget;	// Event type	} else {		this.type = src;	}	// Put explicitly provided properties onto the event object	if ( props ) {		jQuery.extend( this, props );	}	// Create a timestamp if incoming event doesn't have one	this.timeStamp = src && src.timeStamp || jQuery.now();	// Mark it as fixed	this[ jQuery.expando ] = true;};// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.htmljQuery.Event.prototype = {	constructor: jQuery.Event,	isDefaultPrevented: returnFalse,	isPropagationStopped: returnFalse,	isImmediatePropagationStopped: returnFalse,	isSimulated: false,	preventDefault: function() {		var e = this.originalEvent;		this.isDefaultPrevented = returnTrue;		if ( e && !this.isSimulated ) {			e.preventDefault();		}	},	stopPropagation: function() {		var e = this.originalEvent;		this.isPropagationStopped = returnTrue;		if ( e && !this.isSimulated ) {			e.stopPropagation();		}	},	stopImmediatePropagation: function() {		var e = this.originalEvent;		this.isImmediatePropagationStopped = returnTrue;		if ( e && !this.isSimulated ) {			e.stopImmediatePropagation();		}		this.stopPropagation();	}};// Includes all common event props including KeyEvent and MouseEvent specific propsjQuery.each( {	altKey: true,	bubbles: true,	cancelable: true,	changedTouches: true,	ctrlKey: true,	detail: true,	eventPhase: true,	metaKey: true,	pageX: true,	pageY: true,	shiftKey: true,	view: true,	"char": true,	charCode: true,	key: true,	keyCode: true,	button: true,	buttons: true,	clientX: true,	clientY: true,	offsetX: true,	offsetY: true,	pointerId: true,	pointerType: true,	screenX: true,	screenY: true,	targetTouches: true,	toElement: true,	touches: true,	which: function( event ) {		var button = event.button;		// Add which for key events		if ( event.which == null && rkeyEvent.test( event.type ) ) {			return event.charCode != null ? event.charCode : event.keyCode;		}		// Add which for click: 1 === left; 2 === middle; 3 === right		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {			if ( button & 1 ) {				return 1;			}			if ( button & 2 ) {				return 3;			}			if ( button & 4 ) {				return 2;			}			return 0;		}		return event.which;	}}, jQuery.event.addProp );// Create mouseenter/leave events using mouseover/out and event-time checks// so that event delegation works in jQuery.// Do the same for pointerenter/pointerleave and pointerover/pointerout//// Support: Safari 7 only// Safari sends mouseenter too often; see:// https://bugs.chromium.org/p/chromium/issues/detail?id=470258// for the description of the bug (it existed in older Chrome versions as well).jQuery.each( {	mouseenter: "mouseover",	mouseleave: "mouseout",	pointerenter: "pointerover",	pointerleave: "pointerout"}, function( orig, fix ) {	jQuery.event.special[ orig ] = {		delegateType: fix,		bindType: fix,		handle: function( event ) {			var ret,				target = this,				related = event.relatedTarget,				handleObj = event.handleObj;			// For mouseenter/leave call the handler if related is outside the target.			// NB: No relatedTarget if the mouse left/entered the browser window			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {				event.type = handleObj.origType;				ret = handleObj.handler.apply( this, arguments );				event.type = fix;			}			return ret;		}	};} );jQuery.fn.extend( {	on: function( types, selector, data, fn ) {		return on( this, types, selector, data, fn );	},	one: function( types, selector, data, fn ) {		return on( this, types, selector, data, fn, 1 );	},	off: function( types, selector, fn ) {		var handleObj, type;		if ( types && types.preventDefault && types.handleObj ) {			// ( event )  dispatched jQuery.Event			handleObj = types.handleObj;			jQuery( types.delegateTarget ).off(				handleObj.namespace ?					handleObj.origType + "." + handleObj.namespace :					handleObj.origType,				handleObj.selector,				handleObj.handler			);			return this;		}		if ( typeof types === "object" ) {			// ( types-object [, selector] )			for ( type in types ) {				this.off( type, selector, types[ type ] );			}			return this;		}		if ( selector === false || typeof selector === "function" ) {			// ( types [, fn] )			fn = selector;			selector = undefined;		}		if ( fn === false ) {			fn = returnFalse;		}		return this.each( function() {			jQuery.event.remove( this, types, fn, selector );		} );	}} );var	/* eslint-disable max-len */	// See https://github.com/eslint/eslint/issues/3229	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,	/* eslint-enable */	// Support: IE <=10 - 11, Edge 12 - 13	// In IE/Edge using regex groups here causes severe slowdowns.	// See https://connect.microsoft.com/IE/feedback/details/1736512/	rnoInnerhtml = /<script|<style|<link/i,	// checked="checked" or checked	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,	rscriptTypeMasked = /^true\/(.*)/,	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;// Prefer a tbody over its parent table for containing new rowsfunction manipulationTarget( elem, content ) {	if ( nodeName( elem, "table" ) &&		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {		return jQuery( ">tbody", elem )[ 0 ] || elem;	}	return elem;}// Replace/restore the type attribute of script elements for safe DOM manipulationfunction disableScript( elem ) {	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;	return elem;}function restoreScript( elem ) {	var match = rscriptTypeMasked.exec( elem.type );	if ( match ) {		elem.type = match[ 1 ];	} else {		elem.removeAttribute( "type" );	}	return elem;}function cloneCopyEvent( src, dest ) {	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;	if ( dest.nodeType !== 1 ) {		return;	}	// 1. Copy private data: events, handlers, etc.	if ( dataPriv.hasData( src ) ) {		pdataOld = dataPriv.access( src );		pdataCur = dataPriv.set( dest, pdataOld );		events = pdataOld.events;		if ( events ) {			delete pdataCur.handle;			pdataCur.events = {};			for ( type in events ) {				for ( i = 0, l = events[ type ].length; i < l; i++ ) {					jQuery.event.add( dest, type, events[ type ][ i ] );				}			}		}	}	// 2. Copy user data	if ( dataUser.hasData( src ) ) {		udataOld = dataUser.access( src );		udataCur = jQuery.extend( {}, udataOld );		dataUser.set( dest, udataCur );	}}// Fix IE bugs, see support testsfunction fixInput( src, dest ) {	var nodeName = dest.nodeName.toLowerCase();	// Fails to persist the checked state of a cloned checkbox or radio button.	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {		dest.checked = src.checked;	// Fails to return the selected option to the default selected state when cloning options	} else if ( nodeName === "input" || nodeName === "textarea" ) {		dest.defaultValue = src.defaultValue;	}}function domManip( collection, args, callback, ignored ) {	// Flatten any nested arrays	args = concat.apply( [], args );	var fragment, first, scripts, hasScripts, node, doc,		i = 0,		l = collection.length,		iNoClone = l - 1,		value = args[ 0 ],		isFunction = jQuery.isFunction( value );	// We can't cloneNode fragments that contain checked, in WebKit	if ( isFunction ||			( l > 1 && typeof value === "string" &&				!support.checkClone && rchecked.test( value ) ) ) {		return collection.each( function( index ) {			var self = collection.eq( index );			if ( isFunction ) {				args[ 0 ] = value.call( this, index, self.html() );			}			domManip( self, args, callback, ignored );		} );	}	if ( l ) {		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );		first = fragment.firstChild;		if ( fragment.childNodes.length === 1 ) {			fragment = first;		}		// Require either new content or an interest in ignored elements to invoke the callback		if ( first || ignored ) {			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );			hasScripts = scripts.length;			// Use the original fragment for the last item			// instead of the first because it can end up			// being emptied incorrectly in certain situations (#8070).			for ( ; i < l; i++ ) {				node = fragment;				if ( i !== iNoClone ) {					node = jQuery.clone( node, true, true );					// Keep references to cloned scripts for later restoration					if ( hasScripts ) {						// Support: Android <=4.0 only, PhantomJS 1 only						// push.apply(_, arraylike) throws on ancient WebKit						jQuery.merge( scripts, getAll( node, "script" ) );					}				}				callback.call( collection[ i ], node, i );			}			if ( hasScripts ) {				doc = scripts[ scripts.length - 1 ].ownerDocument;				// Reenable scripts				jQuery.map( scripts, restoreScript );				// Evaluate executable scripts on first document insertion				for ( i = 0; i < hasScripts; i++ ) {					node = scripts[ i ];					if ( rscriptType.test( node.type || "" ) &&						!dataPriv.access( node, "globalEval" ) &&						jQuery.contains( doc, node ) ) {						if ( node.src ) {							// Optional AJAX dependency, but won't run scripts if not present							if ( jQuery._evalUrl ) {								jQuery._evalUrl( node.src );							}						} else {							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );						}					}				}			}		}	}	return collection;}function remove( elem, selector, keepData ) {	var node,		nodes = selector ? jQuery.filter( selector, elem ) : elem,		i = 0;	for ( ; ( node = nodes[ i ] ) != null; i++ ) {		if ( !keepData && node.nodeType === 1 ) {			jQuery.cleanData( getAll( node ) );		}		if ( node.parentNode ) {			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {				setGlobalEval( getAll( node, "script" ) );			}			node.parentNode.removeChild( node );		}	}	return elem;}jQuery.extend( {	htmlPrefilter: function( html ) {		return html.replace( rxhtmlTag, "<$1></$2>" );	},	clone: function( elem, dataAndEvents, deepDataAndEvents ) {		var i, l, srcElements, destElements,			clone = elem.cloneNode( true ),			inPage = jQuery.contains( elem.ownerDocument, elem );		// Fix IE cloning issues		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&				!jQuery.isXMLDoc( elem ) ) {			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2			destElements = getAll( clone );			srcElements = getAll( elem );			for ( i = 0, l = srcElements.length; i < l; i++ ) {				fixInput( srcElements[ i ], destElements[ i ] );			}		}		// Copy the events from the original to the clone		if ( dataAndEvents ) {			if ( deepDataAndEvents ) {				srcElements = srcElements || getAll( elem );				destElements = destElements || getAll( clone );				for ( i = 0, l = srcElements.length; i < l; i++ ) {					cloneCopyEvent( srcElements[ i ], destElements[ i ] );				}			} else {				cloneCopyEvent( elem, clone );			}		}		// Preserve script evaluation history		destElements = getAll( clone, "script" );		if ( destElements.length > 0 ) {			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );		}		// Return the cloned set		return clone;	},	cleanData: function( elems ) {		var data, elem, type,			special = jQuery.event.special,			i = 0;		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {			if ( acceptData( elem ) ) {				if ( ( data = elem[ dataPriv.expando ] ) ) {					if ( data.events ) {						for ( type in data.events ) {							if ( special[ type ] ) {								jQuery.event.remove( elem, type );							// This is a shortcut to avoid jQuery.event.remove's overhead							} else {								jQuery.removeEvent( elem, type, data.handle );							}						}					}					// Support: Chrome <=35 - 45+					// Assign undefined instead of using delete, see Data#remove					elem[ dataPriv.expando ] = undefined;				}				if ( elem[ dataUser.expando ] ) {					// Support: Chrome <=35 - 45+					// Assign undefined instead of using delete, see Data#remove					elem[ dataUser.expando ] = undefined;				}			}		}	}} );jQuery.fn.extend( {	detach: function( selector ) {		return remove( this, selector, true );	},	remove: function( selector ) {		return remove( this, selector );	},	text: function( value ) {		return access( this, function( value ) {			return value === undefined ?				jQuery.text( this ) :				this.empty().each( function() {					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {						this.textContent = value;					}				} );		}, null, value, arguments.length );	},	append: function() {		return domManip( this, arguments, function( elem ) {			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {				var target = manipulationTarget( this, elem );				target.appendChild( elem );			}		} );	},	prepend: function() {		return domManip( this, arguments, function( elem ) {			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {				var target = manipulationTarget( this, elem );				target.insertBefore( elem, target.firstChild );			}		} );	},	before: function() {		return domManip( this, arguments, function( elem ) {			if ( this.parentNode ) {				this.parentNode.insertBefore( elem, this );			}		} );	},	after: function() {		return domManip( this, arguments, function( elem ) {			if ( this.parentNode ) {				this.parentNode.insertBefore( elem, this.nextSibling );			}		} );	},	empty: function() {		var elem,			i = 0;		for ( ; ( elem = this[ i ] ) != null; i++ ) {			if ( elem.nodeType === 1 ) {				// Prevent memory leaks				jQuery.cleanData( getAll( elem, false ) );				// Remove any remaining nodes				elem.textContent = "";			}		}		return this;	},	clone: function( dataAndEvents, deepDataAndEvents ) {		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;		return this.map( function() {			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );		} );	},	html: function( value ) {		return access( this, function( value ) {			var elem = this[ 0 ] || {},				i = 0,				l = this.length;			if ( value === undefined && elem.nodeType === 1 ) {				return elem.innerHTML;			}			// See if we can take a shortcut and just use innerHTML			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {				value = jQuery.htmlPrefilter( value );				try {					for ( ; i < l; i++ ) {						elem = this[ i ] || {};						// Remove element nodes and prevent memory leaks						if ( elem.nodeType === 1 ) {							jQuery.cleanData( getAll( elem, false ) );							elem.innerHTML = value;						}					}					elem = 0;				// If using innerHTML throws an exception, use the fallback method				} catch ( e ) {}			}			if ( elem ) {				this.empty().append( value );			}		}, null, value, arguments.length );	},	replaceWith: function() {		var ignored = [];		// Make the changes, replacing each non-ignored context element with the new content		return domManip( this, arguments, function( elem ) {			var parent = this.parentNode;			if ( jQuery.inArray( this, ignored ) < 0 ) {				jQuery.cleanData( getAll( this ) );				if ( parent ) {					parent.replaceChild( elem, this );				}			}		// Force callback invocation		}, ignored );	}} );jQuery.each( {	appendTo: "append",	prependTo: "prepend",	insertBefore: "before",	insertAfter: "after",	replaceAll: "replaceWith"}, function( name, original ) {	jQuery.fn[ name ] = function( selector ) {		var elems,			ret = [],			insert = jQuery( selector ),			last = insert.length - 1,			i = 0;		for ( ; i <= last; i++ ) {			elems = i === last ? this : this.clone( true );			jQuery( insert[ i ] )[ original ]( elems );			// Support: Android <=4.0 only, PhantomJS 1 only			// .get() because push.apply(_, arraylike) throws on ancient WebKit			push.apply( ret, elems.get() );		}		return this.pushStack( ret );	};} );var rmargin = ( /^margin/ );var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );var getStyles = function( elem ) {		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)		// IE throws on elements created in popups		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"		var view = elem.ownerDocument.defaultView;		if ( !view || !view.opener ) {			view = window;		}		return view.getComputedStyle( elem );	};( function() {	// Executing both pixelPosition & boxSizingReliable tests require only one layout	// so they're executed at the same time to save the second computation.	function computeStyleTests() {		// This is a singleton, we need to execute it only once		if ( !div ) {			return;		}		div.style.cssText =			"box-sizing:border-box;" +			"position:relative;display:block;" +			"margin:auto;border:1px;padding:1px;" +			"top:1%;width:50%";		div.innerHTML = "";		documentElement.appendChild( container );		var divStyle = window.getComputedStyle( div );		pixelPositionVal = divStyle.top !== "1%";		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44		reliableMarginLeftVal = divStyle.marginLeft === "2px";		boxSizingReliableVal = divStyle.width === "4px";		// Support: Android 4.0 - 4.3 only		// Some styles come back with percentage values, even though they shouldn't		div.style.marginRight = "50%";		pixelMarginRightVal = divStyle.marginRight === "4px";		documentElement.removeChild( container );		// Nullify the div so it wouldn't be stored in the memory and		// it will also be a sign that checks already performed		div = null;	}	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,		container = document.createElement( "div" ),		div = document.createElement( "div" );	// Finish early in limited (non-browser) environments	if ( !div.style ) {		return;	}	// Support: IE <=9 - 11 only	// Style of cloned element affects source element cloned (#8908)	div.style.backgroundClip = "content-box";	div.cloneNode( true ).style.backgroundClip = "";	support.clearCloneStyle = div.style.backgroundClip === "content-box";	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +		"padding:0;margin-top:1px;position:absolute";	container.appendChild( div );	jQuery.extend( support, {		pixelPosition: function() {			computeStyleTests();			return pixelPositionVal;		},		boxSizingReliable: function() {			computeStyleTests();			return boxSizingReliableVal;		},		pixelMarginRight: function() {			computeStyleTests();			return pixelMarginRightVal;		},		reliableMarginLeft: function() {			computeStyleTests();			return reliableMarginLeftVal;		}	} );} )();function curCSS( elem, name, computed ) {	var width, minWidth, maxWidth, ret,		// Support: Firefox 51+		// Retrieving style before computed somehow		// fixes an issue with getting wrong values		// on detached elements		style = elem.style;	computed = computed || getStyles( elem );	// getPropertyValue is needed for:	//   .css('filter') (IE 9 only, #12537)	//   .css('--customProperty) (#3144)	if ( computed ) {		ret = computed.getPropertyValue( name ) || computed[ name ];		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {			ret = jQuery.style( elem, name );		}		// A tribute to the "awesome hack by Dean Edwards"		// Android Browser returns percentage for some values,		// but width seems to be reliably pixels.		// This is against the CSSOM draft spec:		// https://drafts.csswg.org/cssom/#resolved-values		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {			// Remember the original values			width = style.width;			minWidth = style.minWidth;			maxWidth = style.maxWidth;			// Put in the new values to get a computed value out			style.minWidth = style.maxWidth = style.width = ret;			ret = computed.width;			// Revert the changed values			style.width = width;			style.minWidth = minWidth;			style.maxWidth = maxWidth;		}	}	return ret !== undefined ?		// Support: IE <=9 - 11 only		// IE returns zIndex value as an integer.		ret + "" :		ret;}function addGetHookIf( conditionFn, hookFn ) {	// Define the hook, we'll check on the first run if it's really needed.	return {		get: function() {			if ( conditionFn() ) {				// Hook not needed (or it's not possible to use it due				// to missing dependency), remove it.				delete this.get;				return;			}			// Hook needed; redefine it so that the support test is not executed again.			return ( this.get = hookFn ).apply( this, arguments );		}	};}var	// Swappable if display is none or starts with table	// except "table", "table-cell", or "table-caption"	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display	rdisplayswap = /^(none|table(?!-c[ea]).+)/,	rcustomProp = /^--/,	cssShow = { position: "absolute", visibility: "hidden", display: "block" },	cssNormalTransform = {		letterSpacing: "0",		fontWeight: "400"	},	cssPrefixes = [ "Webkit", "Moz", "ms" ],	emptyStyle = document.createElement( "div" ).style;// Return a css property mapped to a potentially vendor prefixed propertyfunction vendorPropName( name ) {	// Shortcut for names that are not vendor prefixed	if ( name in emptyStyle ) {		return name;	}	// Check for vendor prefixed names	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),		i = cssPrefixes.length;	while ( i-- ) {		name = cssPrefixes[ i ] + capName;		if ( name in emptyStyle ) {			return name;		}	}}// Return a property mapped along what jQuery.cssProps suggests or to// a vendor prefixed property.function finalPropName( name ) {	var ret = jQuery.cssProps[ name ];	if ( !ret ) {		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;	}	return ret;}function setPositiveNumber( elem, value, subtract ) {	// Any relative (+/-) values have already been	// normalized at this point	var matches = rcssNum.exec( value );	return matches ?		// Guard against undefined "subtract", e.g., when used as in cssHooks		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :		value;}function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {	var i,		val = 0;	// If we already have the right measurement, avoid augmentation	if ( extra === ( isBorderBox ? "border" : "content" ) ) {		i = 4;	// Otherwise initialize for horizontal or vertical properties	} else {		i = name === "width" ? 1 : 0;	}	for ( ; i < 4; i += 2 ) {		// Both box models exclude margin, so add it if we want it		if ( extra === "margin" ) {			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );		}		if ( isBorderBox ) {			// border-box includes padding, so remove it if we want content			if ( extra === "content" ) {				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );			}			// At this point, extra isn't border nor margin, so remove border			if ( extra !== "margin" ) {				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );			}		} else {			// At this point, extra isn't content, so add padding			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );			// At this point, extra isn't content nor padding, so add border			if ( extra !== "padding" ) {				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );			}		}	}	return val;}function getWidthOrHeight( elem, name, extra ) {	// Start with computed style	var valueIsBorderBox,		styles = getStyles( elem ),		val = curCSS( elem, name, styles ),		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";	// Computed unit is not pixels. Stop here and return.	if ( rnumnonpx.test( val ) ) {		return val;	}	// Check for style in case a browser which returns unreliable values	// for getComputedStyle silently falls back to the reliable elem.style	valueIsBorderBox = isBorderBox &&		( support.boxSizingReliable() || val === elem.style[ name ] );	// Fall back to offsetWidth/Height when value is "auto"	// This happens for inline elements with no explicit setting (gh-3571)	if ( val === "auto" ) {		val = elem[ "offset" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];	}	// Normalize "", auto, and prepare for extra	val = parseFloat( val ) || 0;	// Use the active box-sizing model to add/subtract irrelevant styles	return ( val +		augmentWidthOrHeight(			elem,			name,			extra || ( isBorderBox ? "border" : "content" ),			valueIsBorderBox,			styles		)	) + "px";}jQuery.extend( {	// Add in style property hooks for overriding the default	// behavior of getting and setting a style property	cssHooks: {		opacity: {			get: function( elem, computed ) {				if ( computed ) {					// We should always get a number back from opacity					var ret = curCSS( elem, "opacity" );					return ret === "" ? "1" : ret;				}			}		}	},	// Don't automatically add "px" to these possibly-unitless properties	cssNumber: {		"animationIterationCount": true,		"columnCount": true,		"fillOpacity": true,		"flexGrow": true,		"flexShrink": true,		"fontWeight": true,		"lineHeight": true,		"opacity": true,		"order": true,		"orphans": true,		"widows": true,		"zIndex": true,		"zoom": true	},	// Add in properties whose names you wish to fix before	// setting or getting the value	cssProps: {		"float": "cssFloat"	},	// Get and set the style property on a DOM Node	style: function( elem, name, value, extra ) {		// Don't set styles on text and comment nodes		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {			return;		}		// Make sure that we're working with the right name		var ret, type, hooks,			origName = jQuery.camelCase( name ),			isCustomProp = rcustomProp.test( name ),			style = elem.style;		// Make sure that we're working with the right name. We don't		// want to query the value if it is a CSS custom property		// since they are user-defined.		if ( !isCustomProp ) {			name = finalPropName( origName );		}		// Gets hook for the prefixed version, then unprefixed version		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];		// Check if we're setting a value		if ( value !== undefined ) {			type = typeof value;			// Convert "+=" or "-=" to relative numbers (#7345)			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {				value = adjustCSS( elem, name, ret );				// Fixes bug #9237				type = "number";			}			// Make sure that null and NaN values aren't set (#7116)			if ( value == null || value !== value ) {				return;			}			// If a number was passed in, add the unit (except for certain CSS properties)			if ( type === "number" ) {				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );			}			// background-* props affect original clone's values			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {				style[ name ] = "inherit";			}			// If a hook was provided, use that value, otherwise just set the specified value			if ( !hooks || !( "set" in hooks ) ||				( value = hooks.set( elem, value, extra ) ) !== undefined ) {				if ( isCustomProp ) {					style.setProperty( name, value );				} else {					style[ name ] = value;				}			}		} else {			// If a hook was provided get the non-computed value from there			if ( hooks && "get" in hooks &&				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {				return ret;			}			// Otherwise just get the value from the style object			return style[ name ];		}	},	css: function( elem, name, extra, styles ) {		var val, num, hooks,			origName = jQuery.camelCase( name ),			isCustomProp = rcustomProp.test( name );		// Make sure that we're working with the right name. We don't		// want to modify the value if it is a CSS custom property		// since they are user-defined.		if ( !isCustomProp ) {			name = finalPropName( origName );		}		// Try prefixed name followed by the unprefixed name		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];		// If a hook was provided get the computed value from there		if ( hooks && "get" in hooks ) {			val = hooks.get( elem, true, extra );		}		// Otherwise, if a way to get the computed value exists, use that		if ( val === undefined ) {			val = curCSS( elem, name, styles );		}		// Convert "normal" to computed value		if ( val === "normal" && name in cssNormalTransform ) {			val = cssNormalTransform[ name ];		}		// Make numeric if forced or a qualifier was provided and val looks numeric		if ( extra === "" || extra ) {			num = parseFloat( val );			return extra === true || isFinite( num ) ? num || 0 : val;		}		return val;	}} );jQuery.each( [ "height", "width" ], function( i, name ) {	jQuery.cssHooks[ name ] = {		get: function( elem, computed, extra ) {			if ( computed ) {				// Certain elements can have dimension info if we invisibly show them				// but it must have a current display style that would benefit				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&					// Support: Safari 8+					// Table columns in Safari have non-zero offsetWidth & zero					// getBoundingClientRect().width unless display is changed.					// Support: IE <=11 only					// Running getBoundingClientRect on a disconnected node					// in IE throws an error.					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?						swap( elem, cssShow, function() {							return getWidthOrHeight( elem, name, extra );						} ) :						getWidthOrHeight( elem, name, extra );			}		},		set: function( elem, value, extra ) {			var matches,				styles = extra && getStyles( elem ),				subtract = extra && augmentWidthOrHeight(					elem,					name,					extra,					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",					styles				);			// Convert to pixels if value adjustment is needed			if ( subtract && ( matches = rcssNum.exec( value ) ) &&				( matches[ 3 ] || "px" ) !== "px" ) {				elem.style[ name ] = value;				value = jQuery.css( elem, name );			}			return setPositiveNumber( elem, value, subtract );		}	};} );jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,	function( elem, computed ) {		if ( computed ) {			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||				elem.getBoundingClientRect().left -					swap( elem, { marginLeft: 0 }, function() {						return elem.getBoundingClientRect().left;					} )				) + "px";		}	});// These hooks are used by animate to expand propertiesjQuery.each( {	margin: "",	padding: "",	border: "Width"}, function( prefix, suffix ) {	jQuery.cssHooks[ prefix + suffix ] = {		expand: function( value ) {			var i = 0,				expanded = {},				// Assumes a single number if not a string				parts = typeof value === "string" ? value.split( " " ) : [ value ];			for ( ; i < 4; i++ ) {				expanded[ prefix + cssExpand[ i ] + suffix ] =					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];			}			return expanded;		}	};	if ( !rmargin.test( prefix ) ) {		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;	}} );jQuery.fn.extend( {	css: function( name, value ) {		return access( this, function( elem, name, value ) {			var styles, len,				map = {},				i = 0;			if ( Array.isArray( name ) ) {				styles = getStyles( elem );				len = name.length;				for ( ; i < len; i++ ) {					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );				}				return map;			}			return value !== undefined ?				jQuery.style( elem, name, value ) :				jQuery.css( elem, name );		}, name, value, arguments.length > 1 );	}} );function Tween( elem, options, prop, end, easing ) {	return new Tween.prototype.init( elem, options, prop, end, easing );}jQuery.Tween = Tween;Tween.prototype = {	constructor: Tween,	init: function( elem, options, prop, end, easing, unit ) {		this.elem = elem;		this.prop = prop;		this.easing = easing || jQuery.easing._default;		this.options = options;		this.start = this.now = this.cur();		this.end = end;		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );	},	cur: function() {		var hooks = Tween.propHooks[ this.prop ];		return hooks && hooks.get ?			hooks.get( this ) :			Tween.propHooks._default.get( this );	},	run: function( percent ) {		var eased,			hooks = Tween.propHooks[ this.prop ];		if ( this.options.duration ) {			this.pos = eased = jQuery.easing[ this.easing ](				percent, this.options.duration * percent, 0, 1, this.options.duration			);		} else {			this.pos = eased = percent;		}		this.now = ( this.end - this.start ) * eased + this.start;		if ( this.options.step ) {			this.options.step.call( this.elem, this.now, this );		}		if ( hooks && hooks.set ) {			hooks.set( this );		} else {			Tween.propHooks._default.set( this );		}		return this;	}};Tween.prototype.init.prototype = Tween.prototype;Tween.propHooks = {	_default: {		get: function( tween ) {			var result;			// Use a property on the element directly when it is not a DOM element,			// or when there is no matching style property that exists.			if ( tween.elem.nodeType !== 1 ||				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {				return tween.elem[ tween.prop ];			}			// Passing an empty string as a 3rd parameter to .css will automatically			// attempt a parseFloat and fallback to a string if the parse fails.			// Simple values such as "10px" are parsed to Float;			// complex values such as "rotate(1rad)" are returned as-is.			result = jQuery.css( tween.elem, tween.prop, "" );			// Empty strings, null, undefined and "auto" are converted to 0.			return !result || result === "auto" ? 0 : result;		},		set: function( tween ) {			// Use step hook for back compat.			// Use cssHook if its there.			// Use .style if available and use plain properties where available.			if ( jQuery.fx.step[ tween.prop ] ) {				jQuery.fx.step[ tween.prop ]( tween );			} else if ( tween.elem.nodeType === 1 &&				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||					jQuery.cssHooks[ tween.prop ] ) ) {				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );			} else {				tween.elem[ tween.prop ] = tween.now;			}		}	}};// Support: IE <=9 only// Panic based approach to setting things on disconnected nodesTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {	set: function( tween ) {		if ( tween.elem.nodeType && tween.elem.parentNode ) {			tween.elem[ tween.prop ] = tween.now;		}	}};jQuery.easing = {	linear: function( p ) {		return p;	},	swing: function( p ) {		return 0.5 - Math.cos( p * Math.PI ) / 2;	},	_default: "swing"};jQuery.fx = Tween.prototype.init;// Back compat <1.8 extension pointjQuery.fx.step = {};var	fxNow, inProgress,	rfxtypes = /^(?:toggle|show|hide)$/,	rrun = /queueHooks$/;function schedule() {	if ( inProgress ) {		if ( document.hidden === false && window.requestAnimationFrame ) {			window.requestAnimationFrame( schedule );		} else {			window.setTimeout( schedule, jQuery.fx.interval );		}		jQuery.fx.tick();	}}// Animations created synchronously will run synchronouslyfunction createFxNow() {	window.setTimeout( function() {		fxNow = undefined;	} );	return ( fxNow = jQuery.now() );}// Generate parameters to create a standard animationfunction genFx( type, includeWidth ) {	var which,		i = 0,		attrs = { height: type };	// If we include width, step value is 1 to do all cssExpand values,	// otherwise step value is 2 to skip over Left and Right	includeWidth = includeWidth ? 1 : 0;	for ( ; i < 4; i += 2 - includeWidth ) {		which = cssExpand[ i ];		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;	}	if ( includeWidth ) {		attrs.opacity = attrs.width = type;	}	return attrs;}function createTween( value, prop, animation ) {	var tween,		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),		index = 0,		length = collection.length;	for ( ; index < length; index++ ) {		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {			// We're done with this property			return tween;		}	}}function defaultPrefilter( elem, props, opts ) {	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,		isBox = "width" in props || "height" in props,		anim = this,		orig = {},		style = elem.style,		hidden = elem.nodeType && isHiddenWithinTree( elem ),		dataShow = dataPriv.get( elem, "fxshow" );	// Queue-skipping animations hijack the fx hooks	if ( !opts.queue ) {		hooks = jQuery._queueHooks( elem, "fx" );		if ( hooks.unqueued == null ) {			hooks.unqueued = 0;			oldfire = hooks.empty.fire;			hooks.empty.fire = function() {				if ( !hooks.unqueued ) {					oldfire();				}			};		}		hooks.unqueued++;		anim.always( function() {			// Ensure the complete handler is called before this completes			anim.always( function() {				hooks.unqueued--;				if ( !jQuery.queue( elem, "fx" ).length ) {					hooks.empty.fire();				}			} );		} );	}	// Detect show/hide animations	for ( prop in props ) {		value = props[ prop ];		if ( rfxtypes.test( value ) ) {			delete props[ prop ];			toggle = toggle || value === "toggle";			if ( value === ( hidden ? "hide" : "show" ) ) {				// Pretend to be hidden if this is a "show" and				// there is still data from a stopped show/hide				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {					hidden = true;				// Ignore all other no-op show/hide data				} else {					continue;				}			}			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );		}	}	// Bail out if this is a no-op like .hide().hide()	propTween = !jQuery.isEmptyObject( props );	if ( !propTween && jQuery.isEmptyObject( orig ) ) {		return;	}	// Restrict "overflow" and "display" styles during box animations	if ( isBox && elem.nodeType === 1 ) {		// Support: IE <=9 - 11, Edge 12 - 13		// Record all 3 overflow attributes because IE does not infer the shorthand		// from identically-valued overflowX and overflowY		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];		// Identify a display type, preferring old show/hide data over the CSS cascade		restoreDisplay = dataShow && dataShow.display;		if ( restoreDisplay == null ) {			restoreDisplay = dataPriv.get( elem, "display" );		}		display = jQuery.css( elem, "display" );		if ( display === "none" ) {			if ( restoreDisplay ) {				display = restoreDisplay;			} else {				// Get nonempty value(s) by temporarily forcing visibility				showHide( [ elem ], true );				restoreDisplay = elem.style.display || restoreDisplay;				display = jQuery.css( elem, "display" );				showHide( [ elem ] );			}		}		// Animate inline elements as inline-block		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {			if ( jQuery.css( elem, "float" ) === "none" ) {				// Restore the original display value at the end of pure show/hide animations				if ( !propTween ) {					anim.done( function() {						style.display = restoreDisplay;					} );					if ( restoreDisplay == null ) {						display = style.display;						restoreDisplay = display === "none" ? "" : display;					}				}				style.display = "inline-block";			}		}	}	if ( opts.overflow ) {		style.overflow = "hidden";		anim.always( function() {			style.overflow = opts.overflow[ 0 ];			style.overflowX = opts.overflow[ 1 ];			style.overflowY = opts.overflow[ 2 ];		} );	}	// Implement show/hide animations	propTween = false;	for ( prop in orig ) {		// General show/hide setup for this element animation		if ( !propTween ) {			if ( dataShow ) {				if ( "hidden" in dataShow ) {					hidden = dataShow.hidden;				}			} else {				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );			}			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"			if ( toggle ) {				dataShow.hidden = !hidden;			}			// Show elements before animating them			if ( hidden ) {				showHide( [ elem ], true );			}			/* eslint-disable no-loop-func */			anim.done( function() {			/* eslint-enable no-loop-func */				// The final step of a "hide" animation is actually hiding the element				if ( !hidden ) {					showHide( [ elem ] );				}				dataPriv.remove( elem, "fxshow" );				for ( prop in orig ) {					jQuery.style( elem, prop, orig[ prop ] );				}			} );		}		// Per-property setup		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );		if ( !( prop in dataShow ) ) {			dataShow[ prop ] = propTween.start;			if ( hidden ) {				propTween.end = propTween.start;				propTween.start = 0;			}		}	}}function propFilter( props, specialEasing ) {	var index, name, easing, value, hooks;	// camelCase, specialEasing and expand cssHook pass	for ( index in props ) {		name = jQuery.camelCase( index );		easing = specialEasing[ name ];		value = props[ index ];		if ( Array.isArray( value ) ) {			easing = value[ 1 ];			value = props[ index ] = value[ 0 ];		}		if ( index !== name ) {			props[ name ] = value;			delete props[ index ];		}		hooks = jQuery.cssHooks[ name ];		if ( hooks && "expand" in hooks ) {			value = hooks.expand( value );			delete props[ name ];			// Not quite $.extend, this won't overwrite existing keys.			// Reusing 'index' because we have the correct "name"			for ( index in value ) {				if ( !( index in props ) ) {					props[ index ] = value[ index ];					specialEasing[ index ] = easing;				}			}		} else {			specialEasing[ name ] = easing;		}	}}function Animation( elem, properties, options ) {	var result,		stopped,		index = 0,		length = Animation.prefilters.length,		deferred = jQuery.Deferred().always( function() {			// Don't match elem in the :animated selector			delete tick.elem;		} ),		tick = function() {			if ( stopped ) {				return false;			}			var currentTime = fxNow || createFxNow(),				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),				// Support: Android 2.3 only				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)				temp = remaining / animation.duration || 0,				percent = 1 - temp,				index = 0,				length = animation.tweens.length;			for ( ; index < length; index++ ) {				animation.tweens[ index ].run( percent );			}			deferred.notifyWith( elem, [ animation, percent, remaining ] );			// If there's more to do, yield			if ( percent < 1 && length ) {				return remaining;			}			// If this was an empty animation, synthesize a final progress notification			if ( !length ) {				deferred.notifyWith( elem, [ animation, 1, 0 ] );			}			// Resolve the animation and report its conclusion			deferred.resolveWith( elem, [ animation ] );			return false;		},		animation = deferred.promise( {			elem: elem,			props: jQuery.extend( {}, properties ),			opts: jQuery.extend( true, {				specialEasing: {},				easing: jQuery.easing._default			}, options ),			originalProperties: properties,			originalOptions: options,			startTime: fxNow || createFxNow(),			duration: options.duration,			tweens: [],			createTween: function( prop, end ) {				var tween = jQuery.Tween( elem, animation.opts, prop, end,						animation.opts.specialEasing[ prop ] || animation.opts.easing );				animation.tweens.push( tween );				return tween;			},			stop: function( gotoEnd ) {				var index = 0,					// If we are going to the end, we want to run all the tweens					// otherwise we skip this part					length = gotoEnd ? animation.tweens.length : 0;				if ( stopped ) {					return this;				}				stopped = true;				for ( ; index < length; index++ ) {					animation.tweens[ index ].run( 1 );				}				// Resolve when we played the last frame; otherwise, reject				if ( gotoEnd ) {					deferred.notifyWith( elem, [ animation, 1, 0 ] );					deferred.resolveWith( elem, [ animation, gotoEnd ] );				} else {					deferred.rejectWith( elem, [ animation, gotoEnd ] );				}				return this;			}		} ),		props = animation.props;	propFilter( props, animation.opts.specialEasing );	for ( ; index < length; index++ ) {		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );		if ( result ) {			if ( jQuery.isFunction( result.stop ) ) {				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =					jQuery.proxy( result.stop, result );			}			return result;		}	}	jQuery.map( props, createTween, animation );	if ( jQuery.isFunction( animation.opts.start ) ) {		animation.opts.start.call( elem, animation );	}	// Attach callbacks from options	animation		.progress( animation.opts.progress )		.done( animation.opts.done, animation.opts.complete )		.fail( animation.opts.fail )		.always( animation.opts.always );	jQuery.fx.timer(		jQuery.extend( tick, {			elem: elem,			anim: animation,			queue: animation.opts.queue		} )	);	return animation;}jQuery.Animation = jQuery.extend( Animation, {	tweeners: {		"*": [ function( prop, value ) {			var tween = this.createTween( prop, value );			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );			return tween;		} ]	},	tweener: function( props, callback ) {		if ( jQuery.isFunction( props ) ) {			callback = props;			props = [ "*" ];		} else {			props = props.match( rnothtmlwhite );		}		var prop,			index = 0,			length = props.length;		for ( ; index < length; index++ ) {			prop = props[ index ];			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];			Animation.tweeners[ prop ].unshift( callback );		}	},	prefilters: [ defaultPrefilter ],	prefilter: function( callback, prepend ) {		if ( prepend ) {			Animation.prefilters.unshift( callback );		} else {			Animation.prefilters.push( callback );		}	}} );jQuery.speed = function( speed, easing, fn ) {	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {		complete: fn || !fn && easing ||			jQuery.isFunction( speed ) && speed,		duration: speed,		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing	};	// Go to the end state if fx are off	if ( jQuery.fx.off ) {		opt.duration = 0;	} else {		if ( typeof opt.duration !== "number" ) {			if ( opt.duration in jQuery.fx.speeds ) {				opt.duration = jQuery.fx.speeds[ opt.duration ];			} else {				opt.duration = jQuery.fx.speeds._default;			}		}	}	// Normalize opt.queue - true/undefined/null -> "fx"	if ( opt.queue == null || opt.queue === true ) {		opt.queue = "fx";	}	// Queueing	opt.old = opt.complete;	opt.complete = function() {		if ( jQuery.isFunction( opt.old ) ) {			opt.old.call( this );		}		if ( opt.queue ) {			jQuery.dequeue( this, opt.queue );		}	};	return opt;};jQuery.fn.extend( {	fadeTo: function( speed, to, easing, callback ) {		// Show any hidden elements after setting opacity to 0		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()			// Animate to the value specified			.end().animate( { opacity: to }, speed, easing, callback );	},	animate: function( prop, speed, easing, callback ) {		var empty = jQuery.isEmptyObject( prop ),			optall = jQuery.speed( speed, easing, callback ),			doAnimation = function() {				// Operate on a copy of prop so per-property easing won't be lost				var anim = Animation( this, jQuery.extend( {}, prop ), optall );				// Empty animations, or finishing resolves immediately				if ( empty || dataPriv.get( this, "finish" ) ) {					anim.stop( true );				}			};			doAnimation.finish = doAnimation;		return empty || optall.queue === false ?			this.each( doAnimation ) :			this.queue( optall.queue, doAnimation );	},	stop: function( type, clearQueue, gotoEnd ) {		var stopQueue = function( hooks ) {			var stop = hooks.stop;			delete hooks.stop;			stop( gotoEnd );		};		if ( typeof type !== "string" ) {			gotoEnd = clearQueue;			clearQueue = type;			type = undefined;		}		if ( clearQueue && type !== false ) {			this.queue( type || "fx", [] );		}		return this.each( function() {			var dequeue = true,				index = type != null && type + "queueHooks",				timers = jQuery.timers,				data = dataPriv.get( this );			if ( index ) {				if ( data[ index ] && data[ index ].stop ) {					stopQueue( data[ index ] );				}			} else {				for ( index in data ) {					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {						stopQueue( data[ index ] );					}				}			}			for ( index = timers.length; index--; ) {				if ( timers[ index ].elem === this &&					( type == null || timers[ index ].queue === type ) ) {					timers[ index ].anim.stop( gotoEnd );					dequeue = false;					timers.splice( index, 1 );				}			}			// Start the next in the queue if the last step wasn't forced.			// Timers currently will call their complete callbacks, which			// will dequeue but only if they were gotoEnd.			if ( dequeue || !gotoEnd ) {				jQuery.dequeue( this, type );			}		} );	},	finish: function( type ) {		if ( type !== false ) {			type = type || "fx";		}		return this.each( function() {			var index,				data = dataPriv.get( this ),				queue = data[ type + "queue" ],				hooks = data[ type + "queueHooks" ],				timers = jQuery.timers,				length = queue ? queue.length : 0;			// Enable finishing flag on private data			data.finish = true;			// Empty the queue first			jQuery.queue( this, type, [] );			if ( hooks && hooks.stop ) {				hooks.stop.call( this, true );			}			// Look for any active animations, and finish them			for ( index = timers.length; index--; ) {				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {					timers[ index ].anim.stop( true );					timers.splice( index, 1 );				}			}			// Look for any animations in the old queue and finish them			for ( index = 0; index < length; index++ ) {				if ( queue[ index ] && queue[ index ].finish ) {					queue[ index ].finish.call( this );				}			}			// Turn off finishing flag			delete data.finish;		} );	}} );jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {	var cssFn = jQuery.fn[ name ];	jQuery.fn[ name ] = function( speed, easing, callback ) {		return speed == null || typeof speed === "boolean" ?			cssFn.apply( this, arguments ) :			this.animate( genFx( name, true ), speed, easing, callback );	};} );// Generate shortcuts for custom animationsjQuery.each( {	slideDown: genFx( "show" ),	slideUp: genFx( "hide" ),	slideToggle: genFx( "toggle" ),	fadeIn: { opacity: "show" },	fadeOut: { opacity: "hide" },	fadeToggle: { opacity: "toggle" }}, function( name, props ) {	jQuery.fn[ name ] = function( speed, easing, callback ) {		return this.animate( props, speed, easing, callback );	};} );jQuery.timers = [];jQuery.fx.tick = function() {	var timer,		i = 0,		timers = jQuery.timers;	fxNow = jQuery.now();	for ( ; i < timers.length; i++ ) {		timer = timers[ i ];		// Run the timer and safely remove it when done (allowing for external removal)		if ( !timer() && timers[ i ] === timer ) {			timers.splice( i--, 1 );		}	}	if ( !timers.length ) {		jQuery.fx.stop();	}	fxNow = undefined;};jQuery.fx.timer = function( timer ) {	jQuery.timers.push( timer );	jQuery.fx.start();};jQuery.fx.interval = 13;jQuery.fx.start = function() {	if ( inProgress ) {		return;	}	inProgress = true;	schedule();};jQuery.fx.stop = function() {	inProgress = null;};jQuery.fx.speeds = {	slow: 600,	fast: 200,	// Default speed	_default: 400};// Based off of the plugin by Clint Helfers, with permission.// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/jQuery.fn.delay = function( time, type ) {	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;	type = type || "fx";	return this.queue( type, function( next, hooks ) {		var timeout = window.setTimeout( next, time );		hooks.stop = function() {			window.clearTimeout( timeout );		};	} );};( function() {	var input = document.createElement( "input" ),		select = document.createElement( "select" ),		opt = select.appendChild( document.createElement( "option" ) );	input.type = "checkbox";	// Support: Android <=4.3 only	// Default value for a checkbox should be "on"	support.checkOn = input.value !== "";	// Support: IE <=11 only	// Must access selectedIndex to make default options select	support.optSelected = opt.selected;	// Support: IE <=11 only	// An input loses its value after becoming a radio	input = document.createElement( "input" );	input.value = "t";	input.type = "radio";	support.radioValue = input.value === "t";} )();var boolHook,	attrHandle = jQuery.expr.attrHandle;jQuery.fn.extend( {	attr: function( name, value ) {		return access( this, jQuery.attr, name, value, arguments.length > 1 );	},	removeAttr: function( name ) {		return this.each( function() {			jQuery.removeAttr( this, name );		} );	}} );jQuery.extend( {	attr: function( elem, name, value ) {		var ret, hooks,			nType = elem.nodeType;		// Don't get/set attributes on text, comment and attribute nodes		if ( nType === 3 || nType === 8 || nType === 2 ) {			return;		}		// Fallback to prop when attributes are not supported		if ( typeof elem.getAttribute === "undefined" ) {			return jQuery.prop( elem, name, value );		}		// Attribute hooks are determined by the lowercase version		// Grab necessary hook if one is defined		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );		}		if ( value !== undefined ) {			if ( value === null ) {				jQuery.removeAttr( elem, name );				return;			}			if ( hooks && "set" in hooks &&				( ret = hooks.set( elem, value, name ) ) !== undefined ) {				return ret;			}			elem.setAttribute( name, value + "" );			return value;		}		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {			return ret;		}		ret = jQuery.find.attr( elem, name );		// Non-existent attributes return null, we normalize to undefined		return ret == null ? undefined : ret;	},	attrHooks: {		type: {			set: function( elem, value ) {				if ( !support.radioValue && value === "radio" &&					nodeName( elem, "input" ) ) {					var val = elem.value;					elem.setAttribute( "type", value );					if ( val ) {						elem.value = val;					}					return value;				}			}		}	},	removeAttr: function( elem, value ) {		var name,			i = 0,			// Attribute names can contain non-HTML whitespace characters			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2			attrNames = value && value.match( rnothtmlwhite );		if ( attrNames && elem.nodeType === 1 ) {			while ( ( name = attrNames[ i++ ] ) ) {				elem.removeAttribute( name );			}		}	}} );// Hooks for boolean attributesboolHook = {	set: function( elem, value, name ) {		if ( value === false ) {			// Remove boolean attributes when set to false			jQuery.removeAttr( elem, name );		} else {			elem.setAttribute( name, name );		}		return name;	}};jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {	var getter = attrHandle[ name ] || jQuery.find.attr;	attrHandle[ name ] = function( elem, name, isXML ) {		var ret, handle,			lowercaseName = name.toLowerCase();		if ( !isXML ) {			// Avoid an infinite loop by temporarily removing this function from the getter			handle = attrHandle[ lowercaseName ];			attrHandle[ lowercaseName ] = ret;			ret = getter( elem, name, isXML ) != null ?				lowercaseName :				null;			attrHandle[ lowercaseName ] = handle;		}		return ret;	};} );var rfocusable = /^(?:input|select|textarea|button)$/i,	rclickable = /^(?:a|area)$/i;jQuery.fn.extend( {	prop: function( name, value ) {		return access( this, jQuery.prop, name, value, arguments.length > 1 );	},	removeProp: function( name ) {		return this.each( function() {			delete this[ jQuery.propFix[ name ] || name ];		} );	}} );jQuery.extend( {	prop: function( elem, name, value ) {		var ret, hooks,			nType = elem.nodeType;		// Don't get/set properties on text, comment and attribute nodes		if ( nType === 3 || nType === 8 || nType === 2 ) {			return;		}		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {			// Fix name and attach hooks			name = jQuery.propFix[ name ] || name;			hooks = jQuery.propHooks[ name ];		}		if ( value !== undefined ) {			if ( hooks && "set" in hooks &&				( ret = hooks.set( elem, value, name ) ) !== undefined ) {				return ret;			}			return ( elem[ name ] = value );		}		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {			return ret;		}		return elem[ name ];	},	propHooks: {		tabIndex: {			get: function( elem ) {				// Support: IE <=9 - 11 only				// elem.tabIndex doesn't always return the				// correct value when it hasn't been explicitly set				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/				// Use proper attribute retrieval(#12072)				var tabindex = jQuery.find.attr( elem, "tabindex" );				if ( tabindex ) {					return parseInt( tabindex, 10 );				}				if (					rfocusable.test( elem.nodeName ) ||					rclickable.test( elem.nodeName ) &&					elem.href				) {					return 0;				}				return -1;			}		}	},	propFix: {		"for": "htmlFor",		"class": "className"	}} );// Support: IE <=11 only// Accessing the selectedIndex property// forces the browser to respect setting selected// on the option// The getter ensures a default option is selected// when in an optgroup// eslint rule "no-unused-expressions" is disabled for this code// since it considers such accessions noopif ( !support.optSelected ) {	jQuery.propHooks.selected = {		get: function( elem ) {			/* eslint no-unused-expressions: "off" */			var parent = elem.parentNode;			if ( parent && parent.parentNode ) {				parent.parentNode.selectedIndex;			}			return null;		},		set: function( elem ) {			/* eslint no-unused-expressions: "off" */			var parent = elem.parentNode;			if ( parent ) {				parent.selectedIndex;				if ( parent.parentNode ) {					parent.parentNode.selectedIndex;				}			}		}	};}jQuery.each( [	"tabIndex",	"readOnly",	"maxLength",	"cellSpacing",	"cellPadding",	"rowSpan",	"colSpan",	"useMap",	"frameBorder",	"contentEditable"], function() {	jQuery.propFix[ this.toLowerCase() ] = this;} );	// Strip and collapse whitespace according to HTML spec	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace	function stripAndCollapse( value ) {		var tokens = value.match( rnothtmlwhite ) || [];		return tokens.join( " " );	}function getClass( elem ) {	return elem.getAttribute && elem.getAttribute( "class" ) || "";}jQuery.fn.extend( {	addClass: function( value ) {		var classes, elem, cur, curValue, clazz, j, finalValue,			i = 0;		if ( jQuery.isFunction( value ) ) {			return this.each( function( j ) {				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );			} );		}		if ( typeof value === "string" && value ) {			classes = value.match( rnothtmlwhite ) || [];			while ( ( elem = this[ i++ ] ) ) {				curValue = getClass( elem );				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );				if ( cur ) {					j = 0;					while ( ( clazz = classes[ j++ ] ) ) {						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {							cur += clazz + " ";						}					}					// Only assign if different to avoid unneeded rendering.					finalValue = stripAndCollapse( cur );					if ( curValue !== finalValue ) {						elem.setAttribute( "class", finalValue );					}				}			}		}		return this;	},	removeClass: function( value ) {		var classes, elem, cur, curValue, clazz, j, finalValue,			i = 0;		if ( jQuery.isFunction( value ) ) {			return this.each( function( j ) {				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );			} );		}		if ( !arguments.length ) {			return this.attr( "class", "" );		}		if ( typeof value === "string" && value ) {			classes = value.match( rnothtmlwhite ) || [];			while ( ( elem = this[ i++ ] ) ) {				curValue = getClass( elem );				// This expression is here for better compressibility (see addClass)				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );				if ( cur ) {					j = 0;					while ( ( clazz = classes[ j++ ] ) ) {						// Remove *all* instances						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {							cur = cur.replace( " " + clazz + " ", " " );						}					}					// Only assign if different to avoid unneeded rendering.					finalValue = stripAndCollapse( cur );					if ( curValue !== finalValue ) {						elem.setAttribute( "class", finalValue );					}				}			}		}		return this;	},	toggleClass: function( value, stateVal ) {		var type = typeof value;		if ( typeof stateVal === "boolean" && type === "string" ) {			return stateVal ? this.addClass( value ) : this.removeClass( value );		}		if ( jQuery.isFunction( value ) ) {			return this.each( function( i ) {				jQuery( this ).toggleClass(					value.call( this, i, getClass( this ), stateVal ),					stateVal				);			} );		}		return this.each( function() {			var className, i, self, classNames;			if ( type === "string" ) {				// Toggle individual class names				i = 0;				self = jQuery( this );				classNames = value.match( rnothtmlwhite ) || [];				while ( ( className = classNames[ i++ ] ) ) {					// Check each className given, space separated list					if ( self.hasClass( className ) ) {						self.removeClass( className );					} else {						self.addClass( className );					}				}			// Toggle whole class name			} else if ( value === undefined || type === "boolean" ) {				className = getClass( this );				if ( className ) {					// Store className if set					dataPriv.set( this, "__className__", className );				}				// If the element has a class name or if we're passed `false`,				// then remove the whole classname (if there was one, the above saved it).				// Otherwise bring back whatever was previously saved (if anything),				// falling back to the empty string if nothing was stored.				if ( this.setAttribute ) {					this.setAttribute( "class",						className || value === false ?						"" :						dataPriv.get( this, "__className__" ) || ""					);				}			}		} );	},	hasClass: function( selector ) {		var className, elem,			i = 0;		className = " " + selector + " ";		while ( ( elem = this[ i++ ] ) ) {			if ( elem.nodeType === 1 &&				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {					return true;			}		}		return false;	}} );var rreturn = /\r/g;jQuery.fn.extend( {	val: function( value ) {		var hooks, ret, isFunction,			elem = this[ 0 ];		if ( !arguments.length ) {			if ( elem ) {				hooks = jQuery.valHooks[ elem.type ] ||					jQuery.valHooks[ elem.nodeName.toLowerCase() ];				if ( hooks &&					"get" in hooks &&					( ret = hooks.get( elem, "value" ) ) !== undefined				) {					return ret;				}				ret = elem.value;				// Handle most common string cases				if ( typeof ret === "string" ) {					return ret.replace( rreturn, "" );				}				// Handle cases where value is null/undef or number				return ret == null ? "" : ret;			}			return;		}		isFunction = jQuery.isFunction( value );		return this.each( function( i ) {			var val;			if ( this.nodeType !== 1 ) {				return;			}			if ( isFunction ) {				val = value.call( this, i, jQuery( this ).val() );			} else {				val = value;			}			// Treat null/undefined as ""; convert numbers to string			if ( val == null ) {				val = "";			} else if ( typeof val === "number" ) {				val += "";			} else if ( Array.isArray( val ) ) {				val = jQuery.map( val, function( value ) {					return value == null ? "" : value + "";				} );			}			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];			// If set returns undefined, fall back to normal setting			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {				this.value = val;			}		} );	}} );jQuery.extend( {	valHooks: {		option: {			get: function( elem ) {				var val = jQuery.find.attr( elem, "value" );				return val != null ?					val :					// Support: IE <=10 - 11 only					// option.text throws exceptions (#14686, #14858)					// Strip and collapse whitespace					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace					stripAndCollapse( jQuery.text( elem ) );			}		},		select: {			get: function( elem ) {				var value, option, i,					options = elem.options,					index = elem.selectedIndex,					one = elem.type === "select-one",					values = one ? null : [],					max = one ? index + 1 : options.length;				if ( index < 0 ) {					i = max;				} else {					i = one ? index : 0;				}				// Loop through all the selected options				for ( ; i < max; i++ ) {					option = options[ i ];					// Support: IE <=9 only					// IE8-9 doesn't update selected after form reset (#2551)					if ( ( option.selected || i === index ) &&							// Don't return options that are disabled or in a disabled optgroup							!option.disabled &&							( !option.parentNode.disabled ||								!nodeName( option.parentNode, "optgroup" ) ) ) {						// Get the specific value for the option						value = jQuery( option ).val();						// We don't need an array for one selects						if ( one ) {							return value;						}						// Multi-Selects return an array						values.push( value );					}				}				return values;			},			set: function( elem, value ) {				var optionSet, option,					options = elem.options,					values = jQuery.makeArray( value ),					i = options.length;				while ( i-- ) {					option = options[ i ];					/* eslint-disable no-cond-assign */					if ( option.selected =						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1					) {						optionSet = true;					}					/* eslint-enable no-cond-assign */				}				// Force browsers to behave consistently when non-matching value is set				if ( !optionSet ) {					elem.selectedIndex = -1;				}				return values;			}		}	}} );// Radios and checkboxes getter/setterjQuery.each( [ "radio", "checkbox" ], function() {	jQuery.valHooks[ this ] = {		set: function( elem, value ) {			if ( Array.isArray( value ) ) {				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );			}		}	};	if ( !support.checkOn ) {		jQuery.valHooks[ this ].get = function( elem ) {			return elem.getAttribute( "value" ) === null ? "on" : elem.value;		};	}} );// Return jQuery for attributes-only inclusionvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;jQuery.extend( jQuery.event, {	trigger: function( event, data, elem, onlyHandlers ) {		var i, cur, tmp, bubbleType, ontype, handle, special,			eventPath = [ elem || document ],			type = hasOwn.call( event, "type" ) ? event.type : event,			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];		cur = tmp = elem = elem || document;		// Don't do events on text and comment nodes		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {			return;		}		// focus/blur morphs to focusin/out; ensure we're not firing them right now		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {			return;		}		if ( type.indexOf( "." ) > -1 ) {			// Namespaced trigger; create a regexp to match event type in handle()			namespaces = type.split( "." );			type = namespaces.shift();			namespaces.sort();		}		ontype = type.indexOf( ":" ) < 0 && "on" + type;		// Caller can pass in a jQuery.Event object, Object, or just an event type string		event = event[ jQuery.expando ] ?			event :			new jQuery.Event( type, typeof event === "object" && event );		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)		event.isTrigger = onlyHandlers ? 2 : 3;		event.namespace = namespaces.join( "." );		event.rnamespace = event.namespace ?			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :			null;		// Clean up the event in case it is being reused		event.result = undefined;		if ( !event.target ) {			event.target = elem;		}		// Clone any incoming data and prepend the event, creating the handler arg list		data = data == null ?			[ event ] :			jQuery.makeArray( data, [ event ] );		// Allow special events to draw outside the lines		special = jQuery.event.special[ type ] || {};		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {			return;		}		// Determine event propagation path in advance, per W3C events spec (#9951)		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {			bubbleType = special.delegateType || type;			if ( !rfocusMorph.test( bubbleType + type ) ) {				cur = cur.parentNode;			}			for ( ; cur; cur = cur.parentNode ) {				eventPath.push( cur );				tmp = cur;			}			// Only add window if we got to document (e.g., not plain obj or detached DOM)			if ( tmp === ( elem.ownerDocument || document ) ) {				eventPath.push( tmp.defaultView || tmp.parentWindow || window );			}		}		// Fire handlers on the event path		i = 0;		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {			event.type = i > 1 ?				bubbleType :				special.bindType || type;			// jQuery handler			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&				dataPriv.get( cur, "handle" );			if ( handle ) {				handle.apply( cur, data );			}			// Native handler			handle = ontype && cur[ ontype ];			if ( handle && handle.apply && acceptData( cur ) ) {				event.result = handle.apply( cur, data );				if ( event.result === false ) {					event.preventDefault();				}			}		}		event.type = type;		// If nobody prevented the default action, do it now		if ( !onlyHandlers && !event.isDefaultPrevented() ) {			if ( ( !special._default ||				special._default.apply( eventPath.pop(), data ) === false ) &&				acceptData( elem ) ) {				// Call a native DOM method on the target with the same name as the event.				// Don't do default actions on window, that's where global variables be (#6170)				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {					// Don't re-trigger an onFOO event when we call its FOO() method					tmp = elem[ ontype ];					if ( tmp ) {						elem[ ontype ] = null;					}					// Prevent re-triggering of the same event, since we already bubbled it above					jQuery.event.triggered = type;					elem[ type ]();					jQuery.event.triggered = undefined;					if ( tmp ) {						elem[ ontype ] = tmp;					}				}			}		}		return event.result;	},	// Piggyback on a donor event to simulate a different one	// Used only for `focus(in | out)` events	simulate: function( type, elem, event ) {		var e = jQuery.extend(			new jQuery.Event(),			event,			{				type: type,				isSimulated: true			}		);		jQuery.event.trigger( e, null, elem );	}} );jQuery.fn.extend( {	trigger: function( type, data ) {		return this.each( function() {			jQuery.event.trigger( type, data, this );		} );	},	triggerHandler: function( type, data ) {		var elem = this[ 0 ];		if ( elem ) {			return jQuery.event.trigger( type, data, elem, true );		}	}} );jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +	"change select submit keydown keypress keyup contextmenu" ).split( " " ),	function( i, name ) {	// Handle event binding	jQuery.fn[ name ] = function( data, fn ) {		return arguments.length > 0 ?			this.on( name, null, data, fn ) :			this.trigger( name );	};} );jQuery.fn.extend( {	hover: function( fnOver, fnOut ) {		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );	}} );support.focusin = "onfocusin" in window;// Support: Firefox <=44// Firefox doesn't have focus(in | out) events// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787//// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1// focus(in | out) events fire after focus & blur events,// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857if ( !support.focusin ) {	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {		// Attach a single capturing handler on the document while someone wants focusin/focusout		var handler = function( event ) {			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );		};		jQuery.event.special[ fix ] = {			setup: function() {				var doc = this.ownerDocument || this,					attaches = dataPriv.access( doc, fix );				if ( !attaches ) {					doc.addEventListener( orig, handler, true );				}				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );			},			teardown: function() {				var doc = this.ownerDocument || this,					attaches = dataPriv.access( doc, fix ) - 1;				if ( !attaches ) {					doc.removeEventListener( orig, handler, true );					dataPriv.remove( doc, fix );				} else {					dataPriv.access( doc, fix, attaches );				}			}		};	} );}var location = window.location;var nonce = jQuery.now();var rquery = ( /\?/ );// Cross-browser xml parsingjQuery.parseXML = function( data ) {	var xml;	if ( !data || typeof data !== "string" ) {		return null;	}	// Support: IE 9 - 11 only	// IE throws on parseFromString with invalid input.	try {		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );	} catch ( e ) {		xml = undefined;	}	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {		jQuery.error( "Invalid XML: " + data );	}	return xml;};var	rbracket = /\[\]$/,	rCRLF = /\r?\n/g,	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,	rsubmittable = /^(?:input|select|textarea|keygen)/i;function buildParams( prefix, obj, traditional, add ) {	var name;	if ( Array.isArray( obj ) ) {		// Serialize array item.		jQuery.each( obj, function( i, v ) {			if ( traditional || rbracket.test( prefix ) ) {				// Treat each array item as a scalar.				add( prefix, v );			} else {				// Item is non-scalar (array or object), encode its numeric index.				buildParams(					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",					v,					traditional,					add				);			}		} );	} else if ( !traditional && jQuery.type( obj ) === "object" ) {		// Serialize object item.		for ( name in obj ) {			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );		}	} else {		// Serialize scalar item.		add( prefix, obj );	}}// Serialize an array of form elements or a set of// key/values into a query stringjQuery.param = function( a, traditional ) {	var prefix,		s = [],		add = function( key, valueOrFunction ) {			// If value is a function, invoke it and use its return value			var value = jQuery.isFunction( valueOrFunction ) ?				valueOrFunction() :				valueOrFunction;			s[ s.length ] = encodeURIComponent( key ) + "=" +				encodeURIComponent( value == null ? "" : value );		};	// If an array was passed in, assume that it is an array of form elements.	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {		// Serialize the form elements		jQuery.each( a, function() {			add( this.name, this.value );		} );	} else {		// If traditional, encode the "old" way (the way 1.3.2 or older		// did it), otherwise encode params recursively.		for ( prefix in a ) {			buildParams( prefix, a[ prefix ], traditional, add );		}	}	// Return the resulting serialization	return s.join( "&" );};jQuery.fn.extend( {	serialize: function() {		return jQuery.param( this.serializeArray() );	},	serializeArray: function() {		return this.map( function() {			// Can add propHook for "elements" to filter or add form elements			var elements = jQuery.prop( this, "elements" );			return elements ? jQuery.makeArray( elements ) : this;		} )		.filter( function() {			var type = this.type;			// Use .is( ":disabled" ) so that fieldset[disabled] works			return this.name && !jQuery( this ).is( ":disabled" ) &&				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&				( this.checked || !rcheckableType.test( type ) );		} )		.map( function( i, elem ) {			var val = jQuery( this ).val();			if ( val == null ) {				return null;			}			if ( Array.isArray( val ) ) {				return jQuery.map( val, function( val ) {					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };				} );			}			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };		} ).get();	}} );var	r20 = /%20/g,	rhash = /#.*$/,	rantiCache = /([?&])_=[^&]*/,	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,	// #7653, #8125, #8152: local protocol detection	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,	rnoContent = /^(?:GET|HEAD)$/,	rprotocol = /^\/\//,	/* Prefilters	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)	 * 2) These are called:	 *    - BEFORE asking for a transport	 *    - AFTER param serialization (s.data is a string if s.processData is true)	 * 3) key is the dataType	 * 4) the catchall symbol "*" can be used	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed	 */	prefilters = {},	/* Transports bindings	 * 1) key is the dataType	 * 2) the catchall symbol "*" can be used	 * 3) selection will start with transport dataType and THEN go to "*" if needed	 */	transports = {},	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression	allTypes = "*/".concat( "*" ),	// Anchor tag for parsing the document origin	originAnchor = document.createElement( "a" );	originAnchor.href = location.href;// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransportfunction addToPrefiltersOrTransports( structure ) {	// dataTypeExpression is optional and defaults to "*"	return function( dataTypeExpression, func ) {		if ( typeof dataTypeExpression !== "string" ) {			func = dataTypeExpression;			dataTypeExpression = "*";		}		var dataType,			i = 0,			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];		if ( jQuery.isFunction( func ) ) {			// For each dataType in the dataTypeExpression			while ( ( dataType = dataTypes[ i++ ] ) ) {				// Prepend if requested				if ( dataType[ 0 ] === "+" ) {					dataType = dataType.slice( 1 ) || "*";					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );				// Otherwise append				} else {					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );				}			}		}	};}// Base inspection function for prefilters and transportsfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {	var inspected = {},		seekingTransport = ( structure === transports );	function inspect( dataType ) {		var selected;		inspected[ dataType ] = true;		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );			if ( typeof dataTypeOrTransport === "string" &&				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {				options.dataTypes.unshift( dataTypeOrTransport );				inspect( dataTypeOrTransport );				return false;			} else if ( seekingTransport ) {				return !( selected = dataTypeOrTransport );			}		} );		return selected;	}	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );}// A special extend for ajax options// that takes "flat" options (not to be deep extended)// Fixes #9887function ajaxExtend( target, src ) {	var key, deep,		flatOptions = jQuery.ajaxSettings.flatOptions || {};	for ( key in src ) {		if ( src[ key ] !== undefined ) {			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];		}	}	if ( deep ) {		jQuery.extend( true, target, deep );	}	return target;}/* Handles responses to an ajax request: * - finds the right dataType (mediates between content-type and expected dataType) * - returns the corresponding response */function ajaxHandleResponses( s, jqXHR, responses ) {	var ct, type, finalDataType, firstDataType,		contents = s.contents,		dataTypes = s.dataTypes;	// Remove auto dataType and get content-type in the process	while ( dataTypes[ 0 ] === "*" ) {		dataTypes.shift();		if ( ct === undefined ) {			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );		}	}	// Check if we're dealing with a known content-type	if ( ct ) {		for ( type in contents ) {			if ( contents[ type ] && contents[ type ].test( ct ) ) {				dataTypes.unshift( type );				break;			}		}	}	// Check to see if we have a response for the expected dataType	if ( dataTypes[ 0 ] in responses ) {		finalDataType = dataTypes[ 0 ];	} else {		// Try convertible dataTypes		for ( type in responses ) {			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {				finalDataType = type;				break;			}			if ( !firstDataType ) {				firstDataType = type;			}		}		// Or just use first one		finalDataType = finalDataType || firstDataType;	}	// If we found a dataType	// We add the dataType to the list if needed	// and return the corresponding response	if ( finalDataType ) {		if ( finalDataType !== dataTypes[ 0 ] ) {			dataTypes.unshift( finalDataType );		}		return responses[ finalDataType ];	}}/* Chain conversions given the request and the original response * Also sets the responseXXX fields on the jqXHR instance */function ajaxConvert( s, response, jqXHR, isSuccess ) {	var conv2, current, conv, tmp, prev,		converters = {},		// Work with a copy of dataTypes in case we need to modify it for conversion		dataTypes = s.dataTypes.slice();	// Create converters map with lowercased keys	if ( dataTypes[ 1 ] ) {		for ( conv in s.converters ) {			converters[ conv.toLowerCase() ] = s.converters[ conv ];		}	}	current = dataTypes.shift();	// Convert to each sequential dataType	while ( current ) {		if ( s.responseFields[ current ] ) {			jqXHR[ s.responseFields[ current ] ] = response;		}		// Apply the dataFilter if provided		if ( !prev && isSuccess && s.dataFilter ) {			response = s.dataFilter( response, s.dataType );		}		prev = current;		current = dataTypes.shift();		if ( current ) {			// There's only work to do if current dataType is non-auto			if ( current === "*" ) {				current = prev;			// Convert response if prev dataType is non-auto and differs from current			} else if ( prev !== "*" && prev !== current ) {				// Seek a direct converter				conv = converters[ prev + " " + current ] || converters[ "* " + current ];				// If none found, seek a pair				if ( !conv ) {					for ( conv2 in converters ) {						// If conv2 outputs current						tmp = conv2.split( " " );						if ( tmp[ 1 ] === current ) {							// If prev can be converted to accepted input							conv = converters[ prev + " " + tmp[ 0 ] ] ||								converters[ "* " + tmp[ 0 ] ];							if ( conv ) {								// Condense equivalence converters								if ( conv === true ) {									conv = converters[ conv2 ];								// Otherwise, insert the intermediate dataType								} else if ( converters[ conv2 ] !== true ) {									current = tmp[ 0 ];									dataTypes.unshift( tmp[ 1 ] );								}								break;							}						}					}				}				// Apply converter (if not an equivalence)				if ( conv !== true ) {					// Unless errors are allowed to bubble, catch and return them					if ( conv && s.throws ) {						response = conv( response );					} else {						try {							response = conv( response );						} catch ( e ) {							return {								state: "parsererror",								error: conv ? e : "No conversion from " + prev + " to " + current							};						}					}				}			}		}	}	return { state: "success", data: response };}jQuery.extend( {	// Counter for holding the number of active queries	active: 0,	// Last-Modified header cache for next request	lastModified: {},	etag: {},	ajaxSettings: {		url: location.href,		type: "GET",		isLocal: rlocalProtocol.test( location.protocol ),		global: true,		processData: true,		async: true,		contentType: "application/x-www-form-urlencoded; charset=UTF-8",		/*		timeout: 0,		data: null,		dataType: null,		username: null,		password: null,		cache: null,		throws: false,		traditional: false,		headers: {},		*/		accepts: {			"*": allTypes,			text: "text/plain",			html: "text/html",			xml: "application/xml, text/xml",			json: "application/json, text/javascript"		},		contents: {			xml: /\bxml\b/,			html: /\bhtml/,			json: /\bjson\b/		},		responseFields: {			xml: "responseXML",			text: "responseText",			json: "responseJSON"		},		// Data converters		// Keys separate source (or catchall "*") and destination types with a single space		converters: {			// Convert anything to text			"* text": String,			// Text to html (true = no transformation)			"text html": true,			// Evaluate text as a json expression			"text json": JSON.parse,			// Parse text as xml			"text xml": jQuery.parseXML		},		// For options that shouldn't be deep extended:		// you can add your own custom options here if		// and when you create one that shouldn't be		// deep extended (see ajaxExtend)		flatOptions: {			url: true,			context: true		}	},	// Creates a full fledged settings object into target	// with both ajaxSettings and settings fields.	// If target is omitted, writes into ajaxSettings.	ajaxSetup: function( target, settings ) {		return settings ?			// Building a settings object			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :			// Extending ajaxSettings			ajaxExtend( jQuery.ajaxSettings, target );	},	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),	ajaxTransport: addToPrefiltersOrTransports( transports ),	// Main method	ajax: function( url, options ) {		// If url is an object, simulate pre-1.5 signature		if ( typeof url === "object" ) {			options = url;			url = undefined;		}		// Force options to be an object		options = options || {};		var transport,			// URL without anti-cache param			cacheURL,			// Response headers			responseHeadersString,			responseHeaders,			// timeout handle			timeoutTimer,			// Url cleanup var			urlAnchor,			// Request state (becomes false upon send and true upon completion)			completed,			// To know if global events are to be dispatched			fireGlobals,			// Loop variable			i,			// uncached part of the url			uncached,			// Create the final options object			s = jQuery.ajaxSetup( {}, options ),			// Callbacks context			callbackContext = s.context || s,			// Context for global events is callbackContext if it is a DOM node or jQuery collection			globalEventContext = s.context &&				( callbackContext.nodeType || callbackContext.jquery ) ?					jQuery( callbackContext ) :					jQuery.event,			// Deferreds			deferred = jQuery.Deferred(),			completeDeferred = jQuery.Callbacks( "once memory" ),			// Status-dependent callbacks			statusCode = s.statusCode || {},			// Headers (they are sent all at once)			requestHeaders = {},			requestHeadersNames = {},			// Default abort message			strAbort = "canceled",			// Fake xhr			jqXHR = {				readyState: 0,				// Builds headers hashtable if needed				getResponseHeader: function( key ) {					var match;					if ( completed ) {						if ( !responseHeaders ) {							responseHeaders = {};							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];							}						}						match = responseHeaders[ key.toLowerCase() ];					}					return match == null ? null : match;				},				// Raw string				getAllResponseHeaders: function() {					return completed ? responseHeadersString : null;				},				// Caches the header				setRequestHeader: function( name, value ) {					if ( completed == null ) {						name = requestHeadersNames[ name.toLowerCase() ] =							requestHeadersNames[ name.toLowerCase() ] || name;						requestHeaders[ name ] = value;					}					return this;				},				// Overrides response content-type header				overrideMimeType: function( type ) {					if ( completed == null ) {						s.mimeType = type;					}					return this;				},				// Status-dependent callbacks				statusCode: function( map ) {					var code;					if ( map ) {						if ( completed ) {							// Execute the appropriate callbacks							jqXHR.always( map[ jqXHR.status ] );						} else {							// Lazy-add the new callbacks in a way that preserves old ones							for ( code in map ) {								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];							}						}					}					return this;				},				// Cancel the request				abort: function( statusText ) {					var finalText = statusText || strAbort;					if ( transport ) {						transport.abort( finalText );					}					done( 0, finalText );					return this;				}			};		// Attach deferreds		deferred.promise( jqXHR );		// Add protocol if not provided (prefilters might expect it)		// Handle falsy url in the settings object (#10093: consistency with old signature)		// We also use the url parameter if available		s.url = ( ( url || s.url || location.href ) + "" )			.replace( rprotocol, location.protocol + "//" );		// Alias method option to type as per ticket #12004		s.type = options.method || options.type || s.method || s.type;		// Extract dataTypes list		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];		// A cross-domain request is in order when the origin doesn't match the current origin.		if ( s.crossDomain == null ) {			urlAnchor = document.createElement( "a" );			// Support: IE <=8 - 11, Edge 12 - 13			// IE throws exception on accessing the href property if url is malformed,			// e.g. http://example.com:80x/			try {				urlAnchor.href = s.url;				// Support: IE <=8 - 11 only				// Anchor's host property isn't correctly set when s.url is relative				urlAnchor.href = urlAnchor.href;				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==					urlAnchor.protocol + "//" + urlAnchor.host;			} catch ( e ) {				// If there is an error parsing the URL, assume it is crossDomain,				// it can be rejected by the transport if it is invalid				s.crossDomain = true;			}		}		// Convert data if not already a string		if ( s.data && s.processData && typeof s.data !== "string" ) {			s.data = jQuery.param( s.data, s.traditional );		}		// Apply prefilters		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );		// If request was aborted inside a prefilter, stop there		if ( completed ) {			return jqXHR;		}		// We can fire global events as of now if asked to		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)		fireGlobals = jQuery.event && s.global;		// Watch for a new set of requests		if ( fireGlobals && jQuery.active++ === 0 ) {			jQuery.event.trigger( "ajaxStart" );		}		// Uppercase the type		s.type = s.type.toUpperCase();		// Determine if request has content		s.hasContent = !rnoContent.test( s.type );		// Save the URL in case we're toying with the If-Modified-Since		// and/or If-None-Match header later on		// Remove hash to simplify url manipulation		cacheURL = s.url.replace( rhash, "" );		// More options handling for requests with no content		if ( !s.hasContent ) {			// Remember the hash so we can put it back			uncached = s.url.slice( cacheURL.length );			// If data is available, append data to url			if ( s.data ) {				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;				// #9682: remove data so that it's not used in an eventual retry				delete s.data;			}			// Add or update anti-cache param if needed			if ( s.cache === false ) {				cacheURL = cacheURL.replace( rantiCache, "$1" );				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;			}			// Put hash and anti-cache on the URL that will be requested (gh-1732)			s.url = cacheURL + uncached;		// Change '%20' to '+' if this is encoded form body content (gh-2658)		} else if ( s.data && s.processData &&			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {			s.data = s.data.replace( r20, "+" );		}		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.		if ( s.ifModified ) {			if ( jQuery.lastModified[ cacheURL ] ) {				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );			}			if ( jQuery.etag[ cacheURL ] ) {				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );			}		}		// Set the correct header, if data is being sent		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {			jqXHR.setRequestHeader( "Content-Type", s.contentType );		}		// Set the Accepts header for the server, depending on the dataType		jqXHR.setRequestHeader(			"Accept",			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?				s.accepts[ s.dataTypes[ 0 ] ] +					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :				s.accepts[ "*" ]		);		// Check for headers option		for ( i in s.headers ) {			jqXHR.setRequestHeader( i, s.headers[ i ] );		}		// Allow custom headers/mimetypes and early abort		if ( s.beforeSend &&			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {			// Abort if not done already and return			return jqXHR.abort();		}		// Aborting is no longer a cancellation		strAbort = "abort";		// Install callbacks on deferreds		completeDeferred.add( s.complete );		jqXHR.done( s.success );		jqXHR.fail( s.error );		// Get transport		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );		// If no transport, we auto-abort		if ( !transport ) {			done( -1, "No Transport" );		} else {			jqXHR.readyState = 1;			// Send global event			if ( fireGlobals ) {				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );			}			// If request was aborted inside ajaxSend, stop there			if ( completed ) {				return jqXHR;			}			// Timeout			if ( s.async && s.timeout > 0 ) {				timeoutTimer = window.setTimeout( function() {					jqXHR.abort( "timeout" );				}, s.timeout );			}			try {				completed = false;				transport.send( requestHeaders, done );			} catch ( e ) {				// Rethrow post-completion exceptions				if ( completed ) {					throw e;				}				// Propagate others as results				done( -1, e );			}		}		// Callback for when everything is done		function done( status, nativeStatusText, responses, headers ) {			var isSuccess, success, error, response, modified,				statusText = nativeStatusText;			// Ignore repeat invocations			if ( completed ) {				return;			}			completed = true;			// Clear timeout if it exists			if ( timeoutTimer ) {				window.clearTimeout( timeoutTimer );			}			// Dereference transport for early garbage collection			// (no matter how long the jqXHR object will be used)			transport = undefined;			// Cache response headers			responseHeadersString = headers || "";			// Set readyState			jqXHR.readyState = status > 0 ? 4 : 0;			// Determine if successful			isSuccess = status >= 200 && status < 300 || status === 304;			// Get response data			if ( responses ) {				response = ajaxHandleResponses( s, jqXHR, responses );			}			// Convert no matter what (that way responseXXX fields are always set)			response = ajaxConvert( s, response, jqXHR, isSuccess );			// If successful, handle type chaining			if ( isSuccess ) {				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.				if ( s.ifModified ) {					modified = jqXHR.getResponseHeader( "Last-Modified" );					if ( modified ) {						jQuery.lastModified[ cacheURL ] = modified;					}					modified = jqXHR.getResponseHeader( "etag" );					if ( modified ) {						jQuery.etag[ cacheURL ] = modified;					}				}				// if no content				if ( status === 204 || s.type === "HEAD" ) {					statusText = "nocontent";				// if not modified				} else if ( status === 304 ) {					statusText = "notmodified";				// If we have data, let's convert it				} else {					statusText = response.state;					success = response.data;					error = response.error;					isSuccess = !error;				}			} else {				// Extract error from statusText and normalize for non-aborts				error = statusText;				if ( status || !statusText ) {					statusText = "error";					if ( status < 0 ) {						status = 0;					}				}			}			// Set data for the fake xhr object			jqXHR.status = status;			jqXHR.statusText = ( nativeStatusText || statusText ) + "";			// Success/Error			if ( isSuccess ) {				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );			} else {				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );			}			// Status-dependent callbacks			jqXHR.statusCode( statusCode );			statusCode = undefined;			if ( fireGlobals ) {				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",					[ jqXHR, s, isSuccess ? success : error ] );			}			// Complete			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );			if ( fireGlobals ) {				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );				// Handle the global AJAX counter				if ( !( --jQuery.active ) ) {					jQuery.event.trigger( "ajaxStop" );				}			}		}		return jqXHR;	},	getJSON: function( url, data, callback ) {		return jQuery.get( url, data, callback, "json" );	},	getScript: function( url, callback ) {		return jQuery.get( url, undefined, callback, "script" );	}} );jQuery.each( [ "get", "post" ], function( i, method ) {	jQuery[ method ] = function( url, data, callback, type ) {		// Shift arguments if data argument was omitted		if ( jQuery.isFunction( data ) ) {			type = type || callback;			callback = data;			data = undefined;		}		// The url can be an options object (which then must have .url)		return jQuery.ajax( jQuery.extend( {			url: url,			type: method,			dataType: type,			data: data,			success: callback		}, jQuery.isPlainObject( url ) && url ) );	};} );jQuery._evalUrl = function( url ) {	return jQuery.ajax( {		url: url,		// Make this explicit, since user can override this through ajaxSetup (#11264)		type: "GET",		dataType: "script",		cache: true,		async: false,		global: false,		"throws": true	} );};jQuery.fn.extend( {	wrapAll: function( html ) {		var wrap;		if ( this[ 0 ] ) {			if ( jQuery.isFunction( html ) ) {				html = html.call( this[ 0 ] );			}			// The elements to wrap the target around			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );			if ( this[ 0 ].parentNode ) {				wrap.insertBefore( this[ 0 ] );			}			wrap.map( function() {				var elem = this;				while ( elem.firstElementChild ) {					elem = elem.firstElementChild;				}				return elem;			} ).append( this );		}		return this;	},	wrapInner: function( html ) {		if ( jQuery.isFunction( html ) ) {			return this.each( function( i ) {				jQuery( this ).wrapInner( html.call( this, i ) );			} );		}		return this.each( function() {			var self = jQuery( this ),				contents = self.contents();			if ( contents.length ) {				contents.wrapAll( html );			} else {				self.append( html );			}		} );	},	wrap: function( html ) {		var isFunction = jQuery.isFunction( html );		return this.each( function( i ) {			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );		} );	},	unwrap: function( selector ) {		this.parent( selector ).not( "body" ).each( function() {			jQuery( this ).replaceWith( this.childNodes );		} );		return this;	}} );jQuery.expr.pseudos.hidden = function( elem ) {	return !jQuery.expr.pseudos.visible( elem );};jQuery.expr.pseudos.visible = function( elem ) {	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );};jQuery.ajaxSettings.xhr = function() {	try {		return new window.XMLHttpRequest();	} catch ( e ) {}};var xhrSuccessStatus = {		// File protocol always yields status code 0, assume 200		0: 200,		// Support: IE <=9 only		// #1450: sometimes IE returns 1223 when it should be 204		1223: 204	},	xhrSupported = jQuery.ajaxSettings.xhr();support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );support.ajax = xhrSupported = !!xhrSupported;jQuery.ajaxTransport( function( options ) {	var callback, errorCallback;	// Cross domain only allowed if supported through XMLHttpRequest	if ( support.cors || xhrSupported && !options.crossDomain ) {		return {			send: function( headers, complete ) {				var i,					xhr = options.xhr();				xhr.open(					options.type,					options.url,					options.async,					options.username,					options.password				);				// Apply custom fields if provided				if ( options.xhrFields ) {					for ( i in options.xhrFields ) {						xhr[ i ] = options.xhrFields[ i ];					}				}				// Override mime type if needed				if ( options.mimeType && xhr.overrideMimeType ) {					xhr.overrideMimeType( options.mimeType );				}				// X-Requested-With header				// For cross-domain requests, seeing as conditions for a preflight are				// akin to a jigsaw puzzle, we simply never set it to be sure.				// (it can always be set on a per-request basis or even using ajaxSetup)				// For same-domain requests, won't change header if already provided.				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {					headers[ "X-Requested-With" ] = "XMLHttpRequest";				}				// Set headers				for ( i in headers ) {					xhr.setRequestHeader( i, headers[ i ] );				}				// Callback				callback = function( type ) {					return function() {						if ( callback ) {							callback = errorCallback = xhr.onload =								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;							if ( type === "abort" ) {								xhr.abort();							} else if ( type === "error" ) {								// Support: IE <=9 only								// On a manual native abort, IE9 throws								// errors on any property access that is not readyState								if ( typeof xhr.status !== "number" ) {									complete( 0, "error" );								} else {									complete(										// File: protocol always yields status 0; see #8605, #14207										xhr.status,										xhr.statusText									);								}							} else {								complete(									xhrSuccessStatus[ xhr.status ] || xhr.status,									xhr.statusText,									// Support: IE <=9 only									// IE9 has no XHR2 but throws on binary (trac-11426)									// For XHR2 non-text, let the caller handle it (gh-2498)									( xhr.responseType || "text" ) !== "text"  ||									typeof xhr.responseText !== "string" ?										{ binary: xhr.response } :										{ text: xhr.responseText },									xhr.getAllResponseHeaders()								);							}						}					};				};				// Listen to events				xhr.onload = callback();				errorCallback = xhr.onerror = callback( "error" );				// Support: IE 9 only				// Use onreadystatechange to replace onabort				// to handle uncaught aborts				if ( xhr.onabort !== undefined ) {					xhr.onabort = errorCallback;				} else {					xhr.onreadystatechange = function() {						// Check readyState before timeout as it changes						if ( xhr.readyState === 4 ) {							// Allow onerror to be called first,							// but that will not handle a native abort							// Also, save errorCallback to a variable							// as xhr.onerror cannot be accessed							window.setTimeout( function() {								if ( callback ) {									errorCallback();								}							} );						}					};				}				// Create the abort callback				callback = callback( "abort" );				try {					// Do send the request (this may raise an exception)					xhr.send( options.hasContent && options.data || null );				} catch ( e ) {					// #14683: Only rethrow if this hasn't been notified as an error yet					if ( callback ) {						throw e;					}				}			},			abort: function() {				if ( callback ) {					callback();				}			}		};	}} );// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)jQuery.ajaxPrefilter( function( s ) {	if ( s.crossDomain ) {		s.contents.script = false;	}} );// Install script dataTypejQuery.ajaxSetup( {	accepts: {		script: "text/javascript, application/javascript, " +			"application/ecmascript, application/x-ecmascript"	},	contents: {		script: /\b(?:java|ecma)script\b/	},	converters: {		"text script": function( text ) {			jQuery.globalEval( text );			return text;		}	}} );// Handle cache's special case and crossDomainjQuery.ajaxPrefilter( "script", function( s ) {	if ( s.cache === undefined ) {		s.cache = false;	}	if ( s.crossDomain ) {		s.type = "GET";	}} );// Bind script tag hack transportjQuery.ajaxTransport( "script", function( s ) {	// This transport only deals with cross domain requests	if ( s.crossDomain ) {		var script, callback;		return {			send: function( _, complete ) {				script = jQuery( "<script>" ).prop( {					charset: s.scriptCharset,					src: s.url				} ).on(					"load error",					callback = function( evt ) {						script.remove();						callback = null;						if ( evt ) {							complete( evt.type === "error" ? 404 : 200, evt.type );						}					}				);				// Use native DOM manipulation to avoid our domManip AJAX trickery				document.head.appendChild( script[ 0 ] );			},			abort: function() {				if ( callback ) {					callback();				}			}		};	}} );var oldCallbacks = [],	rjsonp = /(=)\?(?=&|$)|\?\?/;// Default jsonp settingsjQuery.ajaxSetup( {	jsonp: "callback",	jsonpCallback: function() {		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );		this[ callback ] = true;		return callback;	}} );// Detect, normalize options and install callbacks for jsonp requestsjQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {	var callbackName, overwritten, responseContainer,		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?			"url" :			typeof s.data === "string" &&				( s.contentType || "" )					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&				rjsonp.test( s.data ) && "data"		);	// Handle iff the expected data type is "jsonp" or we have a parameter to set	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {		// Get callback name, remembering preexisting value associated with it		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?			s.jsonpCallback() :			s.jsonpCallback;		// Insert callback into url or form data		if ( jsonProp ) {			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );		} else if ( s.jsonp !== false ) {			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;		}		// Use data converter to retrieve json after script execution		s.converters[ "script json" ] = function() {			if ( !responseContainer ) {				jQuery.error( callbackName + " was not called" );			}			return responseContainer[ 0 ];		};		// Force json dataType		s.dataTypes[ 0 ] = "json";		// Install callback		overwritten = window[ callbackName ];		window[ callbackName ] = function() {			responseContainer = arguments;		};		// Clean-up function (fires after converters)		jqXHR.always( function() {			// If previous value didn't exist - remove it			if ( overwritten === undefined ) {				jQuery( window ).removeProp( callbackName );			// Otherwise restore preexisting value			} else {				window[ callbackName ] = overwritten;			}			// Save back as free			if ( s[ callbackName ] ) {				// Make sure that re-using the options doesn't screw things around				s.jsonpCallback = originalSettings.jsonpCallback;				// Save the callback name for future use				oldCallbacks.push( callbackName );			}			// Call if it was a function and we have a response			if ( responseContainer && jQuery.isFunction( overwritten ) ) {				overwritten( responseContainer[ 0 ] );			}			responseContainer = overwritten = undefined;		} );		// Delegate to script		return "script";	}} );// Support: Safari 8 only// In Safari 8 documents created via document.implementation.createHTMLDocument// collapse sibling forms: the second one becomes a child of the first one.// Because of that, this security measure has to be disabled in Safari 8.// https://bugs.webkit.org/show_bug.cgi?id=137337support.createHTMLDocument = ( function() {	var body = document.implementation.createHTMLDocument( "" ).body;	body.innerHTML = "<form></form><form></form>";	return body.childNodes.length === 2;} )();// Argument "data" should be string of html// context (optional): If specified, the fragment will be created in this context,// defaults to document// keepScripts (optional): If true, will include scripts passed in the html stringjQuery.parseHTML = function( data, context, keepScripts ) {	if ( typeof data !== "string" ) {		return [];	}	if ( typeof context === "boolean" ) {		keepScripts = context;		context = false;	}	var base, parsed, scripts;	if ( !context ) {		// Stop scripts or inline event handlers from being executed immediately		// by using document.implementation		if ( support.createHTMLDocument ) {			context = document.implementation.createHTMLDocument( "" );			// Set the base href for the created document			// so any parsed elements with URLs			// are based on the document's URL (gh-2965)			base = context.createElement( "base" );			base.href = document.location.href;			context.head.appendChild( base );		} else {			context = document;		}	}	parsed = rsingleTag.exec( data );	scripts = !keepScripts && [];	// Single tag	if ( parsed ) {		return [ context.createElement( parsed[ 1 ] ) ];	}	parsed = buildFragment( [ data ], context, scripts );	if ( scripts && scripts.length ) {		jQuery( scripts ).remove();	}	return jQuery.merge( [], parsed.childNodes );};/** * Load a url into a page */jQuery.fn.load = function( url, params, callback ) {	var selector, type, response,		self = this,		off = url.indexOf( " " );	if ( off > -1 ) {		selector = stripAndCollapse( url.slice( off ) );		url = url.slice( 0, off );	}	// If it's a function	if ( jQuery.isFunction( params ) ) {		// We assume that it's the callback		callback = params;		params = undefined;	// Otherwise, build a param string	} else if ( params && typeof params === "object" ) {		type = "POST";	}	// If we have elements to modify, make the request	if ( self.length > 0 ) {		jQuery.ajax( {			url: url,			// If "type" variable is undefined, then "GET" method will be used.			// Make value of this field explicit since			// user can override it through ajaxSetup method			type: type || "GET",			dataType: "html",			data: params		} ).done( function( responseText ) {			// Save response for use in complete callback			response = arguments;			self.html( selector ?				// If a selector was specified, locate the right elements in a dummy div				// Exclude scripts to avoid IE 'Permission Denied' errors				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :				// Otherwise use the full result				responseText );		// If the request succeeds, this function gets "data", "status", "jqXHR"		// but they are ignored because response was set above.		// If it fails, this function gets "jqXHR", "status", "error"		} ).always( callback && function( jqXHR, status ) {			self.each( function() {				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );			} );		} );	}	return this;};// Attach a bunch of functions for handling common AJAX eventsjQuery.each( [	"ajaxStart",	"ajaxStop",	"ajaxComplete",	"ajaxError",	"ajaxSuccess",	"ajaxSend"], function( i, type ) {	jQuery.fn[ type ] = function( fn ) {		return this.on( type, fn );	};} );jQuery.expr.pseudos.animated = function( elem ) {	return jQuery.grep( jQuery.timers, function( fn ) {		return elem === fn.elem;	} ).length;};jQuery.offset = {	setOffset: function( elem, options, i ) {		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,			position = jQuery.css( elem, "position" ),			curElem = jQuery( elem ),			props = {};		// Set position first, in-case top/left are set even on static elem		if ( position === "static" ) {			elem.style.position = "relative";		}		curOffset = curElem.offset();		curCSSTop = jQuery.css( elem, "top" );		curCSSLeft = jQuery.css( elem, "left" );		calculatePosition = ( position === "absolute" || position === "fixed" ) &&			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;		// Need to be able to calculate position if either		// top or left is auto and position is either absolute or fixed		if ( calculatePosition ) {			curPosition = curElem.position();			curTop = curPosition.top;			curLeft = curPosition.left;		} else {			curTop = parseFloat( curCSSTop ) || 0;			curLeft = parseFloat( curCSSLeft ) || 0;		}		if ( jQuery.isFunction( options ) ) {			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );		}		if ( options.top != null ) {			props.top = ( options.top - curOffset.top ) + curTop;		}		if ( options.left != null ) {			props.left = ( options.left - curOffset.left ) + curLeft;		}		if ( "using" in options ) {			options.using.call( elem, props );		} else {			curElem.css( props );		}	}};jQuery.fn.extend( {	offset: function( options ) {		// Preserve chaining for setter		if ( arguments.length ) {			return options === undefined ?				this :				this.each( function( i ) {					jQuery.offset.setOffset( this, options, i );				} );		}		var doc, docElem, rect, win,			elem = this[ 0 ];		if ( !elem ) {			return;		}		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)		// Support: IE <=11 only		// Running getBoundingClientRect on a		// disconnected node in IE throws an error		if ( !elem.getClientRects().length ) {			return { top: 0, left: 0 };		}		rect = elem.getBoundingClientRect();		doc = elem.ownerDocument;		docElem = doc.documentElement;		win = doc.defaultView;		return {			top: rect.top + win.pageYOffset - docElem.clientTop,			left: rect.left + win.pageXOffset - docElem.clientLeft		};	},	position: function() {		if ( !this[ 0 ] ) {			return;		}		var offsetParent, offset,			elem = this[ 0 ],			parentOffset = { top: 0, left: 0 };		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},		// because it is its only offset parent		if ( jQuery.css( elem, "position" ) === "fixed" ) {			// Assume getBoundingClientRect is there when computed position is fixed			offset = elem.getBoundingClientRect();		} else {			// Get *real* offsetParent			offsetParent = this.offsetParent();			// Get correct offsets			offset = this.offset();			if ( !nodeName( offsetParent[ 0 ], "html" ) ) {				parentOffset = offsetParent.offset();			}			// Add offsetParent borders			parentOffset = {				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )			};		}		// Subtract parent offsets and element margins		return {			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )		};	},	// This method will return documentElement in the following cases:	// 1) For the element inside the iframe without offsetParent, this method will return	//    documentElement of the parent window	// 2) For the hidden or detached element	// 3) For body or html element, i.e. in case of the html node - it will return itself	//	// but those exceptions were never presented as a real life use-cases	// and might be considered as more preferable results.	//	// This logic, however, is not guaranteed and can change at any point in the future	offsetParent: function() {		return this.map( function() {			var offsetParent = this.offsetParent;			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {				offsetParent = offsetParent.offsetParent;			}			return offsetParent || documentElement;		} );	}} );// Create scrollLeft and scrollTop methodsjQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {	var top = "pageYOffset" === prop;	jQuery.fn[ method ] = function( val ) {		return access( this, function( elem, method, val ) {			// Coalesce documents and windows			var win;			if ( jQuery.isWindow( elem ) ) {				win = elem;			} else if ( elem.nodeType === 9 ) {				win = elem.defaultView;			}			if ( val === undefined ) {				return win ? win[ prop ] : elem[ method ];			}			if ( win ) {				win.scrollTo(					!top ? val : win.pageXOffset,					top ? val : win.pageYOffset				);			} else {				elem[ method ] = val;			}		}, method, val, arguments.length );	};} );// Support: Safari <=7 - 9.1, Chrome <=37 - 49// Add the top/left cssHooks using jQuery.fn.position// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347// getComputedStyle returns percent when specified for top/left/bottom/right;// rather than make the css module depend on the offset module, just check for it herejQuery.each( [ "top", "left" ], function( i, prop ) {	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,		function( elem, computed ) {			if ( computed ) {				computed = curCSS( elem, prop );				// If curCSS returns percentage, fallback to offset				return rnumnonpx.test( computed ) ?					jQuery( elem ).position()[ prop ] + "px" :					computed;			}		}	);} );// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methodsjQuery.each( { Height: "height", Width: "width" }, function( name, type ) {	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },		function( defaultExtra, funcName ) {		// Margin is only for outerHeight, outerWidth		jQuery.fn[ funcName ] = function( margin, value ) {			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );			return access( this, function( elem, type, value ) {				var doc;				if ( jQuery.isWindow( elem ) ) {					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)					return funcName.indexOf( "outer" ) === 0 ?						elem[ "inner" + name ] :						elem.document.documentElement[ "client" + name ];				}				// Get document width or height				if ( elem.nodeType === 9 ) {					doc = elem.documentElement;					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],					// whichever is greatest					return Math.max(						elem.body[ "scroll" + name ], doc[ "scroll" + name ],						elem.body[ "offset" + name ], doc[ "offset" + name ],						doc[ "client" + name ]					);				}				return value === undefined ?					// Get width or height on the element, requesting but not forcing parseFloat					jQuery.css( elem, type, extra ) :					// Set width or height on the element					jQuery.style( elem, type, value, extra );			}, type, chainable ? margin : undefined, chainable );		};	} );} );jQuery.fn.extend( {	bind: function( types, data, fn ) {		return this.on( types, null, data, fn );	},	unbind: function( types, fn ) {		return this.off( types, null, fn );	},	delegate: function( selector, types, data, fn ) {		return this.on( types, selector, data, fn );	},	undelegate: function( selector, types, fn ) {		// ( namespace ) or ( selector, types [, fn] )		return arguments.length === 1 ?			this.off( selector, "**" ) :			this.off( types, selector || "**", fn );	}} );jQuery.holdReady = function( hold ) {	if ( hold ) {		jQuery.readyWait++;	} else {		jQuery.ready( true );	}};jQuery.isArray = Array.isArray;jQuery.parseJSON = JSON.parse;jQuery.nodeName = nodeName;// Register as a named AMD module, since jQuery can be concatenated with other// files that may use define, but not via a proper concatenation script that// understands anonymous AMD modules. A named AMD is safest and most robust// way to register. Lowercase jquery is used because AMD module names are// derived from file names, and jQuery is normally delivered in a lowercase// file name. Do this after creating the global so that if an AMD module wants// to call noConflict to hide this version of jQuery, it will work.// Note that for maximum portability, libraries that are not jQuery should// declare themselves as anonymous modules, and avoid setting a global if an// AMD loader is present. jQuery is a special case. For more information, see// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anonif ( typeof define === "function" && define.amd ) {	define( "jquery", [], function() {		return jQuery;	} );}var	// Map over jQuery in case of overwrite	_jQuery = window.jQuery,	// Map over the $ in case of overwrite	_$ = window.$;jQuery.noConflict = function( deep ) {	if ( window.$ === jQuery ) {		window.$ = _$;	}	if ( deep && window.jQuery === jQuery ) {		window.jQuery = _jQuery;	}	return jQuery;};// Expose jQuery and $ identifiers, even in AMD// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)// and CommonJS for browser emulators (#13566)if ( !noGlobal ) {	window.jQuery = window.$ = jQuery;}return jQuery;} );/*! * jQuery JavaScript Library v2.2.4 * http://jquery.com/ * * Includes Sizzle.js * http://sizzlejs.com/ * * Copyright jQuery Foundation and other contributors * Released under the MIT license * http://jquery.org/license * * Date: 2016-05-20T17:23Z */(function( global, factory ) {	if ( typeof module === "object" && typeof module.exports === "object" ) {		// For CommonJS and CommonJS-like environments where a proper `window`		// is present, execute the factory and get jQuery.		// For environments that do not have a `window` with a `document`		// (such as Node.js), expose a factory as module.exports.		// This accentuates the need for the creation of a real `window`.		// e.g. var jQuery = require("jquery")(window);		// See ticket #14549 for more info.		module.exports = global.document ?			factory( global, true ) :			function( w ) {				if ( !w.document ) {					throw new Error( "jQuery requires a window with a document" );				}				return factory( w );			};	} else {		factory( global );	}// Pass this if window is not defined yet}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {// Support: Firefox 18+// Can't be in strict mode, several libs including ASP.NET trace// the stack via arguments.caller.callee and Firefox dies if// you try to trace through "use strict" call chains. (#13335)//"use strict";var arr = [];var document = window.document;var slice = arr.slice;var concat = arr.concat;var push = arr.push;var indexOf = arr.indexOf;var class2type = {};var toString = class2type.toString;var hasOwn = class2type.hasOwnProperty;var support = {};var	version = "2.2.4",	// Define a local copy of jQuery	jQuery = function( selector, context ) {		// The jQuery object is actually just the init constructor 'enhanced'		// Need init if jQuery is called (just allow error to be thrown if not included)		return new jQuery.fn.init( selector, context );	},	// Support: Android<4.1	// Make sure we trim BOM and NBSP	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,	// Matches dashed string for camelizing	rmsPrefix = /^-ms-/,	rdashAlpha = /-([\da-z])/gi,	// Used by jQuery.camelCase as callback to replace()	fcamelCase = function( all, letter ) {		return letter.toUpperCase();	};jQuery.fn = jQuery.prototype = {	// The current version of jQuery being used	jquery: version,	constructor: jQuery,	// Start with an empty selector	selector: "",	// The default length of a jQuery object is 0	length: 0,	toArray: function() {		return slice.call( this );	},	// Get the Nth element in the matched element set OR	// Get the whole matched element set as a clean array	get: function( num ) {		return num != null ?			// Return just the one element from the set			( num < 0 ? this[ num + this.length ] : this[ num ] ) :			// Return all the elements in a clean array			slice.call( this );	},	// Take an array of elements and push it onto the stack	// (returning the new matched element set)	pushStack: function( elems ) {		// Build a new jQuery matched element set		var ret = jQuery.merge( this.constructor(), elems );		// Add the old object onto the stack (as a reference)		ret.prevObject = this;		ret.context = this.context;		// Return the newly-formed element set		return ret;	},	// Execute a callback for every element in the matched set.	each: function( callback ) {		return jQuery.each( this, callback );	},	map: function( callback ) {		return this.pushStack( jQuery.map( this, function( elem, i ) {			return callback.call( elem, i, elem );		} ) );	},	slice: function() {		return this.pushStack( slice.apply( this, arguments ) );	},	first: function() {		return this.eq( 0 );	},	last: function() {		return this.eq( -1 );	},	eq: function( i ) {		var len = this.length,			j = +i + ( i < 0 ? len : 0 );		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );	},	end: function() {		return this.prevObject || this.constructor();	},	// For internal use only.	// Behaves like an Array's method, not like a jQuery method.	push: push,	sort: arr.sort,	splice: arr.splice};jQuery.extend = jQuery.fn.extend = function() {	var options, name, src, copy, copyIsArray, clone,		target = arguments[ 0 ] || {},		i = 1,		length = arguments.length,		deep = false;	// Handle a deep copy situation	if ( typeof target === "boolean" ) {		deep = target;		// Skip the boolean and the target		target = arguments[ i ] || {};		i++;	}	// Handle case when target is a string or something (possible in deep copy)	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {		target = {};	}	// Extend jQuery itself if only one argument is passed	if ( i === length ) {		target = this;		i--;	}	for ( ; i < length; i++ ) {		// Only deal with non-null/undefined values		if ( ( options = arguments[ i ] ) != null ) {			// Extend the base object			for ( name in options ) {				src = target[ name ];				copy = options[ name ];				// Prevent never-ending loop				if ( target === copy ) {					continue;				}				// Recurse if we're merging plain objects or arrays				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||					( copyIsArray = jQuery.isArray( copy ) ) ) ) {					if ( copyIsArray ) {						copyIsArray = false;						clone = src && jQuery.isArray( src ) ? src : [];					} else {						clone = src && jQuery.isPlainObject( src ) ? src : {};					}					// Never move original objects, clone them					target[ name ] = jQuery.extend( deep, clone, copy );				// Don't bring in undefined values				} else if ( copy !== undefined ) {					target[ name ] = copy;				}			}		}	}	// Return the modified object	return target;};jQuery.extend( {	// Unique for each copy of jQuery on the page	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),	// Assume jQuery is ready without the ready module	isReady: true,	error: function( msg ) {		throw new Error( msg );	},	noop: function() {},	isFunction: function( obj ) {		return jQuery.type( obj ) === "function";	},	isArray: Array.isArray,	isWindow: function( obj ) {		return obj != null && obj === obj.window;	},	isNumeric: function( obj ) {		// parseFloat NaNs numeric-cast false positives (null|true|false|"")		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")		// subtraction forces infinities to NaN		// adding 1 corrects loss of precision from parseFloat (#15100)		var realStringObj = obj && obj.toString();		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;	},	isPlainObject: function( obj ) {		var key;		// Not plain objects:		// - Any object or value whose internal [[Class]] property is not "[object Object]"		// - DOM nodes		// - window		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {			return false;		}		// Not own constructor property must be Object		if ( obj.constructor &&				!hasOwn.call( obj, "constructor" ) &&				!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {			return false;		}		// Own properties are enumerated firstly, so to speed up,		// if last one is own, then all properties are own		for ( key in obj ) {}		return key === undefined || hasOwn.call( obj, key );	},	isEmptyObject: function( obj ) {		var name;		for ( name in obj ) {			return false;		}		return true;	},	type: function( obj ) {		if ( obj == null ) {			return obj + "";		}		// Support: Android<4.0, iOS<6 (functionish RegExp)		return typeof obj === "object" || typeof obj === "function" ?			class2type[ toString.call( obj ) ] || "object" :			typeof obj;	},	// Evaluates a script in a global context	globalEval: function( code ) {		var script,			indirect = eval;		code = jQuery.trim( code );		if ( code ) {			// If the code includes a valid, prologue position			// strict mode pragma, execute code by injecting a			// script tag into the document.			if ( code.indexOf( "use strict" ) === 1 ) {				script = document.createElement( "script" );				script.text = code;				document.head.appendChild( script ).parentNode.removeChild( script );			} else {				// Otherwise, avoid the DOM node creation, insertion				// and removal by using an indirect global eval				indirect( code );			}		}	},	// Convert dashed to camelCase; used by the css and data modules	// Support: IE9-11+	// Microsoft forgot to hump their vendor prefix (#9572)	camelCase: function( string ) {		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );	},	nodeName: function( elem, name ) {		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();	},	each: function( obj, callback ) {		var length, i = 0;		if ( isArrayLike( obj ) ) {			length = obj.length;			for ( ; i < length; i++ ) {				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {					break;				}			}		} else {			for ( i in obj ) {				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {					break;				}			}		}		return obj;	},	// Support: Android<4.1	trim: function( text ) {		return text == null ?			"" :			( text + "" ).replace( rtrim, "" );	},	// results is for internal usage only	makeArray: function( arr, results ) {		var ret = results || [];		if ( arr != null ) {			if ( isArrayLike( Object( arr ) ) ) {				jQuery.merge( ret,					typeof arr === "string" ?					[ arr ] : arr				);			} else {				push.call( ret, arr );			}		}		return ret;	},	inArray: function( elem, arr, i ) {		return arr == null ? -1 : indexOf.call( arr, elem, i );	},	merge: function( first, second ) {		var len = +second.length,			j = 0,			i = first.length;		for ( ; j < len; j++ ) {			first[ i++ ] = second[ j ];		}		first.length = i;		return first;	},	grep: function( elems, callback, invert ) {		var callbackInverse,			matches = [],			i = 0,			length = elems.length,			callbackExpect = !invert;		// Go through the array, only saving the items		// that pass the validator function		for ( ; i < length; i++ ) {			callbackInverse = !callback( elems[ i ], i );			if ( callbackInverse !== callbackExpect ) {				matches.push( elems[ i ] );			}		}		return matches;	},	// arg is for internal usage only	map: function( elems, callback, arg ) {		var length, value,			i = 0,			ret = [];		// Go through the array, translating each of the items to their new values		if ( isArrayLike( elems ) ) {			length = elems.length;			for ( ; i < length; i++ ) {				value = callback( elems[ i ], i, arg );				if ( value != null ) {					ret.push( value );				}			}		// Go through every key on the object,		} else {			for ( i in elems ) {				value = callback( elems[ i ], i, arg );				if ( value != null ) {					ret.push( value );				}			}		}		// Flatten any nested arrays		return concat.apply( [], ret );	},	// A global GUID counter for objects	guid: 1,	// Bind a function to a context, optionally partially applying any	// arguments.	proxy: function( fn, context ) {		var tmp, args, proxy;		if ( typeof context === "string" ) {			tmp = fn[ context ];			context = fn;			fn = tmp;		}		// Quick check to determine if target is callable, in the spec		// this throws a TypeError, but we will just return undefined.		if ( !jQuery.isFunction( fn ) ) {			return undefined;		}		// Simulated bind		args = slice.call( arguments, 2 );		proxy = function() {			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );		};		// Set the guid of unique handler to the same of original handler, so it can be removed		proxy.guid = fn.guid = fn.guid || jQuery.guid++;		return proxy;	},	now: Date.now,	// jQuery.support is not used in Core but other projects attach their	// properties to it so it needs to exist.	support: support} );// JSHint would error on this code due to the Symbol not being defined in ES5.// Defining this global in .jshintrc would create a danger of using the global// unguarded in another place, it seems safer to just disable JSHint for these// three lines./* jshint ignore: start */if ( typeof Symbol === "function" ) {	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];}/* jshint ignore: end */// Populate the class2type mapjQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),function( i, name ) {	class2type[ "[object " + name + "]" ] = name.toLowerCase();} );function isArrayLike( obj ) {	// Support: iOS 8.2 (not reproducible in simulator)	// `in` check used to prevent JIT error (gh-2145)	// hasOwn isn't used here due to false negatives	// regarding Nodelist length in IE	var length = !!obj && "length" in obj && obj.length,		type = jQuery.type( obj );	if ( type === "function" || jQuery.isWindow( obj ) ) {		return false;	}	return type === "array" || length === 0 ||		typeof length === "number" && length > 0 && ( length - 1 ) in obj;}var Sizzle =/*! * Sizzle CSS Selector Engine v2.2.1 * http://sizzlejs.com/ * * Copyright jQuery Foundation and other contributors * Released under the MIT license * http://jquery.org/license * * Date: 2015-10-17 */(function( window ) {var i,	support,	Expr,	getText,	isXML,	tokenize,	compile,	select,	outermostContext,	sortInput,	hasDuplicate,	// Local document vars	setDocument,	document,	docElem,	documentIsHTML,	rbuggyQSA,	rbuggyMatches,	matches,	contains,	// Instance-specific data	expando = "sizzle" + 1 * new Date(),	preferredDoc = window.document,	dirruns = 0,	done = 0,	classCache = createCache(),	tokenCache = createCache(),	compilerCache = createCache(),	sortOrder = function( a, b ) {		if ( a === b ) {			hasDuplicate = true;		}		return 0;	},	// General-purpose constants	MAX_NEGATIVE = 1 << 31,	// Instance methods	hasOwn = ({}).hasOwnProperty,	arr = [],	pop = arr.pop,	push_native = arr.push,	push = arr.push,	slice = arr.slice,	// Use a stripped-down indexOf as it's faster than native	// http://jsperf.com/thor-indexof-vs-for/5	indexOf = function( list, elem ) {		var i = 0,			len = list.length;		for ( ; i < len; i++ ) {			if ( list[i] === elem ) {				return i;			}		}		return -1;	},	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",	// Regular expressions	// http://www.w3.org/TR/css3-selectors/#whitespace	whitespace = "[\\x20\\t\\r\\n\\f]",	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +		// Operator (capture 2)		"*([*^$|!~]?=)" + whitespace +		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +		"*\\]",	pseudos = ":(" + identifier + ")(?:\\((" +		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:		// 1. quoted (capture 3; capture 4 or capture 5)		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +		// 2. simple (capture 6)		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +		// 3. anything else (capture 2)		".*" +		")\\)|)",	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter	rwhitespace = new RegExp( whitespace + "+", "g" ),	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),	rpseudo = new RegExp( pseudos ),	ridentifier = new RegExp( "^" + identifier + "$" ),	matchExpr = {		"ID": new RegExp( "^#(" + identifier + ")" ),		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),		"TAG": new RegExp( "^(" + identifier + "|[*])" ),		"ATTR": new RegExp( "^" + attributes ),		"PSEUDO": new RegExp( "^" + pseudos ),		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),		// For use in libraries implementing .is()		// We use this for POS matching in `select`		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )	},	rinputs = /^(?:input|select|textarea|button)$/i,	rheader = /^h\d$/i,	rnative = /^[^{]+\{\s*\[native \w/,	// Easily-parseable/retrievable ID or TAG or CLASS selectors	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,	rsibling = /[+~]/,	rescape = /'|\\/g,	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),	funescape = function( _, escaped, escapedWhitespace ) {		var high = "0x" + escaped - 0x10000;		// NaN means non-codepoint		// Support: Firefox<24		// Workaround erroneous numeric interpretation of +"0x"		return high !== high || escapedWhitespace ?			escaped :			high < 0 ?				// BMP codepoint				String.fromCharCode( high + 0x10000 ) :				// Supplemental Plane codepoint (surrogate pair)				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );	},	// Used for iframes	// See setDocument()	// Removing the function wrapper causes a "Permission Denied"	// error in IE	unloadHandler = function() {		setDocument();	};// Optimize for push.apply( _, NodeList )try {	push.apply(		(arr = slice.call( preferredDoc.childNodes )),		preferredDoc.childNodes	);	// Support: Android<4.0	// Detect silently failing push.apply	arr[ preferredDoc.childNodes.length ].nodeType;} catch ( e ) {	push = { apply: arr.length ?		// Leverage slice if possible		function( target, els ) {			push_native.apply( target, slice.call(els) );		} :		// Support: IE<9		// Otherwise append directly		function( target, els ) {			var j = target.length,				i = 0;			// Can't trust NodeList.length			while ( (target[j++] = els[i++]) ) {}			target.length = j - 1;		}	};}function Sizzle( selector, context, results, seed ) {	var m, i, elem, nid, nidselect, match, groups, newSelector,		newContext = context && context.ownerDocument,		// nodeType defaults to 9, since context defaults to document		nodeType = context ? context.nodeType : 9;	results = results || [];	// Return early from calls with invalid selector or context	if ( typeof selector !== "string" || !selector ||		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {		return results;	}	// Try to shortcut find operations (as opposed to filters) in HTML documents	if ( !seed ) {		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {			setDocument( context );		}		context = context || document;		if ( documentIsHTML ) {			// If the selector is sufficiently simple, try using a "get*By*" DOM method			// (excepting DocumentFragment context, where the methods don't exist)			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {				// ID selector				if ( (m = match[1]) ) {					// Document context					if ( nodeType === 9 ) {						if ( (elem = context.getElementById( m )) ) {							// Support: IE, Opera, Webkit							// TODO: identify versions							// getElementById can match elements by name instead of ID							if ( elem.id === m ) {								results.push( elem );								return results;							}						} else {							return results;						}					// Element context					} else {						// Support: IE, Opera, Webkit						// TODO: identify versions						// getElementById can match elements by name instead of ID						if ( newContext && (elem = newContext.getElementById( m )) &&							contains( context, elem ) &&							elem.id === m ) {							results.push( elem );							return results;						}					}				// Type selector				} else if ( match[2] ) {					push.apply( results, context.getElementsByTagName( selector ) );					return results;				// Class selector				} else if ( (m = match[3]) && support.getElementsByClassName &&					context.getElementsByClassName ) {					push.apply( results, context.getElementsByClassName( m ) );					return results;				}			}			// Take advantage of querySelectorAll			if ( support.qsa &&				!compilerCache[ selector + " " ] &&				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {				if ( nodeType !== 1 ) {					newContext = context;					newSelector = selector;				// qSA looks outside Element context, which is not what we want				// Thanks to Andrew Dupont for this workaround technique				// Support: IE <=8				// Exclude object elements				} else if ( context.nodeName.toLowerCase() !== "object" ) {					// Capture the context ID, setting it first if necessary					if ( (nid = context.getAttribute( "id" )) ) {						nid = nid.replace( rescape, "\\$&" );					} else {						context.setAttribute( "id", (nid = expando) );					}					// Prefix every selector in the list					groups = tokenize( selector );					i = groups.length;					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";					while ( i-- ) {						groups[i] = nidselect + " " + toSelector( groups[i] );					}					newSelector = groups.join( "," );					// Expand context for sibling selectors					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||						context;				}				if ( newSelector ) {					try {						push.apply( results,							newContext.querySelectorAll( newSelector )						);						return results;					} catch ( qsaError ) {					} finally {						if ( nid === expando ) {							context.removeAttribute( "id" );						}					}				}			}		}	}	// All others	return select( selector.replace( rtrim, "$1" ), context, results, seed );}/** * Create key-value caches of limited size * @returns {function(string, object)} Returns the Object data after storing it on itself with *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength) *	deleting the oldest entry */function createCache() {	var keys = [];	function cache( key, value ) {		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)		if ( keys.push( key + " " ) > Expr.cacheLength ) {			// Only keep the most recent entries			delete cache[ keys.shift() ];		}		return (cache[ key + " " ] = value);	}	return cache;}/** * Mark a function for special use by Sizzle * @param {Function} fn The function to mark */function markFunction( fn ) {	fn[ expando ] = true;	return fn;}/** * Support testing using an element * @param {Function} fn Passed the created div and expects a boolean result */function assert( fn ) {	var div = document.createElement("div");	try {		return !!fn( div );	} catch (e) {		return false;	} finally {		// Remove from its parent by default		if ( div.parentNode ) {			div.parentNode.removeChild( div );		}		// release memory in IE		div = null;	}}/** * Adds the same handler for all of the specified attrs * @param {String} attrs Pipe-separated list of attributes * @param {Function} handler The method that will be applied */function addHandle( attrs, handler ) {	var arr = attrs.split("|"),		i = arr.length;	while ( i-- ) {		Expr.attrHandle[ arr[i] ] = handler;	}}/** * Checks document order of two siblings * @param {Element} a * @param {Element} b * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b */function siblingCheck( a, b ) {	var cur = b && a,		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&			( ~b.sourceIndex || MAX_NEGATIVE ) -			( ~a.sourceIndex || MAX_NEGATIVE );	// Use IE sourceIndex if available on both nodes	if ( diff ) {		return diff;	}	// Check if b follows a	if ( cur ) {		while ( (cur = cur.nextSibling) ) {			if ( cur === b ) {				return -1;			}		}	}	return a ? 1 : -1;}/** * Returns a function to use in pseudos for input types * @param {String} type */function createInputPseudo( type ) {	return function( elem ) {		var name = elem.nodeName.toLowerCase();		return name === "input" && elem.type === type;	};}/** * Returns a function to use in pseudos for buttons * @param {String} type */function createButtonPseudo( type ) {	return function( elem ) {		var name = elem.nodeName.toLowerCase();		return (name === "input" || name === "button") && elem.type === type;	};}/** * Returns a function to use in pseudos for positionals * @param {Function} fn */function createPositionalPseudo( fn ) {	return markFunction(function( argument ) {		argument = +argument;		return markFunction(function( seed, matches ) {			var j,				matchIndexes = fn( [], seed.length, argument ),				i = matchIndexes.length;			// Match elements found at the specified indexes			while ( i-- ) {				if ( seed[ (j = matchIndexes[i]) ] ) {					seed[j] = !(matches[j] = seed[j]);				}			}		});	});}/** * Checks a node for validity as a Sizzle context * @param {Element|Object=} context * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value */function testContext( context ) {	return context && typeof context.getElementsByTagName !== "undefined" && context;}// Expose support vars for conveniencesupport = Sizzle.support = {};/** * Detects XML nodes * @param {Element|Object} elem An element or a document * @returns {Boolean} True iff elem is a non-HTML XML node */isXML = Sizzle.isXML = function( elem ) {	// documentElement is verified for cases where it doesn't yet exist	// (such as loading iframes in IE - #4833)	var documentElement = elem && (elem.ownerDocument || elem).documentElement;	return documentElement ? documentElement.nodeName !== "HTML" : false;};/** * Sets document-related variables once based on the current document * @param {Element|Object} [doc] An element or document object to use to set the document * @returns {Object} Returns the current document */setDocument = Sizzle.setDocument = function( node ) {	var hasCompare, parent,		doc = node ? node.ownerDocument || node : preferredDoc;	// Return early if doc is invalid or already selected	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {		return document;	}	// Update global variables	document = doc;	docElem = document.documentElement;	documentIsHTML = !isXML( document );	// Support: IE 9-11, Edge	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)	if ( (parent = document.defaultView) && parent.top !== parent ) {		// Support: IE 11		if ( parent.addEventListener ) {			parent.addEventListener( "unload", unloadHandler, false );		// Support: IE 9 - 10 only		} else if ( parent.attachEvent ) {			parent.attachEvent( "onunload", unloadHandler );		}	}	/* Attributes	---------------------------------------------------------------------- */	// Support: IE<8	// Verify that getAttribute really returns attributes and not properties	// (excepting IE8 booleans)	support.attributes = assert(function( div ) {		div.className = "i";		return !div.getAttribute("className");	});	/* getElement(s)By*	---------------------------------------------------------------------- */	// Check if getElementsByTagName("*") returns only elements	support.getElementsByTagName = assert(function( div ) {		div.appendChild( document.createComment("") );		return !div.getElementsByTagName("*").length;	});	// Support: IE<9	support.getElementsByClassName = rnative.test( document.getElementsByClassName );	// Support: IE<10	// Check if getElementById returns elements by name	// The broken getElementById methods don't pick up programatically-set names,	// so use a roundabout getElementsByName test	support.getById = assert(function( div ) {		docElem.appendChild( div ).id = expando;		return !document.getElementsByName || !document.getElementsByName( expando ).length;	});	// ID find and filter	if ( support.getById ) {		Expr.find["ID"] = function( id, context ) {			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {				var m = context.getElementById( id );				return m ? [ m ] : [];			}		};		Expr.filter["ID"] = function( id ) {			var attrId = id.replace( runescape, funescape );			return function( elem ) {				return elem.getAttribute("id") === attrId;			};		};	} else {		// Support: IE6/7		// getElementById is not reliable as a find shortcut		delete Expr.find["ID"];		Expr.filter["ID"] =  function( id ) {			var attrId = id.replace( runescape, funescape );			return function( elem ) {				var node = typeof elem.getAttributeNode !== "undefined" &&					elem.getAttributeNode("id");				return node && node.value === attrId;			};		};	}	// Tag	Expr.find["TAG"] = support.getElementsByTagName ?		function( tag, context ) {			if ( typeof context.getElementsByTagName !== "undefined" ) {				return context.getElementsByTagName( tag );			// DocumentFragment nodes don't have gEBTN			} else if ( support.qsa ) {				return context.querySelectorAll( tag );			}		} :		function( tag, context ) {			var elem,				tmp = [],				i = 0,				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too				results = context.getElementsByTagName( tag );			// Filter out possible comments			if ( tag === "*" ) {				while ( (elem = results[i++]) ) {					if ( elem.nodeType === 1 ) {						tmp.push( elem );					}				}				return tmp;			}			return results;		};	// Class	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {			return context.getElementsByClassName( className );		}	};	/* QSA/matchesSelector	---------------------------------------------------------------------- */	// QSA and matchesSelector support	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)	rbuggyMatches = [];	// qSa(:focus) reports false when true (Chrome 21)	// We allow this because of a bug in IE8/9 that throws an error	// whenever `document.activeElement` is accessed on an iframe	// So, we allow :focus to pass through QSA all the time to avoid the IE error	// See http://bugs.jquery.com/ticket/13378	rbuggyQSA = [];	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {		// Build QSA regex		// Regex strategy adopted from Diego Perini		assert(function( div ) {			// Select is set to empty string on purpose			// This is to test IE's treatment of not explicitly			// setting a boolean content attribute,			// since its presence should be enough			// http://bugs.jquery.com/ticket/12359			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +				"<select id='" + expando + "-\r\\' msallowcapture=''>" +				"<option selected=''></option></select>";			// Support: IE8, Opera 11-12.16			// Nothing should be selected when empty strings follow ^= or $= or *=			// The test attribute must be unknown in Opera but "safe" for WinRT			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section			if ( div.querySelectorAll("[msallowcapture^='']").length ) {				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );			}			// Support: IE8			// Boolean attributes and "value" are not treated correctly			if ( !div.querySelectorAll("[selected]").length ) {				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );			}			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {				rbuggyQSA.push("~=");			}			// Webkit/Opera - :checked should return selected option elements			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked			// IE8 throws error here and will not see later tests			if ( !div.querySelectorAll(":checked").length ) {				rbuggyQSA.push(":checked");			}			// Support: Safari 8+, iOS 8+			// https://bugs.webkit.org/show_bug.cgi?id=136851			// In-page `selector#id sibing-combinator selector` fails			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {				rbuggyQSA.push(".#.+[+~]");			}		});		assert(function( div ) {			// Support: Windows 8 Native Apps			// The type and name attributes are restricted during .innerHTML assignment			var input = document.createElement("input");			input.setAttribute( "type", "hidden" );			div.appendChild( input ).setAttribute( "name", "D" );			// Support: IE8			// Enforce case-sensitivity of name attribute			if ( div.querySelectorAll("[name=d]").length ) {				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );			}			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)			// IE8 throws error here and will not see later tests			if ( !div.querySelectorAll(":enabled").length ) {				rbuggyQSA.push( ":enabled", ":disabled" );			}			// Opera 10-11 does not throw on post-comma invalid pseudos			div.querySelectorAll("*,:x");			rbuggyQSA.push(",.*:");		});	}	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||		docElem.webkitMatchesSelector ||		docElem.mozMatchesSelector ||		docElem.oMatchesSelector ||		docElem.msMatchesSelector) )) ) {		assert(function( div ) {			// Check to see if it's possible to do matchesSelector			// on a disconnected node (IE 9)			support.disconnectedMatch = matches.call( div, "div" );			// This should fail with an exception			// Gecko does not error, returns false instead			matches.call( div, "[s!='']:x" );			rbuggyMatches.push( "!=", pseudos );		});	}	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );	/* Contains	---------------------------------------------------------------------- */	hasCompare = rnative.test( docElem.compareDocumentPosition );	// Element contains another	// Purposefully self-exclusive	// As in, an element does not contain itself	contains = hasCompare || rnative.test( docElem.contains ) ?		function( a, b ) {			var adown = a.nodeType === 9 ? a.documentElement : a,				bup = b && b.parentNode;			return a === bup || !!( bup && bup.nodeType === 1 && (				adown.contains ?					adown.contains( bup ) :					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16			));		} :		function( a, b ) {			if ( b ) {				while ( (b = b.parentNode) ) {					if ( b === a ) {						return true;					}				}			}			return false;		};	/* Sorting	---------------------------------------------------------------------- */	// Document order sorting	sortOrder = hasCompare ?	function( a, b ) {		// Flag for duplicate removal		if ( a === b ) {			hasDuplicate = true;			return 0;		}		// Sort on method existence if only one input has compareDocumentPosition		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;		if ( compare ) {			return compare;		}		// Calculate position if both inputs belong to the same document		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?			a.compareDocumentPosition( b ) :			// Otherwise we know they are disconnected			1;		// Disconnected nodes		if ( compare & 1 ||			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {			// Choose the first element that is related to our preferred document			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {				return -1;			}			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {				return 1;			}			// Maintain original order			return sortInput ?				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :				0;		}		return compare & 4 ? -1 : 1;	} :	function( a, b ) {		// Exit early if the nodes are identical		if ( a === b ) {			hasDuplicate = true;			return 0;		}		var cur,			i = 0,			aup = a.parentNode,			bup = b.parentNode,			ap = [ a ],			bp = [ b ];		// Parentless nodes are either documents or disconnected		if ( !aup || !bup ) {			return a === document ? -1 :				b === document ? 1 :				aup ? -1 :				bup ? 1 :				sortInput ?				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :				0;		// If the nodes are siblings, we can do a quick check		} else if ( aup === bup ) {			return siblingCheck( a, b );		}		// Otherwise we need full lists of their ancestors for comparison		cur = a;		while ( (cur = cur.parentNode) ) {			ap.unshift( cur );		}		cur = b;		while ( (cur = cur.parentNode) ) {			bp.unshift( cur );		}		// Walk down the tree looking for a discrepancy		while ( ap[i] === bp[i] ) {			i++;		}		return i ?			// Do a sibling check if the nodes have a common ancestor			siblingCheck( ap[i], bp[i] ) :			// Otherwise nodes in our document sort first			ap[i] === preferredDoc ? -1 :			bp[i] === preferredDoc ? 1 :			0;	};	return document;};Sizzle.matches = function( expr, elements ) {	return Sizzle( expr, null, null, elements );};Sizzle.matchesSelector = function( elem, expr ) {	// Set document vars if needed	if ( ( elem.ownerDocument || elem ) !== document ) {		setDocument( elem );	}	// Make sure that attribute selectors are quoted	expr = expr.replace( rattributeQuotes, "='$1']" );	if ( support.matchesSelector && documentIsHTML &&		!compilerCache[ expr + " " ] &&		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {		try {			var ret = matches.call( elem, expr );			// IE 9's matchesSelector returns false on disconnected nodes			if ( ret || support.disconnectedMatch ||					// As well, disconnected nodes are said to be in a document					// fragment in IE 9					elem.document && elem.document.nodeType !== 11 ) {				return ret;			}		} catch (e) {}	}	return Sizzle( expr, document, null, [ elem ] ).length > 0;};Sizzle.contains = function( context, elem ) {	// Set document vars if needed	if ( ( context.ownerDocument || context ) !== document ) {		setDocument( context );	}	return contains( context, elem );};Sizzle.attr = function( elem, name ) {	// Set document vars if needed	if ( ( elem.ownerDocument || elem ) !== document ) {		setDocument( elem );	}	var fn = Expr.attrHandle[ name.toLowerCase() ],		// Don't get fooled by Object.prototype properties (jQuery #13807)		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?			fn( elem, name, !documentIsHTML ) :			undefined;	return val !== undefined ?		val :		support.attributes || !documentIsHTML ?			elem.getAttribute( name ) :			(val = elem.getAttributeNode(name)) && val.specified ?				val.value :				null;};Sizzle.error = function( msg ) {	throw new Error( "Syntax error, unrecognized expression: " + msg );};/** * Document sorting and removing duplicates * @param {ArrayLike} results */Sizzle.uniqueSort = function( results ) {	var elem,		duplicates = [],		j = 0,		i = 0;	// Unless we *know* we can detect duplicates, assume their presence	hasDuplicate = !support.detectDuplicates;	sortInput = !support.sortStable && results.slice( 0 );	results.sort( sortOrder );	if ( hasDuplicate ) {		while ( (elem = results[i++]) ) {			if ( elem === results[ i ] ) {				j = duplicates.push( i );			}		}		while ( j-- ) {			results.splice( duplicates[ j ], 1 );		}	}	// Clear input after sorting to release objects	// See https://github.com/jquery/sizzle/pull/225	sortInput = null;	return results;};/** * Utility function for retrieving the text value of an array of DOM nodes * @param {Array|Element} elem */getText = Sizzle.getText = function( elem ) {	var node,		ret = "",		i = 0,		nodeType = elem.nodeType;	if ( !nodeType ) {		// If no nodeType, this is expected to be an array		while ( (node = elem[i++]) ) {			// Do not traverse comment nodes			ret += getText( node );		}	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {		// Use textContent for elements		// innerText usage removed for consistency of new lines (jQuery #11153)		if ( typeof elem.textContent === "string" ) {			return elem.textContent;		} else {			// Traverse its children			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {				ret += getText( elem );			}		}	} else if ( nodeType === 3 || nodeType === 4 ) {		return elem.nodeValue;	}	// Do not include comment or processing instruction nodes	return ret;};Expr = Sizzle.selectors = {	// Can be adjusted by the user	cacheLength: 50,	createPseudo: markFunction,	match: matchExpr,	attrHandle: {},	find: {},	relative: {		">": { dir: "parentNode", first: true },		" ": { dir: "parentNode" },		"+": { dir: "previousSibling", first: true },		"~": { dir: "previousSibling" }	},	preFilter: {		"ATTR": function( match ) {			match[1] = match[1].replace( runescape, funescape );			// Move the given value to match[3] whether quoted or unquoted			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );			if ( match[2] === "~=" ) {				match[3] = " " + match[3] + " ";			}			return match.slice( 0, 4 );		},		"CHILD": function( match ) {			/* matches from matchExpr["CHILD"]				1 type (only|nth|...)				2 what (child|of-type)				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)				4 xn-component of xn+y argument ([+-]?\d*n|)				5 sign of xn-component				6 x of xn-component				7 sign of y-component				8 y of y-component			*/			match[1] = match[1].toLowerCase();			if ( match[1].slice( 0, 3 ) === "nth" ) {				// nth-* requires argument				if ( !match[3] ) {					Sizzle.error( match[0] );				}				// numeric x and y parameters for Expr.filter.CHILD				// remember that false/true cast respectively to 0/1				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );			// other types prohibit arguments			} else if ( match[3] ) {				Sizzle.error( match[0] );			}			return match;		},		"PSEUDO": function( match ) {			var excess,				unquoted = !match[6] && match[2];			if ( matchExpr["CHILD"].test( match[0] ) ) {				return null;			}			// Accept quoted arguments as-is			if ( match[3] ) {				match[2] = match[4] || match[5] || "";			// Strip excess characters from unquoted arguments			} else if ( unquoted && rpseudo.test( unquoted ) &&				// Get excess from tokenize (recursively)				(excess = tokenize( unquoted, true )) &&				// advance to the next closing parenthesis				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {				// excess is a negative index				match[0] = match[0].slice( 0, excess );				match[2] = unquoted.slice( 0, excess );			}			// Return only captures needed by the pseudo filter method (type and argument)			return match.slice( 0, 3 );		}	},	filter: {		"TAG": function( nodeNameSelector ) {			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();			return nodeNameSelector === "*" ?				function() { return true; } :				function( elem ) {					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;				};		},		"CLASS": function( className ) {			var pattern = classCache[ className + " " ];			return pattern ||				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&				classCache( className, function( elem ) {					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );				});		},		"ATTR": function( name, operator, check ) {			return function( elem ) {				var result = Sizzle.attr( elem, name );				if ( result == null ) {					return operator === "!=";				}				if ( !operator ) {					return true;				}				result += "";				return operator === "=" ? result === check :					operator === "!=" ? result !== check :					operator === "^=" ? check && result.indexOf( check ) === 0 :					operator === "*=" ? check && result.indexOf( check ) > -1 :					operator === "$=" ? check && result.slice( -check.length ) === check :					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :					false;			};		},		"CHILD": function( type, what, argument, first, last ) {			var simple = type.slice( 0, 3 ) !== "nth",				forward = type.slice( -4 ) !== "last",				ofType = what === "of-type";			return first === 1 && last === 0 ?				// Shortcut for :nth-*(n)				function( elem ) {					return !!elem.parentNode;				} :				function( elem, context, xml ) {					var cache, uniqueCache, outerCache, node, nodeIndex, start,						dir = simple !== forward ? "nextSibling" : "previousSibling",						parent = elem.parentNode,						name = ofType && elem.nodeName.toLowerCase(),						useCache = !xml && !ofType,						diff = false;					if ( parent ) {						// :(first|last|only)-(child|of-type)						if ( simple ) {							while ( dir ) {								node = elem;								while ( (node = node[ dir ]) ) {									if ( ofType ?										node.nodeName.toLowerCase() === name :										node.nodeType === 1 ) {										return false;									}								}								// Reverse direction for :only-* (if we haven't yet done so)								start = dir = type === "only" && !start && "nextSibling";							}							return true;						}						start = [ forward ? parent.firstChild : parent.lastChild ];						// non-xml :nth-child(...) stores cache data on `parent`						if ( forward && useCache ) {							// Seek `elem` from a previously-cached index							// ...in a gzip-friendly way							node = parent;							outerCache = node[ expando ] || (node[ expando ] = {});							// Support: IE <9 only							// Defend against cloned attroperties (jQuery gh-1709)							uniqueCache = outerCache[ node.uniqueID ] ||								(outerCache[ node.uniqueID ] = {});							cache = uniqueCache[ type ] || [];							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];							diff = nodeIndex && cache[ 2 ];							node = nodeIndex && parent.childNodes[ nodeIndex ];							while ( (node = ++nodeIndex && node && node[ dir ] ||								// Fallback to seeking `elem` from the start								(diff = nodeIndex = 0) || start.pop()) ) {								// When found, cache indexes on `parent` and break								if ( node.nodeType === 1 && ++diff && node === elem ) {									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];									break;								}							}						} else {							// Use previously-cached element index if available							if ( useCache ) {								// ...in a gzip-friendly way								node = elem;								outerCache = node[ expando ] || (node[ expando ] = {});								// Support: IE <9 only								// Defend against cloned attroperties (jQuery gh-1709)								uniqueCache = outerCache[ node.uniqueID ] ||									(outerCache[ node.uniqueID ] = {});								cache = uniqueCache[ type ] || [];								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];								diff = nodeIndex;							}							// xml :nth-child(...)							// or :nth-last-child(...) or :nth(-last)?-of-type(...)							if ( diff === false ) {								// Use the same loop as above to seek `elem` from the start								while ( (node = ++nodeIndex && node && node[ dir ] ||									(diff = nodeIndex = 0) || start.pop()) ) {									if ( ( ofType ?										node.nodeName.toLowerCase() === name :										node.nodeType === 1 ) &&										++diff ) {										// Cache the index of each encountered element										if ( useCache ) {											outerCache = node[ expando ] || (node[ expando ] = {});											// Support: IE <9 only											// Defend against cloned attroperties (jQuery gh-1709)											uniqueCache = outerCache[ node.uniqueID ] ||												(outerCache[ node.uniqueID ] = {});											uniqueCache[ type ] = [ dirruns, diff ];										}										if ( node === elem ) {											break;										}									}								}							}						}						// Incorporate the offset, then check against cycle size						diff -= last;						return diff === first || ( diff % first === 0 && diff / first >= 0 );					}				};		},		"PSEUDO": function( pseudo, argument ) {			// pseudo-class names are case-insensitive			// http://www.w3.org/TR/selectors/#pseudo-classes			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters			// Remember that setFilters inherits from pseudos			var args,				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||					Sizzle.error( "unsupported pseudo: " + pseudo );			// The user may use createPseudo to indicate that			// arguments are needed to create the filter function			// just as Sizzle does			if ( fn[ expando ] ) {				return fn( argument );			}			// But maintain support for old signatures			if ( fn.length > 1 ) {				args = [ pseudo, pseudo, "", argument ];				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?					markFunction(function( seed, matches ) {						var idx,							matched = fn( seed, argument ),							i = matched.length;						while ( i-- ) {							idx = indexOf( seed, matched[i] );							seed[ idx ] = !( matches[ idx ] = matched[i] );						}					}) :					function( elem ) {						return fn( elem, 0, args );					};			}			return fn;		}	},	pseudos: {		// Potentially complex pseudos		"not": markFunction(function( selector ) {			// Trim the selector passed to compile			// to avoid treating leading and trailing			// spaces as combinators			var input = [],				results = [],				matcher = compile( selector.replace( rtrim, "$1" ) );			return matcher[ expando ] ?				markFunction(function( seed, matches, context, xml ) {					var elem,						unmatched = matcher( seed, null, xml, [] ),						i = seed.length;					// Match elements unmatched by `matcher`					while ( i-- ) {						if ( (elem = unmatched[i]) ) {							seed[i] = !(matches[i] = elem);						}					}				}) :				function( elem, context, xml ) {					input[0] = elem;					matcher( input, null, xml, results );					// Don't keep the element (issue #299)					input[0] = null;					return !results.pop();				};		}),		"has": markFunction(function( selector ) {			return function( elem ) {				return Sizzle( selector, elem ).length > 0;			};		}),		"contains": markFunction(function( text ) {			text = text.replace( runescape, funescape );			return function( elem ) {				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;			};		}),		// "Whether an element is represented by a :lang() selector		// is based solely on the element's language value		// being equal to the identifier C,		// or beginning with the identifier C immediately followed by "-".		// The matching of C against the element's language value is performed case-insensitively.		// The identifier C does not have to be a valid language name."		// http://www.w3.org/TR/selectors/#lang-pseudo		"lang": markFunction( function( lang ) {			// lang value must be a valid identifier			if ( !ridentifier.test(lang || "") ) {				Sizzle.error( "unsupported lang: " + lang );			}			lang = lang.replace( runescape, funescape ).toLowerCase();			return function( elem ) {				var elemLang;				do {					if ( (elemLang = documentIsHTML ?						elem.lang :						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {						elemLang = elemLang.toLowerCase();						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;					}				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );				return false;			};		}),		// Miscellaneous		"target": function( elem ) {			var hash = window.location && window.location.hash;			return hash && hash.slice( 1 ) === elem.id;		},		"root": function( elem ) {			return elem === docElem;		},		"focus": function( elem ) {			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);		},		// Boolean properties		"enabled": function( elem ) {			return elem.disabled === false;		},		"disabled": function( elem ) {			return elem.disabled === true;		},		"checked": function( elem ) {			// In CSS3, :checked should return both checked and selected elements			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked			var nodeName = elem.nodeName.toLowerCase();			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);		},		"selected": function( elem ) {			// Accessing this property makes selected-by-default			// options in Safari work properly			if ( elem.parentNode ) {				elem.parentNode.selectedIndex;			}			return elem.selected === true;		},		// Contents		"empty": function( elem ) {			// http://www.w3.org/TR/selectors/#empty-pseudo			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),			//   but not by others (comment: 8; processing instruction: 7; etc.)			// nodeType < 6 works because attributes (2) do not appear as children			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {				if ( elem.nodeType < 6 ) {					return false;				}			}			return true;		},		"parent": function( elem ) {			return !Expr.pseudos["empty"]( elem );		},		// Element/input types		"header": function( elem ) {			return rheader.test( elem.nodeName );		},		"input": function( elem ) {			return rinputs.test( elem.nodeName );		},		"button": function( elem ) {			var name = elem.nodeName.toLowerCase();			return name === "input" && elem.type === "button" || name === "button";		},		"text": function( elem ) {			var attr;			return elem.nodeName.toLowerCase() === "input" &&				elem.type === "text" &&				// Support: IE<8				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );		},		// Position-in-collection		"first": createPositionalPseudo(function() {			return [ 0 ];		}),		"last": createPositionalPseudo(function( matchIndexes, length ) {			return [ length - 1 ];		}),		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {			return [ argument < 0 ? argument + length : argument ];		}),		"even": createPositionalPseudo(function( matchIndexes, length ) {			var i = 0;			for ( ; i < length; i += 2 ) {				matchIndexes.push( i );			}			return matchIndexes;		}),		"odd": createPositionalPseudo(function( matchIndexes, length ) {			var i = 1;			for ( ; i < length; i += 2 ) {				matchIndexes.push( i );			}			return matchIndexes;		}),		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {			var i = argument < 0 ? argument + length : argument;			for ( ; --i >= 0; ) {				matchIndexes.push( i );			}			return matchIndexes;		}),		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {			var i = argument < 0 ? argument + length : argument;			for ( ; ++i < length; ) {				matchIndexes.push( i );			}			return matchIndexes;		})	}};Expr.pseudos["nth"] = Expr.pseudos["eq"];// Add button/input type pseudosfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {	Expr.pseudos[ i ] = createInputPseudo( i );}for ( i in { submit: true, reset: true } ) {	Expr.pseudos[ i ] = createButtonPseudo( i );}// Easy API for creating new setFiltersfunction setFilters() {}setFilters.prototype = Expr.filters = Expr.pseudos;Expr.setFilters = new setFilters();tokenize = Sizzle.tokenize = function( selector, parseOnly ) {	var matched, match, tokens, type,		soFar, groups, preFilters,		cached = tokenCache[ selector + " " ];	if ( cached ) {		return parseOnly ? 0 : cached.slice( 0 );	}	soFar = selector;	groups = [];	preFilters = Expr.preFilter;	while ( soFar ) {		// Comma and first run		if ( !matched || (match = rcomma.exec( soFar )) ) {			if ( match ) {				// Don't consume trailing commas as valid				soFar = soFar.slice( match[0].length ) || soFar;			}			groups.push( (tokens = []) );		}		matched = false;		// Combinators		if ( (match = rcombinators.exec( soFar )) ) {			matched = match.shift();			tokens.push({				value: matched,				// Cast descendant combinators to space				type: match[0].replace( rtrim, " " )			});			soFar = soFar.slice( matched.length );		}		// Filters		for ( type in Expr.filter ) {			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||				(match = preFilters[ type ]( match ))) ) {				matched = match.shift();				tokens.push({					value: matched,					type: type,					matches: match				});				soFar = soFar.slice( matched.length );			}		}		if ( !matched ) {			break;		}	}	// Return the length of the invalid excess	// if we're just parsing	// Otherwise, throw an error or return tokens	return parseOnly ?		soFar.length :		soFar ?			Sizzle.error( selector ) :			// Cache the tokens			tokenCache( selector, groups ).slice( 0 );};function toSelector( tokens ) {	var i = 0,		len = tokens.length,		selector = "";	for ( ; i < len; i++ ) {		selector += tokens[i].value;	}	return selector;}function addCombinator( matcher, combinator, base ) {	var dir = combinator.dir,		checkNonElements = base && dir === "parentNode",		doneName = done++;	return combinator.first ?		// Check against closest ancestor/preceding element		function( elem, context, xml ) {			while ( (elem = elem[ dir ]) ) {				if ( elem.nodeType === 1 || checkNonElements ) {					return matcher( elem, context, xml );				}			}		} :		// Check against all ancestor/preceding elements		function( elem, context, xml ) {			var oldCache, uniqueCache, outerCache,				newCache = [ dirruns, doneName ];			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching			if ( xml ) {				while ( (elem = elem[ dir ]) ) {					if ( elem.nodeType === 1 || checkNonElements ) {						if ( matcher( elem, context, xml ) ) {							return true;						}					}				}			} else {				while ( (elem = elem[ dir ]) ) {					if ( elem.nodeType === 1 || checkNonElements ) {						outerCache = elem[ expando ] || (elem[ expando ] = {});						// Support: IE <9 only						// Defend against cloned attroperties (jQuery gh-1709)						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});						if ( (oldCache = uniqueCache[ dir ]) &&							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {							// Assign to newCache so results back-propagate to previous elements							return (newCache[ 2 ] = oldCache[ 2 ]);						} else {							// Reuse newcache so results back-propagate to previous elements							uniqueCache[ dir ] = newCache;							// A match means we're done; a fail means we have to keep checking							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {								return true;							}						}					}				}			}		};}function elementMatcher( matchers ) {	return matchers.length > 1 ?		function( elem, context, xml ) {			var i = matchers.length;			while ( i-- ) {				if ( !matchers[i]( elem, context, xml ) ) {					return false;				}			}			return true;		} :		matchers[0];}function multipleContexts( selector, contexts, results ) {	var i = 0,		len = contexts.length;	for ( ; i < len; i++ ) {		Sizzle( selector, contexts[i], results );	}	return results;}function condense( unmatched, map, filter, context, xml ) {	var elem,		newUnmatched = [],		i = 0,		len = unmatched.length,		mapped = map != null;	for ( ; i < len; i++ ) {		if ( (elem = unmatched[i]) ) {			if ( !filter || filter( elem, context, xml ) ) {				newUnmatched.push( elem );				if ( mapped ) {					map.push( i );				}			}		}	}	return newUnmatched;}function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {	if ( postFilter && !postFilter[ expando ] ) {		postFilter = setMatcher( postFilter );	}	if ( postFinder && !postFinder[ expando ] ) {		postFinder = setMatcher( postFinder, postSelector );	}	return markFunction(function( seed, results, context, xml ) {		var temp, i, elem,			preMap = [],			postMap = [],			preexisting = results.length,			// Get initial elements from seed or context			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),			// Prefilter to get matcher input, preserving a map for seed-results synchronization			matcherIn = preFilter && ( seed || !selector ) ?				condense( elems, preMap, preFilter, context, xml ) :				elems,			matcherOut = matcher ?				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?					// ...intermediate processing is necessary					[] :					// ...otherwise use results directly					results :				matcherIn;		// Find primary matches		if ( matcher ) {			matcher( matcherIn, matcherOut, context, xml );		}		// Apply postFilter		if ( postFilter ) {			temp = condense( matcherOut, postMap );			postFilter( temp, [], context, xml );			// Un-match failing elements by moving them back to matcherIn			i = temp.length;			while ( i-- ) {				if ( (elem = temp[i]) ) {					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);				}			}		}		if ( seed ) {			if ( postFinder || preFilter ) {				if ( postFinder ) {					// Get the final matcherOut by condensing this intermediate into postFinder contexts					temp = [];					i = matcherOut.length;					while ( i-- ) {						if ( (elem = matcherOut[i]) ) {							// Restore matcherIn since elem is not yet a final match							temp.push( (matcherIn[i] = elem) );						}					}					postFinder( null, (matcherOut = []), temp, xml );				}				// Move matched elements from seed to results to keep them synchronized				i = matcherOut.length;				while ( i-- ) {					if ( (elem = matcherOut[i]) &&						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {						seed[temp] = !(results[temp] = elem);					}				}			}		// Add elements to results, through postFinder if defined		} else {			matcherOut = condense(				matcherOut === results ?					matcherOut.splice( preexisting, matcherOut.length ) :					matcherOut			);			if ( postFinder ) {				postFinder( null, results, matcherOut, xml );			} else {				push.apply( results, matcherOut );			}		}	});}function matcherFromTokens( tokens ) {	var checkContext, matcher, j,		len = tokens.length,		leadingRelative = Expr.relative[ tokens[0].type ],		implicitRelative = leadingRelative || Expr.relative[" "],		i = leadingRelative ? 1 : 0,		// The foundational matcher ensures that elements are reachable from top-level context(s)		matchContext = addCombinator( function( elem ) {			return elem === checkContext;		}, implicitRelative, true ),		matchAnyContext = addCombinator( function( elem ) {			return indexOf( checkContext, elem ) > -1;		}, implicitRelative, true ),		matchers = [ function( elem, context, xml ) {			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (				(checkContext = context).nodeType ?					matchContext( elem, context, xml ) :					matchAnyContext( elem, context, xml ) );			// Avoid hanging onto element (issue #299)			checkContext = null;			return ret;		} ];	for ( ; i < len; i++ ) {		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];		} else {			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );			// Return special upon seeing a positional matcher			if ( matcher[ expando ] ) {				// Find the next relative operator (if any) for proper handling				j = ++i;				for ( ; j < len; j++ ) {					if ( Expr.relative[ tokens[j].type ] ) {						break;					}				}				return setMatcher(					i > 1 && elementMatcher( matchers ),					i > 1 && toSelector(						// If the preceding token was a descendant combinator, insert an implicit any-element `*`						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })					).replace( rtrim, "$1" ),					matcher,					i < j && matcherFromTokens( tokens.slice( i, j ) ),					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),					j < len && toSelector( tokens )				);			}			matchers.push( matcher );		}	}	return elementMatcher( matchers );}function matcherFromGroupMatchers( elementMatchers, setMatchers ) {	var bySet = setMatchers.length > 0,		byElement = elementMatchers.length > 0,		superMatcher = function( seed, context, xml, results, outermost ) {			var elem, j, matcher,				matchedCount = 0,				i = "0",				unmatched = seed && [],				setMatched = [],				contextBackup = outermostContext,				// We must always have either seed elements or outermost context				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),				// Use integer dirruns iff this is the outermost matcher				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),				len = elems.length;			if ( outermost ) {				outermostContext = context === document || context || outermost;			}			// Add elements passing elementMatchers directly to results			// Support: IE<9, Safari			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {				if ( byElement && elem ) {					j = 0;					if ( !context && elem.ownerDocument !== document ) {						setDocument( elem );						xml = !documentIsHTML;					}					while ( (matcher = elementMatchers[j++]) ) {						if ( matcher( elem, context || document, xml) ) {							results.push( elem );							break;						}					}					if ( outermost ) {						dirruns = dirrunsUnique;					}				}				// Track unmatched elements for set filters				if ( bySet ) {					// They will have gone through all possible matchers					if ( (elem = !matcher && elem) ) {						matchedCount--;					}					// Lengthen the array for every element, matched or not					if ( seed ) {						unmatched.push( elem );					}				}			}			// `i` is now the count of elements visited above, and adding it to `matchedCount`			// makes the latter nonnegative.			matchedCount += i;			// Apply set filters to unmatched elements			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have			// no element matchers and no seed.			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that			// case, which will result in a "00" `matchedCount` that differs from `i` but is also			// numerically zero.			if ( bySet && i !== matchedCount ) {				j = 0;				while ( (matcher = setMatchers[j++]) ) {					matcher( unmatched, setMatched, context, xml );				}				if ( seed ) {					// Reintegrate element matches to eliminate the need for sorting					if ( matchedCount > 0 ) {						while ( i-- ) {							if ( !(unmatched[i] || setMatched[i]) ) {								setMatched[i] = pop.call( results );							}						}					}					// Discard index placeholder values to get only actual matches					setMatched = condense( setMatched );				}				// Add matches to results				push.apply( results, setMatched );				// Seedless set matches succeeding multiple successful matchers stipulate sorting				if ( outermost && !seed && setMatched.length > 0 &&					( matchedCount + setMatchers.length ) > 1 ) {					Sizzle.uniqueSort( results );				}			}			// Override manipulation of globals by nested matchers			if ( outermost ) {				dirruns = dirrunsUnique;				outermostContext = contextBackup;			}			return unmatched;		};	return bySet ?		markFunction( superMatcher ) :		superMatcher;}compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {	var i,		setMatchers = [],		elementMatchers = [],		cached = compilerCache[ selector + " " ];	if ( !cached ) {		// Generate a function of recursive functions that can be used to check each element		if ( !match ) {			match = tokenize( selector );		}		i = match.length;		while ( i-- ) {			cached = matcherFromTokens( match[i] );			if ( cached[ expando ] ) {				setMatchers.push( cached );			} else {				elementMatchers.push( cached );			}		}		// Cache the compiled function		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );		// Save selector and tokenization		cached.selector = selector;	}	return cached;};/** * A low-level selection function that works with Sizzle's compiled *  selector functions * @param {String|Function} selector A selector or a pre-compiled *  selector function built with Sizzle.compile * @param {Element} context * @param {Array} [results] * @param {Array} [seed] A set of elements to match against */select = Sizzle.select = function( selector, context, results, seed ) {	var i, tokens, token, type, find,		compiled = typeof selector === "function" && selector,		match = !seed && tokenize( (selector = compiled.selector || selector) );	results = results || [];	// Try to minimize operations if there is only one selector in the list and no seed	// (the latter of which guarantees us context)	if ( match.length === 1 ) {		// Reduce context if the leading compound selector is an ID		tokens = match[0] = match[0].slice( 0 );		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&				support.getById && context.nodeType === 9 && documentIsHTML &&				Expr.relative[ tokens[1].type ] ) {			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];			if ( !context ) {				return results;			// Precompiled matchers will still verify ancestry, so step up a level			} else if ( compiled ) {				context = context.parentNode;			}			selector = selector.slice( tokens.shift().value.length );		}		// Fetch a seed set for right-to-left matching		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;		while ( i-- ) {			token = tokens[i];			// Abort if we hit a combinator			if ( Expr.relative[ (type = token.type) ] ) {				break;			}			if ( (find = Expr.find[ type ]) ) {				// Search, expanding context for leading sibling combinators				if ( (seed = find(					token.matches[0].replace( runescape, funescape ),					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context				)) ) {					// If seed is empty or no tokens remain, we can return early					tokens.splice( i, 1 );					selector = seed.length && toSelector( tokens );					if ( !selector ) {						push.apply( results, seed );						return results;					}					break;				}			}		}	}	// Compile and execute a filtering function if one is not provided	// Provide `match` to avoid retokenization if we modified the selector above	( compiled || compile( selector, match ) )(		seed,		context,		!documentIsHTML,		results,		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context	);	return results;};// One-time assignments// Sort stabilitysupport.sortStable = expando.split("").sort( sortOrder ).join("") === expando;// Support: Chrome 14-35+// Always assume duplicates if they aren't passed to the comparison functionsupport.detectDuplicates = !!hasDuplicate;// Initialize against the default documentsetDocument();// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)// Detached nodes confoundingly follow *each other*support.sortDetached = assert(function( div1 ) {	// Should return 1, but returns 4 (following)	return div1.compareDocumentPosition( document.createElement("div") ) & 1;});// Support: IE<8// Prevent attribute/property "interpolation"// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspxif ( !assert(function( div ) {	div.innerHTML = "<a href='#'></a>";	return div.firstChild.getAttribute("href") === "#" ;}) ) {	addHandle( "type|href|height|width", function( elem, name, isXML ) {		if ( !isXML ) {			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );		}	});}// Support: IE<9// Use defaultValue in place of getAttribute("value")if ( !support.attributes || !assert(function( div ) {	div.innerHTML = "<input/>";	div.firstChild.setAttribute( "value", "" );	return div.firstChild.getAttribute( "value" ) === "";}) ) {	addHandle( "value", function( elem, name, isXML ) {		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {			return elem.defaultValue;		}	});}// Support: IE<9// Use getAttributeNode to fetch booleans when getAttribute liesif ( !assert(function( div ) {	return div.getAttribute("disabled") == null;}) ) {	addHandle( booleans, function( elem, name, isXML ) {		var val;		if ( !isXML ) {			return elem[ name ] === true ? name.toLowerCase() :					(val = elem.getAttributeNode( name )) && val.specified ?					val.value :				null;		}	});}return Sizzle;})( window );jQuery.find = Sizzle;jQuery.expr = Sizzle.selectors;jQuery.expr[ ":" ] = jQuery.expr.pseudos;jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;jQuery.text = Sizzle.getText;jQuery.isXMLDoc = Sizzle.isXML;jQuery.contains = Sizzle.contains;var dir = function( elem, dir, until ) {	var matched = [],		truncate = until !== undefined;	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {		if ( elem.nodeType === 1 ) {			if ( truncate && jQuery( elem ).is( until ) ) {				break;			}			matched.push( elem );		}	}	return matched;};var siblings = function( n, elem ) {	var matched = [];	for ( ; n; n = n.nextSibling ) {		if ( n.nodeType === 1 && n !== elem ) {			matched.push( n );		}	}	return matched;};var rneedsContext = jQuery.expr.match.needsContext;var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );var risSimple = /^.[^:#\[\.,]*$/;// Implement the identical functionality for filter and notfunction winnow( elements, qualifier, not ) {	if ( jQuery.isFunction( qualifier ) ) {		return jQuery.grep( elements, function( elem, i ) {			/* jshint -W018 */			return !!qualifier.call( elem, i, elem ) !== not;		} );	}	if ( qualifier.nodeType ) {		return jQuery.grep( elements, function( elem ) {			return ( elem === qualifier ) !== not;		} );	}	if ( typeof qualifier === "string" ) {		if ( risSimple.test( qualifier ) ) {			return jQuery.filter( qualifier, elements, not );		}		qualifier = jQuery.filter( qualifier, elements );	}	return jQuery.grep( elements, function( elem ) {		return ( indexOf.call( qualifier, elem ) > -1 ) !== not;	} );}jQuery.filter = function( expr, elems, not ) {	var elem = elems[ 0 ];	if ( not ) {		expr = ":not(" + expr + ")";	}	return elems.length === 1 && elem.nodeType === 1 ?		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {			return elem.nodeType === 1;		} ) );};jQuery.fn.extend( {	find: function( selector ) {		var i,			len = this.length,			ret = [],			self = this;		if ( typeof selector !== "string" ) {			return this.pushStack( jQuery( selector ).filter( function() {				for ( i = 0; i < len; i++ ) {					if ( jQuery.contains( self[ i ], this ) ) {						return true;					}				}			} ) );		}		for ( i = 0; i < len; i++ ) {			jQuery.find( selector, self[ i ], ret );		}		// Needed because $( selector, context ) becomes $( context ).find( selector )		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );		ret.selector = this.selector ? this.selector + " " + selector : selector;		return ret;	},	filter: function( selector ) {		return this.pushStack( winnow( this, selector || [], false ) );	},	not: function( selector ) {		return this.pushStack( winnow( this, selector || [], true ) );	},	is: function( selector ) {		return !!winnow(			this,			// If this is a positional/relative selector, check membership in the returned set			// so $("p:first").is("p:last") won't return true for a doc with two "p".			typeof selector === "string" && rneedsContext.test( selector ) ?				jQuery( selector ) :				selector || [],			false		).length;	}} );// Initialize a jQuery object// A central reference to the root jQuery(document)var rootjQuery,	// A simple way to check for HTML strings	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)	// Strict HTML recognition (#11290: must start with <)	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,	init = jQuery.fn.init = function( selector, context, root ) {		var match, elem;		// HANDLE: $(""), $(null), $(undefined), $(false)		if ( !selector ) {			return this;		}		// Method init() accepts an alternate rootjQuery		// so migrate can support jQuery.sub (gh-2101)		root = root || rootjQuery;		// Handle HTML strings		if ( typeof selector === "string" ) {			if ( selector[ 0 ] === "<" &&				selector[ selector.length - 1 ] === ">" &&				selector.length >= 3 ) {				// Assume that strings that start and end with <> are HTML and skip the regex check				match = [ null, selector, null ];			} else {				match = rquickExpr.exec( selector );			}			// Match html or make sure no context is specified for #id			if ( match && ( match[ 1 ] || !context ) ) {				// HANDLE: $(html) -> $(array)				if ( match[ 1 ] ) {					context = context instanceof jQuery ? context[ 0 ] : context;					// Option to run scripts is true for back-compat					// Intentionally let the error be thrown if parseHTML is not present					jQuery.merge( this, jQuery.parseHTML(						match[ 1 ],						context && context.nodeType ? context.ownerDocument || context : document,						true					) );					// HANDLE: $(html, props)					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {						for ( match in context ) {							// Properties of context are called as methods if possible							if ( jQuery.isFunction( this[ match ] ) ) {								this[ match ]( context[ match ] );							// ...and otherwise set as attributes							} else {								this.attr( match, context[ match ] );							}						}					}					return this;				// HANDLE: $(#id)				} else {					elem = document.getElementById( match[ 2 ] );					// Support: Blackberry 4.6					// gEBID returns nodes no longer in the document (#6963)					if ( elem && elem.parentNode ) {						// Inject the element directly into the jQuery object						this.length = 1;						this[ 0 ] = elem;					}					this.context = document;					this.selector = selector;					return this;				}			// HANDLE: $(expr, $(...))			} else if ( !context || context.jquery ) {				return ( context || root ).find( selector );			// HANDLE: $(expr, context)			// (which is just equivalent to: $(context).find(expr)			} else {				return this.constructor( context ).find( selector );			}		// HANDLE: $(DOMElement)		} else if ( selector.nodeType ) {			this.context = this[ 0 ] = selector;			this.length = 1;			return this;		// HANDLE: $(function)		// Shortcut for document ready		} else if ( jQuery.isFunction( selector ) ) {			return root.ready !== undefined ?				root.ready( selector ) :				// Execute immediately if ready is not present				selector( jQuery );		}		if ( selector.selector !== undefined ) {			this.selector = selector.selector;			this.context = selector.context;		}		return jQuery.makeArray( selector, this );	};// Give the init function the jQuery prototype for later instantiationinit.prototype = jQuery.fn;// Initialize central referencerootjQuery = jQuery( document );var rparentsprev = /^(?:parents|prev(?:Until|All))/,	// Methods guaranteed to produce a unique set when starting from a unique set	guaranteedUnique = {		children: true,		contents: true,		next: true,		prev: true	};jQuery.fn.extend( {	has: function( target ) {		var targets = jQuery( target, this ),			l = targets.length;		return this.filter( function() {			var i = 0;			for ( ; i < l; i++ ) {				if ( jQuery.contains( this, targets[ i ] ) ) {					return true;				}			}		} );	},	closest: function( selectors, context ) {		var cur,			i = 0,			l = this.length,			matched = [],			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?				jQuery( selectors, context || this.context ) :				0;		for ( ; i < l; i++ ) {			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {				// Always skip document fragments				if ( cur.nodeType < 11 && ( pos ?					pos.index( cur ) > -1 :					// Don't pass non-elements to Sizzle					cur.nodeType === 1 &&						jQuery.find.matchesSelector( cur, selectors ) ) ) {					matched.push( cur );					break;				}			}		}		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );	},	// Determine the position of an element within the set	index: function( elem ) {		// No argument, return index in parent		if ( !elem ) {			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;		}		// Index in selector		if ( typeof elem === "string" ) {			return indexOf.call( jQuery( elem ), this[ 0 ] );		}		// Locate the position of the desired element		return indexOf.call( this,			// If it receives a jQuery object, the first element is used			elem.jquery ? elem[ 0 ] : elem		);	},	add: function( selector, context ) {		return this.pushStack(			jQuery.uniqueSort(				jQuery.merge( this.get(), jQuery( selector, context ) )			)		);	},	addBack: function( selector ) {		return this.add( selector == null ?			this.prevObject : this.prevObject.filter( selector )		);	}} );function sibling( cur, dir ) {	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}	return cur;}jQuery.each( {	parent: function( elem ) {		var parent = elem.parentNode;		return parent && parent.nodeType !== 11 ? parent : null;	},	parents: function( elem ) {		return dir( elem, "parentNode" );	},	parentsUntil: function( elem, i, until ) {		return dir( elem, "parentNode", until );	},	next: function( elem ) {		return sibling( elem, "nextSibling" );	},	prev: function( elem ) {		return sibling( elem, "previousSibling" );	},	nextAll: function( elem ) {		return dir( elem, "nextSibling" );	},	prevAll: function( elem ) {		return dir( elem, "previousSibling" );	},	nextUntil: function( elem, i, until ) {		return dir( elem, "nextSibling", until );	},	prevUntil: function( elem, i, until ) {		return dir( elem, "previousSibling", until );	},	siblings: function( elem ) {		return siblings( ( elem.parentNode || {} ).firstChild, elem );	},	children: function( elem ) {		return siblings( elem.firstChild );	},	contents: function( elem ) {		return elem.contentDocument || jQuery.merge( [], elem.childNodes );	}}, function( name, fn ) {	jQuery.fn[ name ] = function( until, selector ) {		var matched = jQuery.map( this, fn, until );		if ( name.slice( -5 ) !== "Until" ) {			selector = until;		}		if ( selector && typeof selector === "string" ) {			matched = jQuery.filter( selector, matched );		}		if ( this.length > 1 ) {			// Remove duplicates			if ( !guaranteedUnique[ name ] ) {				jQuery.uniqueSort( matched );			}			// Reverse order for parents* and prev-derivatives			if ( rparentsprev.test( name ) ) {				matched.reverse();			}		}		return this.pushStack( matched );	};} );var rnotwhite = ( /\S+/g );// Convert String-formatted options into Object-formatted onesfunction createOptions( options ) {	var object = {};	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {		object[ flag ] = true;	} );	return object;}/* * Create a callback list using the following parameters: * *	options: an optional list of space-separated options that will change how *			the callback list behaves or a more traditional option object * * By default a callback list will act like an event callback list and can be * "fired" multiple times. * * Possible options: * *	once:			will ensure the callback list can only be fired once (like a Deferred) * *	memory:			will keep track of previous values and will call any callback added *					after the list has been fired right away with the latest "memorized" *					values (like a Deferred) * *	unique:			will ensure a callback can only be added once (no duplicate in the list) * *	stopOnFalse:	interrupt callings when a callback returns false * */jQuery.Callbacks = function( options ) {	// Convert options from String-formatted to Object-formatted if needed	// (we check in cache first)	options = typeof options === "string" ?		createOptions( options ) :		jQuery.extend( {}, options );	var // Flag to know if list is currently firing		firing,		// Last fire value for non-forgettable lists		memory,		// Flag to know if list was already fired		fired,		// Flag to prevent firing		locked,		// Actual callback list		list = [],		// Queue of execution data for repeatable lists		queue = [],		// Index of currently firing callback (modified by add/remove as needed)		firingIndex = -1,		// Fire callbacks		fire = function() {			// Enforce single-firing			locked = options.once;			// Execute callbacks for all pending executions,			// respecting firingIndex overrides and runtime changes			fired = firing = true;			for ( ; queue.length; firingIndex = -1 ) {				memory = queue.shift();				while ( ++firingIndex < list.length ) {					// Run callback and check for early termination					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&						options.stopOnFalse ) {						// Jump to end and forget the data so .add doesn't re-fire						firingIndex = list.length;						memory = false;					}				}			}			// Forget the data if we're done with it			if ( !options.memory ) {				memory = false;			}			firing = false;			// Clean up if we're done firing for good			if ( locked ) {				// Keep an empty list if we have data for future add calls				if ( memory ) {					list = [];				// Otherwise, this object is spent				} else {					list = "";				}			}		},		// Actual Callbacks object		self = {			// Add a callback or a collection of callbacks to the list			add: function() {				if ( list ) {					// If we have memory from a past run, we should fire after adding					if ( memory && !firing ) {						firingIndex = list.length - 1;						queue.push( memory );					}					( function add( args ) {						jQuery.each( args, function( _, arg ) {							if ( jQuery.isFunction( arg ) ) {								if ( !options.unique || !self.has( arg ) ) {									list.push( arg );								}							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {								// Inspect recursively								add( arg );							}						} );					} )( arguments );					if ( memory && !firing ) {						fire();					}				}				return this;			},			// Remove a callback from the list			remove: function() {				jQuery.each( arguments, function( _, arg ) {					var index;					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {						list.splice( index, 1 );						// Handle firing indexes						if ( index <= firingIndex ) {							firingIndex--;						}					}				} );				return this;			},			// Check if a given callback is in the list.			// If no argument is given, return whether or not list has callbacks attached.			has: function( fn ) {				return fn ?					jQuery.inArray( fn, list ) > -1 :					list.length > 0;			},			// Remove all callbacks from the list			empty: function() {				if ( list ) {					list = [];				}				return this;			},			// Disable .fire and .add			// Abort any current/pending executions			// Clear all callbacks and values			disable: function() {				locked = queue = [];				list = memory = "";				return this;			},			disabled: function() {				return !list;			},			// Disable .fire			// Also disable .add unless we have memory (since it would have no effect)			// Abort any pending executions			lock: function() {				locked = queue = [];				if ( !memory ) {					list = memory = "";				}				return this;			},			locked: function() {				return !!locked;			},			// Call all callbacks with the given context and arguments			fireWith: function( context, args ) {				if ( !locked ) {					args = args || [];					args = [ context, args.slice ? args.slice() : args ];					queue.push( args );					if ( !firing ) {						fire();					}				}				return this;			},			// Call all the callbacks with the given arguments			fire: function() {				self.fireWith( this, arguments );				return this;			},			// To know if the callbacks have already been called at least once			fired: function() {				return !!fired;			}		};	return self;};jQuery.extend( {	Deferred: function( func ) {		var tuples = [				// action, add listener, listener list, final state				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]			],			state = "pending",			promise = {				state: function() {					return state;				},				always: function() {					deferred.done( arguments ).fail( arguments );					return this;				},				then: function( /* fnDone, fnFail, fnProgress */ ) {					var fns = arguments;					return jQuery.Deferred( function( newDefer ) {						jQuery.each( tuples, function( i, tuple ) {							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];							// deferred[ done | fail | progress ] for forwarding actions to newDefer							deferred[ tuple[ 1 ] ]( function() {								var returned = fn && fn.apply( this, arguments );								if ( returned && jQuery.isFunction( returned.promise ) ) {									returned.promise()										.progress( newDefer.notify )										.done( newDefer.resolve )										.fail( newDefer.reject );								} else {									newDefer[ tuple[ 0 ] + "With" ](										this === promise ? newDefer.promise() : this,										fn ? [ returned ] : arguments									);								}							} );						} );						fns = null;					} ).promise();				},				// Get a promise for this deferred				// If obj is provided, the promise aspect is added to the object				promise: function( obj ) {					return obj != null ? jQuery.extend( obj, promise ) : promise;				}			},			deferred = {};		// Keep pipe for back-compat		promise.pipe = promise.then;		// Add list-specific methods		jQuery.each( tuples, function( i, tuple ) {			var list = tuple[ 2 ],				stateString = tuple[ 3 ];			// promise[ done | fail | progress ] = list.add			promise[ tuple[ 1 ] ] = list.add;			// Handle state			if ( stateString ) {				list.add( function() {					// state = [ resolved | rejected ]					state = stateString;				// [ reject_list | resolve_list ].disable; progress_list.lock				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );			}			// deferred[ resolve | reject | notify ]			deferred[ tuple[ 0 ] ] = function() {				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );				return this;			};			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;		} );		// Make the deferred a promise		promise.promise( deferred );		// Call given func if any		if ( func ) {			func.call( deferred, deferred );		}		// All done!		return deferred;	},	// Deferred helper	when: function( subordinate /* , ..., subordinateN */ ) {		var i = 0,			resolveValues = slice.call( arguments ),			length = resolveValues.length,			// the count of uncompleted subordinates			remaining = length !== 1 ||				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,			// the master Deferred.			// If resolveValues consist of only a single Deferred, just use that.			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),			// Update function for both resolve and progress values			updateFunc = function( i, contexts, values ) {				return function( value ) {					contexts[ i ] = this;					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;					if ( values === progressValues ) {						deferred.notifyWith( contexts, values );					} else if ( !( --remaining ) ) {						deferred.resolveWith( contexts, values );					}				};			},			progressValues, progressContexts, resolveContexts;		// Add listeners to Deferred subordinates; treat others as resolved		if ( length > 1 ) {			progressValues = new Array( length );			progressContexts = new Array( length );			resolveContexts = new Array( length );			for ( ; i < length; i++ ) {				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {					resolveValues[ i ].promise()						.progress( updateFunc( i, progressContexts, progressValues ) )						.done( updateFunc( i, resolveContexts, resolveValues ) )						.fail( deferred.reject );				} else {					--remaining;				}			}		}		// If we're not waiting on anything, resolve the master		if ( !remaining ) {			deferred.resolveWith( resolveContexts, resolveValues );		}		return deferred.promise();	}} );// The deferred used on DOM readyvar readyList;jQuery.fn.ready = function( fn ) {	// Add the callback	jQuery.ready.promise().done( fn );	return this;};jQuery.extend( {	// Is the DOM ready to be used? Set to true once it occurs.	isReady: false,	// A counter to track how many items to wait for before	// the ready event fires. See #6781	readyWait: 1,	// Hold (or release) the ready event	holdReady: function( hold ) {		if ( hold ) {			jQuery.readyWait++;		} else {			jQuery.ready( true );		}	},	// Handle when the DOM is ready	ready: function( wait ) {		// Abort if there are pending holds or we're already ready		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {			return;		}		// Remember that the DOM is ready		jQuery.isReady = true;		// If a normal DOM Ready event fired, decrement, and wait if need be		if ( wait !== true && --jQuery.readyWait > 0 ) {			return;		}		// If there are functions bound, to execute		readyList.resolveWith( document, [ jQuery ] );		// Trigger any bound ready events		if ( jQuery.fn.triggerHandler ) {			jQuery( document ).triggerHandler( "ready" );			jQuery( document ).off( "ready" );		}	}} );/** * The ready event handler and self cleanup method */function completed() {	document.removeEventListener( "DOMContentLoaded", completed );	window.removeEventListener( "load", completed );	jQuery.ready();}jQuery.ready.promise = function( obj ) {	if ( !readyList ) {		readyList = jQuery.Deferred();		// Catch cases where $(document).ready() is called		// after the browser event has already occurred.		// Support: IE9-10 only		// Older IE sometimes signals "interactive" too soon		if ( document.readyState === "complete" ||			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {			// Handle it asynchronously to allow scripts the opportunity to delay ready			window.setTimeout( jQuery.ready );		} else {			// Use the handy event callback			document.addEventListener( "DOMContentLoaded", completed );			// A fallback to window.onload, that will always work			window.addEventListener( "load", completed );		}	}	return readyList.promise( obj );};// Kick off the DOM ready check even if the user does notjQuery.ready.promise();// Multifunctional method to get and set values of a collection// The value/s can optionally be executed if it's a functionvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {	var i = 0,		len = elems.length,		bulk = key == null;	// Sets many values	if ( jQuery.type( key ) === "object" ) {		chainable = true;		for ( i in key ) {			access( elems, fn, i, key[ i ], true, emptyGet, raw );		}	// Sets one value	} else if ( value !== undefined ) {		chainable = true;		if ( !jQuery.isFunction( value ) ) {			raw = true;		}		if ( bulk ) {			// Bulk operations run against the entire set			if ( raw ) {				fn.call( elems, value );				fn = null;			// ...except when executing function values			} else {				bulk = fn;				fn = function( elem, key, value ) {					return bulk.call( jQuery( elem ), value );				};			}		}		if ( fn ) {			for ( ; i < len; i++ ) {				fn(					elems[ i ], key, raw ?					value :					value.call( elems[ i ], i, fn( elems[ i ], key ) )				);			}		}	}	return chainable ?		elems :		// Gets		bulk ?			fn.call( elems ) :			len ? fn( elems[ 0 ], key ) : emptyGet;};var acceptData = function( owner ) {	// Accepts only:	//  - Node	//    - Node.ELEMENT_NODE	//    - Node.DOCUMENT_NODE	//  - Object	//    - Any	/* jshint -W018 */	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );};function Data() {	this.expando = jQuery.expando + Data.uid++;}Data.uid = 1;Data.prototype = {	register: function( owner, initial ) {		var value = initial || {};		// If it is a node unlikely to be stringify-ed or looped over		// use plain assignment		if ( owner.nodeType ) {			owner[ this.expando ] = value;		// Otherwise secure it in a non-enumerable, non-writable property		// configurability must be true to allow the property to be		// deleted with the delete operator		} else {			Object.defineProperty( owner, this.expando, {				value: value,				writable: true,				configurable: true			} );		}		return owner[ this.expando ];	},	cache: function( owner ) {		// We can accept data for non-element nodes in modern browsers,		// but we should not, see #8335.		// Always return an empty object.		if ( !acceptData( owner ) ) {			return {};		}		// Check if the owner object already has a cache		var value = owner[ this.expando ];		// If not, create one		if ( !value ) {			value = {};			// We can accept data for non-element nodes in modern browsers,			// but we should not, see #8335.			// Always return an empty object.			if ( acceptData( owner ) ) {				// If it is a node unlikely to be stringify-ed or looped over				// use plain assignment				if ( owner.nodeType ) {					owner[ this.expando ] = value;				// Otherwise secure it in a non-enumerable property				// configurable must be true to allow the property to be				// deleted when data is removed				} else {					Object.defineProperty( owner, this.expando, {						value: value,						configurable: true					} );				}			}		}		return value;	},	set: function( owner, data, value ) {		var prop,			cache = this.cache( owner );		// Handle: [ owner, key, value ] args		if ( typeof data === "string" ) {			cache[ data ] = value;		// Handle: [ owner, { properties } ] args		} else {			// Copy the properties one-by-one to the cache object			for ( prop in data ) {				cache[ prop ] = data[ prop ];			}		}		return cache;	},	get: function( owner, key ) {		return key === undefined ?			this.cache( owner ) :			owner[ this.expando ] && owner[ this.expando ][ key ];	},	access: function( owner, key, value ) {		var stored;		// In cases where either:		//		//   1. No key was specified		//   2. A string key was specified, but no value provided		//		// Take the "read" path and allow the get method to determine		// which value to return, respectively either:		//		//   1. The entire cache object		//   2. The data stored at the key		//		if ( key === undefined ||				( ( key && typeof key === "string" ) && value === undefined ) ) {			stored = this.get( owner, key );			return stored !== undefined ?				stored : this.get( owner, jQuery.camelCase( key ) );		}		// When the key is not a string, or both a key and value		// are specified, set or extend (existing objects) with either:		//		//   1. An object of properties		//   2. A key and value		//		this.set( owner, key, value );		// Since the "set" path can have two possible entry points		// return the expected data based on which path was taken[*]		return value !== undefined ? value : key;	},	remove: function( owner, key ) {		var i, name, camel,			cache = owner[ this.expando ];		if ( cache === undefined ) {			return;		}		if ( key === undefined ) {			this.register( owner );		} else {			// Support array or space separated string of keys			if ( jQuery.isArray( key ) ) {				// If "name" is an array of keys...				// When data is initially created, via ("key", "val") signature,				// keys will be converted to camelCase.				// Since there is no way to tell _how_ a key was added, remove				// both plain key and camelCase key. #12786				// This will only penalize the array argument path.				name = key.concat( key.map( jQuery.camelCase ) );			} else {				camel = jQuery.camelCase( key );				// Try the string as a key before any manipulation				if ( key in cache ) {					name = [ key, camel ];				} else {					// If a key with the spaces exists, use it.					// Otherwise, create an array by matching non-whitespace					name = camel;					name = name in cache ?						[ name ] : ( name.match( rnotwhite ) || [] );				}			}			i = name.length;			while ( i-- ) {				delete cache[ name[ i ] ];			}		}		// Remove the expando if there's no more data		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {			// Support: Chrome <= 35-45+			// Webkit & Blink performance suffers when deleting properties			// from DOM nodes, so set to undefined instead			// https://code.google.com/p/chromium/issues/detail?id=378607			if ( owner.nodeType ) {				owner[ this.expando ] = undefined;			} else {				delete owner[ this.expando ];			}		}	},	hasData: function( owner ) {		var cache = owner[ this.expando ];		return cache !== undefined && !jQuery.isEmptyObject( cache );	}};var dataPriv = new Data();var dataUser = new Data();//	Implementation Summary////	1. Enforce API surface and semantic compatibility with 1.9.x branch//	2. Improve the module's maintainability by reducing the storage//		paths to a single mechanism.//	3. Use the same single mechanism to support "private" and "user" data.//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)//	5. Avoid exposing implementation details on user objects (eg. expando properties)//	6. Provide a clear path for implementation upgrade to WeakMap in 2014var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,	rmultiDash = /[A-Z]/g;function dataAttr( elem, key, data ) {	var name;	// If nothing was found internally, try to fetch any	// data from the HTML5 data-* attribute	if ( data === undefined && elem.nodeType === 1 ) {		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();		data = elem.getAttribute( name );		if ( typeof data === "string" ) {			try {				data = data === "true" ? true :					data === "false" ? false :					data === "null" ? null :					// Only convert to a number if it doesn't change the string					+data + "" === data ? +data :					rbrace.test( data ) ? jQuery.parseJSON( data ) :					data;			} catch ( e ) {}			// Make sure we set the data so it isn't changed later			dataUser.set( elem, key, data );		} else {			data = undefined;		}	}	return data;}jQuery.extend( {	hasData: function( elem ) {		return dataUser.hasData( elem ) || dataPriv.hasData( elem );	},	data: function( elem, name, data ) {		return dataUser.access( elem, name, data );	},	removeData: function( elem, name ) {		dataUser.remove( elem, name );	},	// TODO: Now that all calls to _data and _removeData have been replaced	// with direct calls to dataPriv methods, these can be deprecated.	_data: function( elem, name, data ) {		return dataPriv.access( elem, name, data );	},	_removeData: function( elem, name ) {		dataPriv.remove( elem, name );	}} );jQuery.fn.extend( {	data: function( key, value ) {		var i, name, data,			elem = this[ 0 ],			attrs = elem && elem.attributes;		// Gets all values		if ( key === undefined ) {			if ( this.length ) {				data = dataUser.get( elem );				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {					i = attrs.length;					while ( i-- ) {						// Support: IE11+						// The attrs elements can be null (#14894)						if ( attrs[ i ] ) {							name = attrs[ i ].name;							if ( name.indexOf( "data-" ) === 0 ) {								name = jQuery.camelCase( name.slice( 5 ) );								dataAttr( elem, name, data[ name ] );							}						}					}					dataPriv.set( elem, "hasDataAttrs", true );				}			}			return data;		}		// Sets multiple values		if ( typeof key === "object" ) {			return this.each( function() {				dataUser.set( this, key );			} );		}		return access( this, function( value ) {			var data, camelKey;			// The calling jQuery object (element matches) is not empty			// (and therefore has an element appears at this[ 0 ]) and the			// `value` parameter was not undefined. An empty jQuery object			// will result in `undefined` for elem = this[ 0 ] which will			// throw an exception if an attempt to read a data cache is made.			if ( elem && value === undefined ) {				// Attempt to get data from the cache				// with the key as-is				data = dataUser.get( elem, key ) ||					// Try to find dashed key if it exists (gh-2779)					// This is for 2.2.x only					dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );				if ( data !== undefined ) {					return data;				}				camelKey = jQuery.camelCase( key );				// Attempt to get data from the cache				// with the key camelized				data = dataUser.get( elem, camelKey );				if ( data !== undefined ) {					return data;				}				// Attempt to "discover" the data in				// HTML5 custom data-* attrs				data = dataAttr( elem, camelKey, undefined );				if ( data !== undefined ) {					return data;				}				// We tried really hard, but the data doesn't exist.				return;			}			// Set the data...			camelKey = jQuery.camelCase( key );			this.each( function() {				// First, attempt to store a copy or reference of any				// data that might've been store with a camelCased key.				var data = dataUser.get( this, camelKey );				// For HTML5 data-* attribute interop, we have to				// store property names with dashes in a camelCase form.				// This might not apply to all properties...*				dataUser.set( this, camelKey, value );				// *... In the case of properties that might _actually_				// have dashes, we need to also store a copy of that				// unchanged property.				if ( key.indexOf( "-" ) > -1 && data !== undefined ) {					dataUser.set( this, key, value );				}			} );		}, null, value, arguments.length > 1, null, true );	},	removeData: function( key ) {		return this.each( function() {			dataUser.remove( this, key );		} );	}} );jQuery.extend( {	queue: function( elem, type, data ) {		var queue;		if ( elem ) {			type = ( type || "fx" ) + "queue";			queue = dataPriv.get( elem, type );			// Speed up dequeue by getting out quickly if this is just a lookup			if ( data ) {				if ( !queue || jQuery.isArray( data ) ) {					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );				} else {					queue.push( data );				}			}			return queue || [];		}	},	dequeue: function( elem, type ) {		type = type || "fx";		var queue = jQuery.queue( elem, type ),			startLength = queue.length,			fn = queue.shift(),			hooks = jQuery._queueHooks( elem, type ),			next = function() {				jQuery.dequeue( elem, type );			};		// If the fx queue is dequeued, always remove the progress sentinel		if ( fn === "inprogress" ) {			fn = queue.shift();			startLength--;		}		if ( fn ) {			// Add a progress sentinel to prevent the fx queue from being			// automatically dequeued			if ( type === "fx" ) {				queue.unshift( "inprogress" );			}			// Clear up the last queue stop function			delete hooks.stop;			fn.call( elem, next, hooks );		}		if ( !startLength && hooks ) {			hooks.empty.fire();		}	},	// Not public - generate a queueHooks object, or return the current one	_queueHooks: function( elem, type ) {		var key = type + "queueHooks";		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {			empty: jQuery.Callbacks( "once memory" ).add( function() {				dataPriv.remove( elem, [ type + "queue", key ] );			} )		} );	}} );jQuery.fn.extend( {	queue: function( type, data ) {		var setter = 2;		if ( typeof type !== "string" ) {			data = type;			type = "fx";			setter--;		}		if ( arguments.length < setter ) {			return jQuery.queue( this[ 0 ], type );		}		return data === undefined ?			this :			this.each( function() {				var queue = jQuery.queue( this, type, data );				// Ensure a hooks for this queue				jQuery._queueHooks( this, type );				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {					jQuery.dequeue( this, type );				}			} );	},	dequeue: function( type ) {		return this.each( function() {			jQuery.dequeue( this, type );		} );	},	clearQueue: function( type ) {		return this.queue( type || "fx", [] );	},	// Get a promise resolved when queues of a certain type	// are emptied (fx is the type by default)	promise: function( type, obj ) {		var tmp,			count = 1,			defer = jQuery.Deferred(),			elements = this,			i = this.length,			resolve = function() {				if ( !( --count ) ) {					defer.resolveWith( elements, [ elements ] );				}			};		if ( typeof type !== "string" ) {			obj = type;			type = undefined;		}		type = type || "fx";		while ( i-- ) {			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );			if ( tmp && tmp.empty ) {				count++;				tmp.empty.add( resolve );			}		}		resolve();		return defer.promise( obj );	}} );var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );var cssExpand = [ "Top", "Right", "Bottom", "Left" ];var isHidden = function( elem, el ) {		// isHidden might be called from jQuery#filter function;		// in that case, element will be second argument		elem = el || elem;		return jQuery.css( elem, "display" ) === "none" ||			!jQuery.contains( elem.ownerDocument, elem );	};function adjustCSS( elem, prop, valueParts, tween ) {	var adjusted,		scale = 1,		maxIterations = 20,		currentValue = tween ?			function() { return tween.cur(); } :			function() { return jQuery.css( elem, prop, "" ); },		initial = currentValue(),		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),		// Starting value computation is required for potential unit mismatches		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&			rcssNum.exec( jQuery.css( elem, prop ) );	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {		// Trust units reported by jQuery.css		unit = unit || initialInUnit[ 3 ];		// Make sure we update the tween properties later on		valueParts = valueParts || [];		// Iteratively approximate from a nonzero starting point		initialInUnit = +initial || 1;		do {			// If previous iteration zeroed out, double until we get *something*.			// Use string for doubling so we don't accidentally see scale as unchanged below			scale = scale || ".5";			// Adjust and apply			initialInUnit = initialInUnit / scale;			jQuery.style( elem, prop, initialInUnit + unit );		// Update scale, tolerating zero or NaN from tween.cur()		// Break the loop if scale is unchanged or perfect, or if we've just had enough.		} while (			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations		);	}	if ( valueParts ) {		initialInUnit = +initialInUnit || +initial || 0;		// Apply relative offset (+=/-=) if specified		adjusted = valueParts[ 1 ] ?			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :			+valueParts[ 2 ];		if ( tween ) {			tween.unit = unit;			tween.start = initialInUnit;			tween.end = adjusted;		}	}	return adjusted;}var rcheckableType = ( /^(?:checkbox|radio)$/i );var rtagName = ( /<([\w:-]+)/ );var rscriptType = ( /^$|\/(?:java|ecma)script/i );// We have to close these tags to support XHTML (#13200)var wrapMap = {	// Support: IE9	option: [ 1, "<select multiple='multiple'>", "</select>" ],	// XHTML parsers do not magically insert elements in the	// same way that tag soup parsers do. So we cannot shorten	// this by omitting <tbody> or other required elements.	thead: [ 1, "<table>", "</table>" ],	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],	tr: [ 2, "<table><tbody>", "</tbody></table>" ],	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],	_default: [ 0, "", "" ]};// Support: IE9wrapMap.optgroup = wrapMap.option;wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;wrapMap.th = wrapMap.td;function getAll( context, tag ) {	// Support: IE9-11+	// Use typeof to avoid zero-argument method invocation on host objects (#15151)	var ret = typeof context.getElementsByTagName !== "undefined" ?			context.getElementsByTagName( tag || "*" ) :			typeof context.querySelectorAll !== "undefined" ?				context.querySelectorAll( tag || "*" ) :			[];	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?		jQuery.merge( [ context ], ret ) :		ret;}// Mark scripts as having already been evaluatedfunction setGlobalEval( elems, refElements ) {	var i = 0,		l = elems.length;	for ( ; i < l; i++ ) {		dataPriv.set(			elems[ i ],			"globalEval",			!refElements || dataPriv.get( refElements[ i ], "globalEval" )		);	}}var rhtml = /<|&#?\w+;/;function buildFragment( elems, context, scripts, selection, ignored ) {	var elem, tmp, tag, wrap, contains, j,		fragment = context.createDocumentFragment(),		nodes = [],		i = 0,		l = elems.length;	for ( ; i < l; i++ ) {		elem = elems[ i ];		if ( elem || elem === 0 ) {			// Add nodes directly			if ( jQuery.type( elem ) === "object" ) {				// Support: Android<4.1, PhantomJS<2				// push.apply(_, arraylike) throws on ancient WebKit				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );			// Convert non-html into a text node			} else if ( !rhtml.test( elem ) ) {				nodes.push( context.createTextNode( elem ) );			// Convert html into DOM nodes			} else {				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );				// Deserialize a standard representation				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();				wrap = wrapMap[ tag ] || wrapMap._default;				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];				// Descend through wrappers to the right content				j = wrap[ 0 ];				while ( j-- ) {					tmp = tmp.lastChild;				}				// Support: Android<4.1, PhantomJS<2				// push.apply(_, arraylike) throws on ancient WebKit				jQuery.merge( nodes, tmp.childNodes );				// Remember the top-level container				tmp = fragment.firstChild;				// Ensure the created nodes are orphaned (#12392)				tmp.textContent = "";			}		}	}	// Remove wrapper from fragment	fragment.textContent = "";	i = 0;	while ( ( elem = nodes[ i++ ] ) ) {		// Skip elements already in the context collection (trac-4087)		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {			if ( ignored ) {				ignored.push( elem );			}			continue;		}		contains = jQuery.contains( elem.ownerDocument, elem );		// Append to fragment		tmp = getAll( fragment.appendChild( elem ), "script" );		// Preserve script evaluation history		if ( contains ) {			setGlobalEval( tmp );		}		// Capture executables		if ( scripts ) {			j = 0;			while ( ( elem = tmp[ j++ ] ) ) {				if ( rscriptType.test( elem.type || "" ) ) {					scripts.push( elem );				}			}		}	}	return fragment;}( function() {	var fragment = document.createDocumentFragment(),		div = fragment.appendChild( document.createElement( "div" ) ),		input = document.createElement( "input" );	// Support: Android 4.0-4.3, Safari<=5.1	// Check state lost if the name is set (#11217)	// Support: Windows Web Apps (WWA)	// `name` and `type` must use .setAttribute for WWA (#14901)	input.setAttribute( "type", "radio" );	input.setAttribute( "checked", "checked" );	input.setAttribute( "name", "t" );	div.appendChild( input );	// Support: Safari<=5.1, Android<4.2	// Older WebKit doesn't clone checked state correctly in fragments	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;	// Support: IE<=11+	// Make sure textarea (and checkbox) defaultValue is properly cloned	div.innerHTML = "<textarea>x</textarea>";	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;} )();var	rkeyEvent = /^key/,	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;function returnTrue() {	return true;}function returnFalse() {	return false;}// Support: IE9// See #13393 for more infofunction safeActiveElement() {	try {		return document.activeElement;	} catch ( err ) { }}function on( elem, types, selector, data, fn, one ) {	var origFn, type;	// Types can be a map of types/handlers	if ( typeof types === "object" ) {		// ( types-Object, selector, data )		if ( typeof selector !== "string" ) {			// ( types-Object, data )			data = data || selector;			selector = undefined;		}		for ( type in types ) {			on( elem, type, selector, data, types[ type ], one );		}		return elem;	}	if ( data == null && fn == null ) {		// ( types, fn )		fn = selector;		data = selector = undefined;	} else if ( fn == null ) {		if ( typeof selector === "string" ) {			// ( types, selector, fn )			fn = data;			data = undefined;		} else {			// ( types, data, fn )			fn = data;			data = selector;			selector = undefined;		}	}	if ( fn === false ) {		fn = returnFalse;	} else if ( !fn ) {		return elem;	}	if ( one === 1 ) {		origFn = fn;		fn = function( event ) {			// Can use an empty set, since event contains the info			jQuery().off( event );			return origFn.apply( this, arguments );		};		// Use same guid so caller can remove using origFn		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );	}	return elem.each( function() {		jQuery.event.add( this, types, fn, data, selector );	} );}/* * Helper functions for managing events -- not part of the public interface. * Props to Dean Edwards' addEvent library for many of the ideas. */jQuery.event = {	global: {},	add: function( elem, types, handler, data, selector ) {		var handleObjIn, eventHandle, tmp,			events, t, handleObj,			special, handlers, type, namespaces, origType,			elemData = dataPriv.get( elem );		// Don't attach events to noData or text/comment nodes (but allow plain objects)		if ( !elemData ) {			return;		}		// Caller can pass in an object of custom data in lieu of the handler		if ( handler.handler ) {			handleObjIn = handler;			handler = handleObjIn.handler;			selector = handleObjIn.selector;		}		// Make sure that the handler has a unique ID, used to find/remove it later		if ( !handler.guid ) {			handler.guid = jQuery.guid++;		}		// Init the element's event structure and main handler, if this is the first		if ( !( events = elemData.events ) ) {			events = elemData.events = {};		}		if ( !( eventHandle = elemData.handle ) ) {			eventHandle = elemData.handle = function( e ) {				// Discard the second event of a jQuery.event.trigger() and				// when an event is called after a page has unloaded				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?					jQuery.event.dispatch.apply( elem, arguments ) : undefined;			};		}		// Handle multiple events separated by a space		types = ( types || "" ).match( rnotwhite ) || [ "" ];		t = types.length;		while ( t-- ) {			tmp = rtypenamespace.exec( types[ t ] ) || [];			type = origType = tmp[ 1 ];			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();			// There *must* be a type, no attaching namespace-only handlers			if ( !type ) {				continue;			}			// If event changes its type, use the special event handlers for the changed type			special = jQuery.event.special[ type ] || {};			// If selector defined, determine special event api type, otherwise given type			type = ( selector ? special.delegateType : special.bindType ) || type;			// Update special based on newly reset type			special = jQuery.event.special[ type ] || {};			// handleObj is passed to all event handlers			handleObj = jQuery.extend( {				type: type,				origType: origType,				data: data,				handler: handler,				guid: handler.guid,				selector: selector,				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),				namespace: namespaces.join( "." )			}, handleObjIn );			// Init the event handler queue if we're the first			if ( !( handlers = events[ type ] ) ) {				handlers = events[ type ] = [];				handlers.delegateCount = 0;				// Only use addEventListener if the special events handler returns false				if ( !special.setup ||					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {					if ( elem.addEventListener ) {						elem.addEventListener( type, eventHandle );					}				}			}			if ( special.add ) {				special.add.call( elem, handleObj );				if ( !handleObj.handler.guid ) {					handleObj.handler.guid = handler.guid;				}			}			// Add to the element's handler list, delegates in front			if ( selector ) {				handlers.splice( handlers.delegateCount++, 0, handleObj );			} else {				handlers.push( handleObj );			}			// Keep track of which events have ever been used, for event optimization			jQuery.event.global[ type ] = true;		}	},	// Detach an event or set of events from an element	remove: function( elem, types, handler, selector, mappedTypes ) {		var j, origCount, tmp,			events, t, handleObj,			special, handlers, type, namespaces, origType,			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );		if ( !elemData || !( events = elemData.events ) ) {			return;		}		// Once for each type.namespace in types; type may be omitted		types = ( types || "" ).match( rnotwhite ) || [ "" ];		t = types.length;		while ( t-- ) {			tmp = rtypenamespace.exec( types[ t ] ) || [];			type = origType = tmp[ 1 ];			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();			// Unbind all events (on this namespace, if provided) for the element			if ( !type ) {				for ( type in events ) {					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );				}				continue;			}			special = jQuery.event.special[ type ] || {};			type = ( selector ? special.delegateType : special.bindType ) || type;			handlers = events[ type ] || [];			tmp = tmp[ 2 ] &&				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );			// Remove matching events			origCount = j = handlers.length;			while ( j-- ) {				handleObj = handlers[ j ];				if ( ( mappedTypes || origType === handleObj.origType ) &&					( !handler || handler.guid === handleObj.guid ) &&					( !tmp || tmp.test( handleObj.namespace ) ) &&					( !selector || selector === handleObj.selector ||						selector === "**" && handleObj.selector ) ) {					handlers.splice( j, 1 );					if ( handleObj.selector ) {						handlers.delegateCount--;					}					if ( special.remove ) {						special.remove.call( elem, handleObj );					}				}			}			// Remove generic event handler if we removed something and no more handlers exist			// (avoids potential for endless recursion during removal of special event handlers)			if ( origCount && !handlers.length ) {				if ( !special.teardown ||					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {					jQuery.removeEvent( elem, type, elemData.handle );				}				delete events[ type ];			}		}		// Remove data and the expando if it's no longer used		if ( jQuery.isEmptyObject( events ) ) {			dataPriv.remove( elem, "handle events" );		}	},	dispatch: function( event ) {		// Make a writable jQuery.Event from the native event object		event = jQuery.event.fix( event );		var i, j, ret, matched, handleObj,			handlerQueue = [],			args = slice.call( arguments ),			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],			special = jQuery.event.special[ event.type ] || {};		// Use the fix-ed jQuery.Event rather than the (read-only) native event		args[ 0 ] = event;		event.delegateTarget = this;		// Call the preDispatch hook for the mapped type, and let it bail if desired		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {			return;		}		// Determine handlers		handlerQueue = jQuery.event.handlers.call( this, event, handlers );		// Run delegates first; they may want to stop propagation beneath us		i = 0;		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {			event.currentTarget = matched.elem;			j = 0;			while ( ( handleObj = matched.handlers[ j++ ] ) &&				!event.isImmediatePropagationStopped() ) {				// Triggered event must either 1) have no namespace, or 2) have namespace(s)				// a subset or equal to those in the bound event (both can have no namespace).				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {					event.handleObj = handleObj;					event.data = handleObj.data;					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||						handleObj.handler ).apply( matched.elem, args );					if ( ret !== undefined ) {						if ( ( event.result = ret ) === false ) {							event.preventDefault();							event.stopPropagation();						}					}				}			}		}		// Call the postDispatch hook for the mapped type		if ( special.postDispatch ) {			special.postDispatch.call( this, event );		}		return event.result;	},	handlers: function( event, handlers ) {		var i, matches, sel, handleObj,			handlerQueue = [],			delegateCount = handlers.delegateCount,			cur = event.target;		// Support (at least): Chrome, IE9		// Find delegate handlers		// Black-hole SVG <use> instance trees (#13180)		//		// Support: Firefox<=42+		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)		if ( delegateCount && cur.nodeType &&			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {			for ( ; cur !== this; cur = cur.parentNode || this ) {				// Don't check non-elements (#13208)				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {					matches = [];					for ( i = 0; i < delegateCount; i++ ) {						handleObj = handlers[ i ];						// Don't conflict with Object.prototype properties (#13203)						sel = handleObj.selector + " ";						if ( matches[ sel ] === undefined ) {							matches[ sel ] = handleObj.needsContext ?								jQuery( sel, this ).index( cur ) > -1 :								jQuery.find( sel, this, null, [ cur ] ).length;						}						if ( matches[ sel ] ) {							matches.push( handleObj );						}					}					if ( matches.length ) {						handlerQueue.push( { elem: cur, handlers: matches } );					}				}			}		}		// Add the remaining (directly-bound) handlers		if ( delegateCount < handlers.length ) {			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );		}		return handlerQueue;	},	// Includes some event props shared by KeyEvent and MouseEvent	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),	fixHooks: {},	keyHooks: {		props: "char charCode key keyCode".split( " " ),		filter: function( event, original ) {			// Add which for key events			if ( event.which == null ) {				event.which = original.charCode != null ? original.charCode : original.keyCode;			}			return event;		}	},	mouseHooks: {		props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +			"screenX screenY toElement" ).split( " " ),		filter: function( event, original ) {			var eventDoc, doc, body,				button = original.button;			// Calculate pageX/Y if missing and clientX/Y available			if ( event.pageX == null && original.clientX != null ) {				eventDoc = event.target.ownerDocument || document;				doc = eventDoc.documentElement;				body = eventDoc.body;				event.pageX = original.clientX +					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -					( doc && doc.clientLeft || body && body.clientLeft || 0 );				event.pageY = original.clientY +					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -					( doc && doc.clientTop  || body && body.clientTop  || 0 );			}			// Add which for click: 1 === left; 2 === middle; 3 === right			// Note: button is not normalized, so don't use it			if ( !event.which && button !== undefined ) {				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );			}			return event;		}	},	fix: function( event ) {		if ( event[ jQuery.expando ] ) {			return event;		}		// Create a writable copy of the event object and normalize some properties		var i, prop, copy,			type = event.type,			originalEvent = event,			fixHook = this.fixHooks[ type ];		if ( !fixHook ) {			this.fixHooks[ type ] = fixHook =				rmouseEvent.test( type ) ? this.mouseHooks :				rkeyEvent.test( type ) ? this.keyHooks :				{};		}		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;		event = new jQuery.Event( originalEvent );		i = copy.length;		while ( i-- ) {			prop = copy[ i ];			event[ prop ] = originalEvent[ prop ];		}		// Support: Cordova 2.5 (WebKit) (#13255)		// All events should have a target; Cordova deviceready doesn't		if ( !event.target ) {			event.target = document;		}		// Support: Safari 6.0+, Chrome<28		// Target should not be a text node (#504, #13143)		if ( event.target.nodeType === 3 ) {			event.target = event.target.parentNode;		}		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;	},	special: {		load: {			// Prevent triggered image.load events from bubbling to window.load			noBubble: true		},		focus: {			// Fire native event if possible so blur/focus sequence is correct			trigger: function() {				if ( this !== safeActiveElement() && this.focus ) {					this.focus();					return false;				}			},			delegateType: "focusin"		},		blur: {			trigger: function() {				if ( this === safeActiveElement() && this.blur ) {					this.blur();					return false;				}			},			delegateType: "focusout"		},		click: {			// For checkbox, fire native event so checked state will be right			trigger: function() {				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {					this.click();					return false;				}			},			// For cross-browser consistency, don't fire native .click() on links			_default: function( event ) {				return jQuery.nodeName( event.target, "a" );			}		},		beforeunload: {			postDispatch: function( event ) {				// Support: Firefox 20+				// Firefox doesn't alert if the returnValue field is not set.				if ( event.result !== undefined && event.originalEvent ) {					event.originalEvent.returnValue = event.result;				}			}		}	}};jQuery.removeEvent = function( elem, type, handle ) {	// This "if" is needed for plain objects	if ( elem.removeEventListener ) {		elem.removeEventListener( type, handle );	}};jQuery.Event = function( src, props ) {	// Allow instantiation without the 'new' keyword	if ( !( this instanceof jQuery.Event ) ) {		return new jQuery.Event( src, props );	}	// Event object	if ( src && src.type ) {		this.originalEvent = src;		this.type = src.type;		// Events bubbling up the document may have been marked as prevented		// by a handler lower down the tree; reflect the correct value.		this.isDefaultPrevented = src.defaultPrevented ||				src.defaultPrevented === undefined &&				// Support: Android<4.0				src.returnValue === false ?			returnTrue :			returnFalse;	// Event type	} else {		this.type = src;	}	// Put explicitly provided properties onto the event object	if ( props ) {		jQuery.extend( this, props );	}	// Create a timestamp if incoming event doesn't have one	this.timeStamp = src && src.timeStamp || jQuery.now();	// Mark it as fixed	this[ jQuery.expando ] = true;};// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.htmljQuery.Event.prototype = {	constructor: jQuery.Event,	isDefaultPrevented: returnFalse,	isPropagationStopped: returnFalse,	isImmediatePropagationStopped: returnFalse,	isSimulated: false,	preventDefault: function() {		var e = this.originalEvent;		this.isDefaultPrevented = returnTrue;		if ( e && !this.isSimulated ) {			e.preventDefault();		}	},	stopPropagation: function() {		var e = this.originalEvent;		this.isPropagationStopped = returnTrue;		if ( e && !this.isSimulated ) {			e.stopPropagation();		}	},	stopImmediatePropagation: function() {		var e = this.originalEvent;		this.isImmediatePropagationStopped = returnTrue;		if ( e && !this.isSimulated ) {			e.stopImmediatePropagation();		}		this.stopPropagation();	}};// Create mouseenter/leave events using mouseover/out and event-time checks// so that event delegation works in jQuery.// Do the same for pointerenter/pointerleave and pointerover/pointerout//// Support: Safari 7 only// Safari sends mouseenter too often; see:// https://code.google.com/p/chromium/issues/detail?id=470258// for the description of the bug (it existed in older Chrome versions as well).jQuery.each( {	mouseenter: "mouseover",	mouseleave: "mouseout",	pointerenter: "pointerover",	pointerleave: "pointerout"}, function( orig, fix ) {	jQuery.event.special[ orig ] = {		delegateType: fix,		bindType: fix,		handle: function( event ) {			var ret,				target = this,				related = event.relatedTarget,				handleObj = event.handleObj;			// For mouseenter/leave call the handler if related is outside the target.			// NB: No relatedTarget if the mouse left/entered the browser window			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {				event.type = handleObj.origType;				ret = handleObj.handler.apply( this, arguments );				event.type = fix;			}			return ret;		}	};} );jQuery.fn.extend( {	on: function( types, selector, data, fn ) {		return on( this, types, selector, data, fn );	},	one: function( types, selector, data, fn ) {		return on( this, types, selector, data, fn, 1 );	},	off: function( types, selector, fn ) {		var handleObj, type;		if ( types && types.preventDefault && types.handleObj ) {			// ( event )  dispatched jQuery.Event			handleObj = types.handleObj;			jQuery( types.delegateTarget ).off(				handleObj.namespace ?					handleObj.origType + "." + handleObj.namespace :					handleObj.origType,				handleObj.selector,				handleObj.handler			);			return this;		}		if ( typeof types === "object" ) {			// ( types-object [, selector] )			for ( type in types ) {				this.off( type, selector, types[ type ] );			}			return this;		}		if ( selector === false || typeof selector === "function" ) {			// ( types [, fn] )			fn = selector;			selector = undefined;		}		if ( fn === false ) {			fn = returnFalse;		}		return this.each( function() {			jQuery.event.remove( this, types, fn, selector );		} );	}} );var	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,	// Support: IE 10-11, Edge 10240+	// In IE/Edge using regex groups here causes severe slowdowns.	// See https://connect.microsoft.com/IE/feedback/details/1736512/	rnoInnerhtml = /<script|<style|<link/i,	// checked="checked" or checked	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,	rscriptTypeMasked = /^true\/(.*)/,	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;// Manipulating tables requires a tbodyfunction manipulationTarget( elem, content ) {	return jQuery.nodeName( elem, "table" ) &&		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?		elem.getElementsByTagName( "tbody" )[ 0 ] ||			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :		elem;}// Replace/restore the type attribute of script elements for safe DOM manipulationfunction disableScript( elem ) {	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;	return elem;}function restoreScript( elem ) {	var match = rscriptTypeMasked.exec( elem.type );	if ( match ) {		elem.type = match[ 1 ];	} else {		elem.removeAttribute( "type" );	}	return elem;}function cloneCopyEvent( src, dest ) {	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;	if ( dest.nodeType !== 1 ) {		return;	}	// 1. Copy private data: events, handlers, etc.	if ( dataPriv.hasData( src ) ) {		pdataOld = dataPriv.access( src );		pdataCur = dataPriv.set( dest, pdataOld );		events = pdataOld.events;		if ( events ) {			delete pdataCur.handle;			pdataCur.events = {};			for ( type in events ) {				for ( i = 0, l = events[ type ].length; i < l; i++ ) {					jQuery.event.add( dest, type, events[ type ][ i ] );				}			}		}	}	// 2. Copy user data	if ( dataUser.hasData( src ) ) {		udataOld = dataUser.access( src );		udataCur = jQuery.extend( {}, udataOld );		dataUser.set( dest, udataCur );	}}// Fix IE bugs, see support testsfunction fixInput( src, dest ) {	var nodeName = dest.nodeName.toLowerCase();	// Fails to persist the checked state of a cloned checkbox or radio button.	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {		dest.checked = src.checked;	// Fails to return the selected option to the default selected state when cloning options	} else if ( nodeName === "input" || nodeName === "textarea" ) {		dest.defaultValue = src.defaultValue;	}}function domManip( collection, args, callback, ignored ) {	// Flatten any nested arrays	args = concat.apply( [], args );	var fragment, first, scripts, hasScripts, node, doc,		i = 0,		l = collection.length,		iNoClone = l - 1,		value = args[ 0 ],		isFunction = jQuery.isFunction( value );	// We can't cloneNode fragments that contain checked, in WebKit	if ( isFunction ||			( l > 1 && typeof value === "string" &&				!support.checkClone && rchecked.test( value ) ) ) {		return collection.each( function( index ) {			var self = collection.eq( index );			if ( isFunction ) {				args[ 0 ] = value.call( this, index, self.html() );			}			domManip( self, args, callback, ignored );		} );	}	if ( l ) {		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );		first = fragment.firstChild;		if ( fragment.childNodes.length === 1 ) {			fragment = first;		}		// Require either new content or an interest in ignored elements to invoke the callback		if ( first || ignored ) {			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );			hasScripts = scripts.length;			// Use the original fragment for the last item			// instead of the first because it can end up			// being emptied incorrectly in certain situations (#8070).			for ( ; i < l; i++ ) {				node = fragment;				if ( i !== iNoClone ) {					node = jQuery.clone( node, true, true );					// Keep references to cloned scripts for later restoration					if ( hasScripts ) {						// Support: Android<4.1, PhantomJS<2						// push.apply(_, arraylike) throws on ancient WebKit						jQuery.merge( scripts, getAll( node, "script" ) );					}				}				callback.call( collection[ i ], node, i );			}			if ( hasScripts ) {				doc = scripts[ scripts.length - 1 ].ownerDocument;				// Reenable scripts				jQuery.map( scripts, restoreScript );				// Evaluate executable scripts on first document insertion				for ( i = 0; i < hasScripts; i++ ) {					node = scripts[ i ];					if ( rscriptType.test( node.type || "" ) &&						!dataPriv.access( node, "globalEval" ) &&						jQuery.contains( doc, node ) ) {						if ( node.src ) {							// Optional AJAX dependency, but won't run scripts if not present							if ( jQuery._evalUrl ) {								jQuery._evalUrl( node.src );							}						} else {							jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );						}					}				}			}		}	}	return collection;}function remove( elem, selector, keepData ) {	var node,		nodes = selector ? jQuery.filter( selector, elem ) : elem,		i = 0;	for ( ; ( node = nodes[ i ] ) != null; i++ ) {		if ( !keepData && node.nodeType === 1 ) {			jQuery.cleanData( getAll( node ) );		}		if ( node.parentNode ) {			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {				setGlobalEval( getAll( node, "script" ) );			}			node.parentNode.removeChild( node );		}	}	return elem;}jQuery.extend( {	htmlPrefilter: function( html ) {		return html.replace( rxhtmlTag, "<$1></$2>" );	},	clone: function( elem, dataAndEvents, deepDataAndEvents ) {		var i, l, srcElements, destElements,			clone = elem.cloneNode( true ),			inPage = jQuery.contains( elem.ownerDocument, elem );		// Fix IE cloning issues		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&				!jQuery.isXMLDoc( elem ) ) {			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2			destElements = getAll( clone );			srcElements = getAll( elem );			for ( i = 0, l = srcElements.length; i < l; i++ ) {				fixInput( srcElements[ i ], destElements[ i ] );			}		}		// Copy the events from the original to the clone		if ( dataAndEvents ) {			if ( deepDataAndEvents ) {				srcElements = srcElements || getAll( elem );				destElements = destElements || getAll( clone );				for ( i = 0, l = srcElements.length; i < l; i++ ) {					cloneCopyEvent( srcElements[ i ], destElements[ i ] );				}			} else {				cloneCopyEvent( elem, clone );			}		}		// Preserve script evaluation history		destElements = getAll( clone, "script" );		if ( destElements.length > 0 ) {			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );		}		// Return the cloned set		return clone;	},	cleanData: function( elems ) {		var data, elem, type,			special = jQuery.event.special,			i = 0;		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {			if ( acceptData( elem ) ) {				if ( ( data = elem[ dataPriv.expando ] ) ) {					if ( data.events ) {						for ( type in data.events ) {							if ( special[ type ] ) {								jQuery.event.remove( elem, type );							// This is a shortcut to avoid jQuery.event.remove's overhead							} else {								jQuery.removeEvent( elem, type, data.handle );							}						}					}					// Support: Chrome <= 35-45+					// Assign undefined instead of using delete, see Data#remove					elem[ dataPriv.expando ] = undefined;				}				if ( elem[ dataUser.expando ] ) {					// Support: Chrome <= 35-45+					// Assign undefined instead of using delete, see Data#remove					elem[ dataUser.expando ] = undefined;				}			}		}	}} );jQuery.fn.extend( {	// Keep domManip exposed until 3.0 (gh-2225)	domManip: domManip,	detach: function( selector ) {		return remove( this, selector, true );	},	remove: function( selector ) {		return remove( this, selector );	},	text: function( value ) {		return access( this, function( value ) {			return value === undefined ?				jQuery.text( this ) :				this.empty().each( function() {					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {						this.textContent = value;					}				} );		}, null, value, arguments.length );	},	append: function() {		return domManip( this, arguments, function( elem ) {			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {				var target = manipulationTarget( this, elem );				target.appendChild( elem );			}		} );	},	prepend: function() {		return domManip( this, arguments, function( elem ) {			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {				var target = manipulationTarget( this, elem );				target.insertBefore( elem, target.firstChild );			}		} );	},	before: function() {		return domManip( this, arguments, function( elem ) {			if ( this.parentNode ) {				this.parentNode.insertBefore( elem, this );			}		} );	},	after: function() {		return domManip( this, arguments, function( elem ) {			if ( this.parentNode ) {				this.parentNode.insertBefore( elem, this.nextSibling );			}		} );	},	empty: function() {		var elem,			i = 0;		for ( ; ( elem = this[ i ] ) != null; i++ ) {			if ( elem.nodeType === 1 ) {				// Prevent memory leaks				jQuery.cleanData( getAll( elem, false ) );				// Remove any remaining nodes				elem.textContent = "";			}		}		return this;	},	clone: function( dataAndEvents, deepDataAndEvents ) {		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;		return this.map( function() {			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );		} );	},	html: function( value ) {		return access( this, function( value ) {			var elem = this[ 0 ] || {},				i = 0,				l = this.length;			if ( value === undefined && elem.nodeType === 1 ) {				return elem.innerHTML;			}			// See if we can take a shortcut and just use innerHTML			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {				value = jQuery.htmlPrefilter( value );				try {					for ( ; i < l; i++ ) {						elem = this[ i ] || {};						// Remove element nodes and prevent memory leaks						if ( elem.nodeType === 1 ) {							jQuery.cleanData( getAll( elem, false ) );							elem.innerHTML = value;						}					}					elem = 0;				// If using innerHTML throws an exception, use the fallback method				} catch ( e ) {}			}			if ( elem ) {				this.empty().append( value );			}		}, null, value, arguments.length );	},	replaceWith: function() {		var ignored = [];		// Make the changes, replacing each non-ignored context element with the new content		return domManip( this, arguments, function( elem ) {			var parent = this.parentNode;			if ( jQuery.inArray( this, ignored ) < 0 ) {				jQuery.cleanData( getAll( this ) );				if ( parent ) {					parent.replaceChild( elem, this );				}			}		// Force callback invocation		}, ignored );	}} );jQuery.each( {	appendTo: "append",	prependTo: "prepend",	insertBefore: "before",	insertAfter: "after",	replaceAll: "replaceWith"}, function( name, original ) {	jQuery.fn[ name ] = function( selector ) {		var elems,			ret = [],			insert = jQuery( selector ),			last = insert.length - 1,			i = 0;		for ( ; i <= last; i++ ) {			elems = i === last ? this : this.clone( true );			jQuery( insert[ i ] )[ original ]( elems );			// Support: QtWebKit			// .get() because push.apply(_, arraylike) throws			push.apply( ret, elems.get() );		}		return this.pushStack( ret );	};} );var iframe,	elemdisplay = {		// Support: Firefox		// We have to pre-define these values for FF (#10227)		HTML: "block",		BODY: "block"	};/** * Retrieve the actual display of a element * @param {String} name nodeName of the element * @param {Object} doc Document object */// Called only from within defaultDisplayfunction actualDisplay( name, doc ) {	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),		display = jQuery.css( elem[ 0 ], "display" );	// We don't have any data stored on the element,	// so use "detach" method as fast way to get rid of the element	elem.detach();	return display;}/** * Try to determine the default display value of an element * @param {String} nodeName */function defaultDisplay( nodeName ) {	var doc = document,		display = elemdisplay[ nodeName ];	if ( !display ) {		display = actualDisplay( nodeName, doc );		// If the simple way fails, read from inside an iframe		if ( display === "none" || !display ) {			// Use the already-created iframe if possible			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )				.appendTo( doc.documentElement );			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse			doc = iframe[ 0 ].contentDocument;			// Support: IE			doc.write();			doc.close();			display = actualDisplay( nodeName, doc );			iframe.detach();		}		// Store the correct default display		elemdisplay[ nodeName ] = display;	}	return display;}var rmargin = ( /^margin/ );var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );var getStyles = function( elem ) {		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)		// IE throws on elements created in popups		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"		var view = elem.ownerDocument.defaultView;		if ( !view || !view.opener ) {			view = window;		}		return view.getComputedStyle( elem );	};var swap = function( elem, options, callback, args ) {	var ret, name,		old = {};	// Remember the old values, and insert the new ones	for ( name in options ) {		old[ name ] = elem.style[ name ];		elem.style[ name ] = options[ name ];	}	ret = callback.apply( elem, args || [] );	// Revert the old values	for ( name in options ) {		elem.style[ name ] = old[ name ];	}	return ret;};var documentElement = document.documentElement;( function() {	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,		container = document.createElement( "div" ),		div = document.createElement( "div" );	// Finish early in limited (non-browser) environments	if ( !div.style ) {		return;	}	// Support: IE9-11+	// Style of cloned element affects source element cloned (#8908)	div.style.backgroundClip = "content-box";	div.cloneNode( true ).style.backgroundClip = "";	support.clearCloneStyle = div.style.backgroundClip === "content-box";	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +		"padding:0;margin-top:1px;position:absolute";	container.appendChild( div );	// Executing both pixelPosition & boxSizingReliable tests require only one layout	// so they're executed at the same time to save the second computation.	function computeStyleTests() {		div.style.cssText =			// Support: Firefox<29, Android 2.3			// Vendor-prefix box-sizing			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +			"position:relative;display:block;" +			"margin:auto;border:1px;padding:1px;" +			"top:1%;width:50%";		div.innerHTML = "";		documentElement.appendChild( container );		var divStyle = window.getComputedStyle( div );		pixelPositionVal = divStyle.top !== "1%";		reliableMarginLeftVal = divStyle.marginLeft === "2px";		boxSizingReliableVal = divStyle.width === "4px";		// Support: Android 4.0 - 4.3 only		// Some styles come back with percentage values, even though they shouldn't		div.style.marginRight = "50%";		pixelMarginRightVal = divStyle.marginRight === "4px";		documentElement.removeChild( container );	}	jQuery.extend( support, {		pixelPosition: function() {			// This test is executed only once but we still do memoizing			// since we can use the boxSizingReliable pre-computing.			// No need to check if the test was already performed, though.			computeStyleTests();			return pixelPositionVal;		},		boxSizingReliable: function() {			if ( boxSizingReliableVal == null ) {				computeStyleTests();			}			return boxSizingReliableVal;		},		pixelMarginRight: function() {			// Support: Android 4.0-4.3			// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal			// since that compresses better and they're computed together anyway.			if ( boxSizingReliableVal == null ) {				computeStyleTests();			}			return pixelMarginRightVal;		},		reliableMarginLeft: function() {			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37			if ( boxSizingReliableVal == null ) {				computeStyleTests();			}			return reliableMarginLeftVal;		},		reliableMarginRight: function() {			// Support: Android 2.3			// Check if div with explicit width and no margin-right incorrectly			// gets computed margin-right based on width of container. (#3333)			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right			// This support function is only executed once so no memoizing is needed.			var ret,				marginDiv = div.appendChild( document.createElement( "div" ) );			// Reset CSS: box-sizing; display; margin; border; padding			marginDiv.style.cssText = div.style.cssText =				// Support: Android 2.3				// Vendor-prefix box-sizing				"-webkit-box-sizing:content-box;box-sizing:content-box;" +				"display:block;margin:0;border:0;padding:0";			marginDiv.style.marginRight = marginDiv.style.width = "0";			div.style.width = "1px";			documentElement.appendChild( container );			ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );			documentElement.removeChild( container );			div.removeChild( marginDiv );			return ret;		}	} );} )();function curCSS( elem, name, computed ) {	var width, minWidth, maxWidth, ret,		style = elem.style;	computed = computed || getStyles( elem );	ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;	// Support: Opera 12.1x only	// Fall back to style even without computed	// computed is undefined for elems on document fragments	if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {		ret = jQuery.style( elem, name );	}	// Support: IE9	// getPropertyValue is only needed for .css('filter') (#12537)	if ( computed ) {		// A tribute to the "awesome hack by Dean Edwards"		// Android Browser returns percentage for some values,		// but width seems to be reliably pixels.		// This is against the CSSOM draft spec:		// http://dev.w3.org/csswg/cssom/#resolved-values		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {			// Remember the original values			width = style.width;			minWidth = style.minWidth;			maxWidth = style.maxWidth;			// Put in the new values to get a computed value out			style.minWidth = style.maxWidth = style.width = ret;			ret = computed.width;			// Revert the changed values			style.width = width;			style.minWidth = minWidth;			style.maxWidth = maxWidth;		}	}	return ret !== undefined ?		// Support: IE9-11+		// IE returns zIndex value as an integer.		ret + "" :		ret;}function addGetHookIf( conditionFn, hookFn ) {	// Define the hook, we'll check on the first run if it's really needed.	return {		get: function() {			if ( conditionFn() ) {				// Hook not needed (or it's not possible to use it due				// to missing dependency), remove it.				delete this.get;				return;			}			// Hook needed; redefine it so that the support test is not executed again.			return ( this.get = hookFn ).apply( this, arguments );		}	};}var	// Swappable if display is none or starts with table	// except "table", "table-cell", or "table-caption"	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display	rdisplayswap = /^(none|table(?!-c[ea]).+)/,	cssShow = { position: "absolute", visibility: "hidden", display: "block" },	cssNormalTransform = {		letterSpacing: "0",		fontWeight: "400"	},	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],	emptyStyle = document.createElement( "div" ).style;// Return a css property mapped to a potentially vendor prefixed propertyfunction vendorPropName( name ) {	// Shortcut for names that are not vendor prefixed	if ( name in emptyStyle ) {		return name;	}	// Check for vendor prefixed names	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),		i = cssPrefixes.length;	while ( i-- ) {		name = cssPrefixes[ i ] + capName;		if ( name in emptyStyle ) {			return name;		}	}}function setPositiveNumber( elem, value, subtract ) {	// Any relative (+/-) values have already been	// normalized at this point	var matches = rcssNum.exec( value );	return matches ?		// Guard against undefined "subtract", e.g., when used as in cssHooks		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :		value;}function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {	var i = extra === ( isBorderBox ? "border" : "content" ) ?		// If we already have the right measurement, avoid augmentation		4 :		// Otherwise initialize for horizontal or vertical properties		name === "width" ? 1 : 0,		val = 0;	for ( ; i < 4; i += 2 ) {		// Both box models exclude margin, so add it if we want it		if ( extra === "margin" ) {			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );		}		if ( isBorderBox ) {			// border-box includes padding, so remove it if we want content			if ( extra === "content" ) {				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );			}			// At this point, extra isn't border nor margin, so remove border			if ( extra !== "margin" ) {				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );			}		} else {			// At this point, extra isn't content, so add padding			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );			// At this point, extra isn't content nor padding, so add border			if ( extra !== "padding" ) {				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );			}		}	}	return val;}function getWidthOrHeight( elem, name, extra ) {	// Start with offset property, which is equivalent to the border-box value	var valueIsBorderBox = true,		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,		styles = getStyles( elem ),		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";	// Some non-html elements return undefined for offsetWidth, so check for null/undefined	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668	if ( val <= 0 || val == null ) {		// Fall back to computed then uncomputed css if necessary		val = curCSS( elem, name, styles );		if ( val < 0 || val == null ) {			val = elem.style[ name ];		}		// Computed unit is not pixels. Stop here and return.		if ( rnumnonpx.test( val ) ) {			return val;		}		// Check for style in case a browser which returns unreliable values		// for getComputedStyle silently falls back to the reliable elem.style		valueIsBorderBox = isBorderBox &&			( support.boxSizingReliable() || val === elem.style[ name ] );		// Normalize "", auto, and prepare for extra		val = parseFloat( val ) || 0;	}	// Use the active box-sizing model to add/subtract irrelevant styles	return ( val +		augmentWidthOrHeight(			elem,			name,			extra || ( isBorderBox ? "border" : "content" ),			valueIsBorderBox,			styles		)	) + "px";}function showHide( elements, show ) {	var display, elem, hidden,		values = [],		index = 0,		length = elements.length;	for ( ; index < length; index++ ) {		elem = elements[ index ];		if ( !elem.style ) {			continue;		}		values[ index ] = dataPriv.get( elem, "olddisplay" );		display = elem.style.display;		if ( show ) {			// Reset the inline display of this element to learn if it is			// being hidden by cascaded rules or not			if ( !values[ index ] && display === "none" ) {				elem.style.display = "";			}			// Set elements which have been overridden with display: none			// in a stylesheet to whatever the default browser style is			// for such an element			if ( elem.style.display === "" && isHidden( elem ) ) {				values[ index ] = dataPriv.access(					elem,					"olddisplay",					defaultDisplay( elem.nodeName )				);			}		} else {			hidden = isHidden( elem );			if ( display !== "none" || !hidden ) {				dataPriv.set(					elem,					"olddisplay",					hidden ? display : jQuery.css( elem, "display" )				);			}		}	}	// Set the display of most of the elements in a second loop	// to avoid the constant reflow	for ( index = 0; index < length; index++ ) {		elem = elements[ index ];		if ( !elem.style ) {			continue;		}		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {			elem.style.display = show ? values[ index ] || "" : "none";		}	}	return elements;}jQuery.extend( {	// Add in style property hooks for overriding the default	// behavior of getting and setting a style property	cssHooks: {		opacity: {			get: function( elem, computed ) {				if ( computed ) {					// We should always get a number back from opacity					var ret = curCSS( elem, "opacity" );					return ret === "" ? "1" : ret;				}			}		}	},	// Don't automatically add "px" to these possibly-unitless properties	cssNumber: {		"animationIterationCount": true,		"columnCount": true,		"fillOpacity": true,		"flexGrow": true,		"flexShrink": true,		"fontWeight": true,		"lineHeight": true,		"opacity": true,		"order": true,		"orphans": true,		"widows": true,		"zIndex": true,		"zoom": true	},	// Add in properties whose names you wish to fix before	// setting or getting the value	cssProps: {		"float": "cssFloat"	},	// Get and set the style property on a DOM Node	style: function( elem, name, value, extra ) {		// Don't set styles on text and comment nodes		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {			return;		}		// Make sure that we're working with the right name		var ret, type, hooks,			origName = jQuery.camelCase( name ),			style = elem.style;		name = jQuery.cssProps[ origName ] ||			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );		// Gets hook for the prefixed version, then unprefixed version		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];		// Check if we're setting a value		if ( value !== undefined ) {			type = typeof value;			// Convert "+=" or "-=" to relative numbers (#7345)			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {				value = adjustCSS( elem, name, ret );				// Fixes bug #9237				type = "number";			}			// Make sure that null and NaN values aren't set (#7116)			if ( value == null || value !== value ) {				return;			}			// If a number was passed in, add the unit (except for certain CSS properties)			if ( type === "number" ) {				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );			}			// Support: IE9-11+			// background-* props affect original clone's values			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {				style[ name ] = "inherit";			}			// If a hook was provided, use that value, otherwise just set the specified value			if ( !hooks || !( "set" in hooks ) ||				( value = hooks.set( elem, value, extra ) ) !== undefined ) {				style[ name ] = value;			}		} else {			// If a hook was provided get the non-computed value from there			if ( hooks && "get" in hooks &&				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {				return ret;			}			// Otherwise just get the value from the style object			return style[ name ];		}	},	css: function( elem, name, extra, styles ) {		var val, num, hooks,			origName = jQuery.camelCase( name );		// Make sure that we're working with the right name		name = jQuery.cssProps[ origName ] ||			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );		// Try prefixed name followed by the unprefixed name		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];		// If a hook was provided get the computed value from there		if ( hooks && "get" in hooks ) {			val = hooks.get( elem, true, extra );		}		// Otherwise, if a way to get the computed value exists, use that		if ( val === undefined ) {			val = curCSS( elem, name, styles );		}		// Convert "normal" to computed value		if ( val === "normal" && name in cssNormalTransform ) {			val = cssNormalTransform[ name ];		}		// Make numeric if forced or a qualifier was provided and val looks numeric		if ( extra === "" || extra ) {			num = parseFloat( val );			return extra === true || isFinite( num ) ? num || 0 : val;		}		return val;	}} );jQuery.each( [ "height", "width" ], function( i, name ) {	jQuery.cssHooks[ name ] = {		get: function( elem, computed, extra ) {			if ( computed ) {				// Certain elements can have dimension info if we invisibly show them				// but it must have a current display style that would benefit				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&					elem.offsetWidth === 0 ?						swap( elem, cssShow, function() {							return getWidthOrHeight( elem, name, extra );						} ) :						getWidthOrHeight( elem, name, extra );			}		},		set: function( elem, value, extra ) {			var matches,				styles = extra && getStyles( elem ),				subtract = extra && augmentWidthOrHeight(					elem,					name,					extra,					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",					styles				);			// Convert to pixels if value adjustment is needed			if ( subtract && ( matches = rcssNum.exec( value ) ) &&				( matches[ 3 ] || "px" ) !== "px" ) {				elem.style[ name ] = value;				value = jQuery.css( elem, name );			}			return setPositiveNumber( elem, value, subtract );		}	};} );jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,	function( elem, computed ) {		if ( computed ) {			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||				elem.getBoundingClientRect().left -					swap( elem, { marginLeft: 0 }, function() {						return elem.getBoundingClientRect().left;					} )				) + "px";		}	});// Support: Android 2.3jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,	function( elem, computed ) {		if ( computed ) {			return swap( elem, { "display": "inline-block" },				curCSS, [ elem, "marginRight" ] );		}	});// These hooks are used by animate to expand propertiesjQuery.each( {	margin: "",	padding: "",	border: "Width"}, function( prefix, suffix ) {	jQuery.cssHooks[ prefix + suffix ] = {		expand: function( value ) {			var i = 0,				expanded = {},				// Assumes a single number if not a string				parts = typeof value === "string" ? value.split( " " ) : [ value ];			for ( ; i < 4; i++ ) {				expanded[ prefix + cssExpand[ i ] + suffix ] =					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];			}			return expanded;		}	};	if ( !rmargin.test( prefix ) ) {		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;	}} );jQuery.fn.extend( {	css: function( name, value ) {		return access( this, function( elem, name, value ) {			var styles, len,				map = {},				i = 0;			if ( jQuery.isArray( name ) ) {				styles = getStyles( elem );				len = name.length;				for ( ; i < len; i++ ) {					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );				}				return map;			}			return value !== undefined ?				jQuery.style( elem, name, value ) :				jQuery.css( elem, name );		}, name, value, arguments.length > 1 );	},	show: function() {		return showHide( this, true );	},	hide: function() {		return showHide( this );	},	toggle: function( state ) {		if ( typeof state === "boolean" ) {			return state ? this.show() : this.hide();		}		return this.each( function() {			if ( isHidden( this ) ) {				jQuery( this ).show();			} else {				jQuery( this ).hide();			}		} );	}} );function Tween( elem, options, prop, end, easing ) {	return new Tween.prototype.init( elem, options, prop, end, easing );}jQuery.Tween = Tween;Tween.prototype = {	constructor: Tween,	init: function( elem, options, prop, end, easing, unit ) {		this.elem = elem;		this.prop = prop;		this.easing = easing || jQuery.easing._default;		this.options = options;		this.start = this.now = this.cur();		this.end = end;		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );	},	cur: function() {		var hooks = Tween.propHooks[ this.prop ];		return hooks && hooks.get ?			hooks.get( this ) :			Tween.propHooks._default.get( this );	},	run: function( percent ) {		var eased,			hooks = Tween.propHooks[ this.prop ];		if ( this.options.duration ) {			this.pos = eased = jQuery.easing[ this.easing ](				percent, this.options.duration * percent, 0, 1, this.options.duration			);		} else {			this.pos = eased = percent;		}		this.now = ( this.end - this.start ) * eased + this.start;		if ( this.options.step ) {			this.options.step.call( this.elem, this.now, this );		}		if ( hooks && hooks.set ) {			hooks.set( this );		} else {			Tween.propHooks._default.set( this );		}		return this;	}};Tween.prototype.init.prototype = Tween.prototype;Tween.propHooks = {	_default: {		get: function( tween ) {			var result;			// Use a property on the element directly when it is not a DOM element,			// or when there is no matching style property that exists.			if ( tween.elem.nodeType !== 1 ||				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {				return tween.elem[ tween.prop ];			}			// Passing an empty string as a 3rd parameter to .css will automatically			// attempt a parseFloat and fallback to a string if the parse fails.			// Simple values such as "10px" are parsed to Float;			// complex values such as "rotate(1rad)" are returned as-is.			result = jQuery.css( tween.elem, tween.prop, "" );			// Empty strings, null, undefined and "auto" are converted to 0.			return !result || result === "auto" ? 0 : result;		},		set: function( tween ) {			// Use step hook for back compat.			// Use cssHook if its there.			// Use .style if available and use plain properties where available.			if ( jQuery.fx.step[ tween.prop ] ) {				jQuery.fx.step[ tween.prop ]( tween );			} else if ( tween.elem.nodeType === 1 &&				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||					jQuery.cssHooks[ tween.prop ] ) ) {				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );			} else {				tween.elem[ tween.prop ] = tween.now;			}		}	}};// Support: IE9// Panic based approach to setting things on disconnected nodesTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {	set: function( tween ) {		if ( tween.elem.nodeType && tween.elem.parentNode ) {			tween.elem[ tween.prop ] = tween.now;		}	}};jQuery.easing = {	linear: function( p ) {		return p;	},	swing: function( p ) {		return 0.5 - Math.cos( p * Math.PI ) / 2;	},	_default: "swing"};jQuery.fx = Tween.prototype.init;// Back Compat <1.8 extension pointjQuery.fx.step = {};var	fxNow, timerId,	rfxtypes = /^(?:toggle|show|hide)$/,	rrun = /queueHooks$/;// Animations created synchronously will run synchronouslyfunction createFxNow() {	window.setTimeout( function() {		fxNow = undefined;	} );	return ( fxNow = jQuery.now() );}// Generate parameters to create a standard animationfunction genFx( type, includeWidth ) {	var which,		i = 0,		attrs = { height: type };	// If we include width, step value is 1 to do all cssExpand values,	// otherwise step value is 2 to skip over Left and Right	includeWidth = includeWidth ? 1 : 0;	for ( ; i < 4 ; i += 2 - includeWidth ) {		which = cssExpand[ i ];		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;	}	if ( includeWidth ) {		attrs.opacity = attrs.width = type;	}	return attrs;}function createTween( value, prop, animation ) {	var tween,		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),		index = 0,		length = collection.length;	for ( ; index < length; index++ ) {		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {			// We're done with this property			return tween;		}	}}function defaultPrefilter( elem, props, opts ) {	/* jshint validthis: true */	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,		anim = this,		orig = {},		style = elem.style,		hidden = elem.nodeType && isHidden( elem ),		dataShow = dataPriv.get( elem, "fxshow" );	// Handle queue: false promises	if ( !opts.queue ) {		hooks = jQuery._queueHooks( elem, "fx" );		if ( hooks.unqueued == null ) {			hooks.unqueued = 0;			oldfire = hooks.empty.fire;			hooks.empty.fire = function() {				if ( !hooks.unqueued ) {					oldfire();				}			};		}		hooks.unqueued++;		anim.always( function() {			// Ensure the complete handler is called before this completes			anim.always( function() {				hooks.unqueued--;				if ( !jQuery.queue( elem, "fx" ).length ) {					hooks.empty.fire();				}			} );		} );	}	// Height/width overflow pass	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {		// Make sure that nothing sneaks out		// Record all 3 overflow attributes because IE9-10 do not		// change the overflow attribute when overflowX and		// overflowY are set to the same value		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];		// Set display property to inline-block for height/width		// animations on inline elements that are having width/height animated		display = jQuery.css( elem, "display" );		// Test default display if display is currently "none"		checkDisplay = display === "none" ?			dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {			style.display = "inline-block";		}	}	if ( opts.overflow ) {		style.overflow = "hidden";		anim.always( function() {			style.overflow = opts.overflow[ 0 ];			style.overflowX = opts.overflow[ 1 ];			style.overflowY = opts.overflow[ 2 ];		} );	}	// show/hide pass	for ( prop in props ) {		value = props[ prop ];		if ( rfxtypes.exec( value ) ) {			delete props[ prop ];			toggle = toggle || value === "toggle";			if ( value === ( hidden ? "hide" : "show" ) ) {				// If there is dataShow left over from a stopped hide or show				// and we are going to proceed with show, we should pretend to be hidden				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {					hidden = true;				} else {					continue;				}			}			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );		// Any non-fx value stops us from restoring the original display value		} else {			display = undefined;		}	}	if ( !jQuery.isEmptyObject( orig ) ) {		if ( dataShow ) {			if ( "hidden" in dataShow ) {				hidden = dataShow.hidden;			}		} else {			dataShow = dataPriv.access( elem, "fxshow", {} );		}		// Store state if its toggle - enables .stop().toggle() to "reverse"		if ( toggle ) {			dataShow.hidden = !hidden;		}		if ( hidden ) {			jQuery( elem ).show();		} else {			anim.done( function() {				jQuery( elem ).hide();			} );		}		anim.done( function() {			var prop;			dataPriv.remove( elem, "fxshow" );			for ( prop in orig ) {				jQuery.style( elem, prop, orig[ prop ] );			}		} );		for ( prop in orig ) {			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );			if ( !( prop in dataShow ) ) {				dataShow[ prop ] = tween.start;				if ( hidden ) {					tween.end = tween.start;					tween.start = prop === "width" || prop === "height" ? 1 : 0;				}			}		}	// If this is a noop like .hide().hide(), restore an overwritten display value	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {		style.display = display;	}}function propFilter( props, specialEasing ) {	var index, name, easing, value, hooks;	// camelCase, specialEasing and expand cssHook pass	for ( index in props ) {		name = jQuery.camelCase( index );		easing = specialEasing[ name ];		value = props[ index ];		if ( jQuery.isArray( value ) ) {			easing = value[ 1 ];			value = props[ index ] = value[ 0 ];		}		if ( index !== name ) {			props[ name ] = value;			delete props[ index ];		}		hooks = jQuery.cssHooks[ name ];		if ( hooks && "expand" in hooks ) {			value = hooks.expand( value );			delete props[ name ];			// Not quite $.extend, this won't overwrite existing keys.			// Reusing 'index' because we have the correct "name"			for ( index in value ) {				if ( !( index in props ) ) {					props[ index ] = value[ index ];					specialEasing[ index ] = easing;				}			}		} else {			specialEasing[ name ] = easing;		}	}}function Animation( elem, properties, options ) {	var result,		stopped,		index = 0,		length = Animation.prefilters.length,		deferred = jQuery.Deferred().always( function() {			// Don't match elem in the :animated selector			delete tick.elem;		} ),		tick = function() {			if ( stopped ) {				return false;			}			var currentTime = fxNow || createFxNow(),				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),				// Support: Android 2.3				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)				temp = remaining / animation.duration || 0,				percent = 1 - temp,				index = 0,				length = animation.tweens.length;			for ( ; index < length ; index++ ) {				animation.tweens[ index ].run( percent );			}			deferred.notifyWith( elem, [ animation, percent, remaining ] );			if ( percent < 1 && length ) {				return remaining;			} else {				deferred.resolveWith( elem, [ animation ] );				return false;			}		},		animation = deferred.promise( {			elem: elem,			props: jQuery.extend( {}, properties ),			opts: jQuery.extend( true, {				specialEasing: {},				easing: jQuery.easing._default			}, options ),			originalProperties: properties,			originalOptions: options,			startTime: fxNow || createFxNow(),			duration: options.duration,			tweens: [],			createTween: function( prop, end ) {				var tween = jQuery.Tween( elem, animation.opts, prop, end,						animation.opts.specialEasing[ prop ] || animation.opts.easing );				animation.tweens.push( tween );				return tween;			},			stop: function( gotoEnd ) {				var index = 0,					// If we are going to the end, we want to run all the tweens					// otherwise we skip this part					length = gotoEnd ? animation.tweens.length : 0;				if ( stopped ) {					return this;				}				stopped = true;				for ( ; index < length ; index++ ) {					animation.tweens[ index ].run( 1 );				}				// Resolve when we played the last frame; otherwise, reject				if ( gotoEnd ) {					deferred.notifyWith( elem, [ animation, 1, 0 ] );					deferred.resolveWith( elem, [ animation, gotoEnd ] );				} else {					deferred.rejectWith( elem, [ animation, gotoEnd ] );				}				return this;			}		} ),		props = animation.props;	propFilter( props, animation.opts.specialEasing );	for ( ; index < length ; index++ ) {		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );		if ( result ) {			if ( jQuery.isFunction( result.stop ) ) {				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =					jQuery.proxy( result.stop, result );			}			return result;		}	}	jQuery.map( props, createTween, animation );	if ( jQuery.isFunction( animation.opts.start ) ) {		animation.opts.start.call( elem, animation );	}	jQuery.fx.timer(		jQuery.extend( tick, {			elem: elem,			anim: animation,			queue: animation.opts.queue		} )	);	// attach callbacks from options	return animation.progress( animation.opts.progress )		.done( animation.opts.done, animation.opts.complete )		.fail( animation.opts.fail )		.always( animation.opts.always );}jQuery.Animation = jQuery.extend( Animation, {	tweeners: {		"*": [ function( prop, value ) {			var tween = this.createTween( prop, value );			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );			return tween;		} ]	},	tweener: function( props, callback ) {		if ( jQuery.isFunction( props ) ) {			callback = props;			props = [ "*" ];		} else {			props = props.match( rnotwhite );		}		var prop,			index = 0,			length = props.length;		for ( ; index < length ; index++ ) {			prop = props[ index ];			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];			Animation.tweeners[ prop ].unshift( callback );		}	},	prefilters: [ defaultPrefilter ],	prefilter: function( callback, prepend ) {		if ( prepend ) {			Animation.prefilters.unshift( callback );		} else {			Animation.prefilters.push( callback );		}	}} );jQuery.speed = function( speed, easing, fn ) {	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {		complete: fn || !fn && easing ||			jQuery.isFunction( speed ) && speed,		duration: speed,		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing	};	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?		opt.duration : opt.duration in jQuery.fx.speeds ?			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;	// Normalize opt.queue - true/undefined/null -> "fx"	if ( opt.queue == null || opt.queue === true ) {		opt.queue = "fx";	}	// Queueing	opt.old = opt.complete;	opt.complete = function() {		if ( jQuery.isFunction( opt.old ) ) {			opt.old.call( this );		}		if ( opt.queue ) {			jQuery.dequeue( this, opt.queue );		}	};	return opt;};jQuery.fn.extend( {	fadeTo: function( speed, to, easing, callback ) {		// Show any hidden elements after setting opacity to 0		return this.filter( isHidden ).css( "opacity", 0 ).show()			// Animate to the value specified			.end().animate( { opacity: to }, speed, easing, callback );	},	animate: function( prop, speed, easing, callback ) {		var empty = jQuery.isEmptyObject( prop ),			optall = jQuery.speed( speed, easing, callback ),			doAnimation = function() {				// Operate on a copy of prop so per-property easing won't be lost				var anim = Animation( this, jQuery.extend( {}, prop ), optall );				// Empty animations, or finishing resolves immediately				if ( empty || dataPriv.get( this, "finish" ) ) {					anim.stop( true );				}			};			doAnimation.finish = doAnimation;		return empty || optall.queue === false ?			this.each( doAnimation ) :			this.queue( optall.queue, doAnimation );	},	stop: function( type, clearQueue, gotoEnd ) {		var stopQueue = function( hooks ) {			var stop = hooks.stop;			delete hooks.stop;			stop( gotoEnd );		};		if ( typeof type !== "string" ) {			gotoEnd = clearQueue;			clearQueue = type;			type = undefined;		}		if ( clearQueue && type !== false ) {			this.queue( type || "fx", [] );		}		return this.each( function() {			var dequeue = true,				index = type != null && type + "queueHooks",				timers = jQuery.timers,				data = dataPriv.get( this );			if ( index ) {				if ( data[ index ] && data[ index ].stop ) {					stopQueue( data[ index ] );				}			} else {				for ( index in data ) {					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {						stopQueue( data[ index ] );					}				}			}			for ( index = timers.length; index--; ) {				if ( timers[ index ].elem === this &&					( type == null || timers[ index ].queue === type ) ) {					timers[ index ].anim.stop( gotoEnd );					dequeue = false;					timers.splice( index, 1 );				}			}			// Start the next in the queue if the last step wasn't forced.			// Timers currently will call their complete callbacks, which			// will dequeue but only if they were gotoEnd.			if ( dequeue || !gotoEnd ) {				jQuery.dequeue( this, type );			}		} );	},	finish: function( type ) {		if ( type !== false ) {			type = type || "fx";		}		return this.each( function() {			var index,				data = dataPriv.get( this ),				queue = data[ type + "queue" ],				hooks = data[ type + "queueHooks" ],				timers = jQuery.timers,				length = queue ? queue.length : 0;			// Enable finishing flag on private data			data.finish = true;			// Empty the queue first			jQuery.queue( this, type, [] );			if ( hooks && hooks.stop ) {				hooks.stop.call( this, true );			}			// Look for any active animations, and finish them			for ( index = timers.length; index--; ) {				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {					timers[ index ].anim.stop( true );					timers.splice( index, 1 );				}			}			// Look for any animations in the old queue and finish them			for ( index = 0; index < length; index++ ) {				if ( queue[ index ] && queue[ index ].finish ) {					queue[ index ].finish.call( this );				}			}			// Turn off finishing flag			delete data.finish;		} );	}} );jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {	var cssFn = jQuery.fn[ name ];	jQuery.fn[ name ] = function( speed, easing, callback ) {		return speed == null || typeof speed === "boolean" ?			cssFn.apply( this, arguments ) :			this.animate( genFx( name, true ), speed, easing, callback );	};} );// Generate shortcuts for custom animationsjQuery.each( {	slideDown: genFx( "show" ),	slideUp: genFx( "hide" ),	slideToggle: genFx( "toggle" ),	fadeIn: { opacity: "show" },	fadeOut: { opacity: "hide" },	fadeToggle: { opacity: "toggle" }}, function( name, props ) {	jQuery.fn[ name ] = function( speed, easing, callback ) {		return this.animate( props, speed, easing, callback );	};} );jQuery.timers = [];jQuery.fx.tick = function() {	var timer,		i = 0,		timers = jQuery.timers;	fxNow = jQuery.now();	for ( ; i < timers.length; i++ ) {		timer = timers[ i ];		// Checks the timer has not already been removed		if ( !timer() && timers[ i ] === timer ) {			timers.splice( i--, 1 );		}	}	if ( !timers.length ) {		jQuery.fx.stop();	}	fxNow = undefined;};jQuery.fx.timer = function( timer ) {	jQuery.timers.push( timer );	if ( timer() ) {		jQuery.fx.start();	} else {		jQuery.timers.pop();	}};jQuery.fx.interval = 13;jQuery.fx.start = function() {	if ( !timerId ) {		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );	}};jQuery.fx.stop = function() {	window.clearInterval( timerId );	timerId = null;};jQuery.fx.speeds = {	slow: 600,	fast: 200,	// Default speed	_default: 400};// Based off of the plugin by Clint Helfers, with permission.// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/jQuery.fn.delay = function( time, type ) {	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;	type = type || "fx";	return this.queue( type, function( next, hooks ) {		var timeout = window.setTimeout( next, time );		hooks.stop = function() {			window.clearTimeout( timeout );		};	} );};( function() {	var input = document.createElement( "input" ),		select = document.createElement( "select" ),		opt = select.appendChild( document.createElement( "option" ) );	input.type = "checkbox";	// Support: iOS<=5.1, Android<=4.2+	// Default value for a checkbox should be "on"	support.checkOn = input.value !== "";	// Support: IE<=11+	// Must access selectedIndex to make default options select	support.optSelected = opt.selected;	// Support: Android<=2.3	// Options inside disabled selects are incorrectly marked as disabled	select.disabled = true;	support.optDisabled = !opt.disabled;	// Support: IE<=11+	// An input loses its value after becoming a radio	input = document.createElement( "input" );	input.value = "t";	input.type = "radio";	support.radioValue = input.value === "t";} )();var boolHook,	attrHandle = jQuery.expr.attrHandle;jQuery.fn.extend( {	attr: function( name, value ) {		return access( this, jQuery.attr, name, value, arguments.length > 1 );	},	removeAttr: function( name ) {		return this.each( function() {			jQuery.removeAttr( this, name );		} );	}} );jQuery.extend( {	attr: function( elem, name, value ) {		var ret, hooks,			nType = elem.nodeType;		// Don't get/set attributes on text, comment and attribute nodes		if ( nType === 3 || nType === 8 || nType === 2 ) {			return;		}		// Fallback to prop when attributes are not supported		if ( typeof elem.getAttribute === "undefined" ) {			return jQuery.prop( elem, name, value );		}		// All attributes are lowercase		// Grab necessary hook if one is defined		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {			name = name.toLowerCase();			hooks = jQuery.attrHooks[ name ] ||				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );		}		if ( value !== undefined ) {			if ( value === null ) {				jQuery.removeAttr( elem, name );				return;			}			if ( hooks && "set" in hooks &&				( ret = hooks.set( elem, value, name ) ) !== undefined ) {				return ret;			}			elem.setAttribute( name, value + "" );			return value;		}		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {			return ret;		}		ret = jQuery.find.attr( elem, name );		// Non-existent attributes return null, we normalize to undefined		return ret == null ? undefined : ret;	},	attrHooks: {		type: {			set: function( elem, value ) {				if ( !support.radioValue && value === "radio" &&					jQuery.nodeName( elem, "input" ) ) {					var val = elem.value;					elem.setAttribute( "type", value );					if ( val ) {						elem.value = val;					}					return value;				}			}		}	},	removeAttr: function( elem, value ) {		var name, propName,			i = 0,			attrNames = value && value.match( rnotwhite );		if ( attrNames && elem.nodeType === 1 ) {			while ( ( name = attrNames[ i++ ] ) ) {				propName = jQuery.propFix[ name ] || name;				// Boolean attributes get special treatment (#10870)				if ( jQuery.expr.match.bool.test( name ) ) {					// Set corresponding property to false					elem[ propName ] = false;				}				elem.removeAttribute( name );			}		}	}} );// Hooks for boolean attributesboolHook = {	set: function( elem, value, name ) {		if ( value === false ) {			// Remove boolean attributes when set to false			jQuery.removeAttr( elem, name );		} else {			elem.setAttribute( name, name );		}		return name;	}};jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {	var getter = attrHandle[ name ] || jQuery.find.attr;	attrHandle[ name ] = function( elem, name, isXML ) {		var ret, handle;		if ( !isXML ) {			// Avoid an infinite loop by temporarily removing this function from the getter			handle = attrHandle[ name ];			attrHandle[ name ] = ret;			ret = getter( elem, name, isXML ) != null ?				name.toLowerCase() :				null;			attrHandle[ name ] = handle;		}		return ret;	};} );var rfocusable = /^(?:input|select|textarea|button)$/i,	rclickable = /^(?:a|area)$/i;jQuery.fn.extend( {	prop: function( name, value ) {		return access( this, jQuery.prop, name, value, arguments.length > 1 );	},	removeProp: function( name ) {		return this.each( function() {			delete this[ jQuery.propFix[ name ] || name ];		} );	}} );jQuery.extend( {	prop: function( elem, name, value ) {		var ret, hooks,			nType = elem.nodeType;		// Don't get/set properties on text, comment and attribute nodes		if ( nType === 3 || nType === 8 || nType === 2 ) {			return;		}		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {			// Fix name and attach hooks			name = jQuery.propFix[ name ] || name;			hooks = jQuery.propHooks[ name ];		}		if ( value !== undefined ) {			if ( hooks && "set" in hooks &&				( ret = hooks.set( elem, value, name ) ) !== undefined ) {				return ret;			}			return ( elem[ name ] = value );		}		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {			return ret;		}		return elem[ name ];	},	propHooks: {		tabIndex: {			get: function( elem ) {				// elem.tabIndex doesn't always return the				// correct value when it hasn't been explicitly set				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/				// Use proper attribute retrieval(#12072)				var tabindex = jQuery.find.attr( elem, "tabindex" );				return tabindex ?					parseInt( tabindex, 10 ) :					rfocusable.test( elem.nodeName ) ||						rclickable.test( elem.nodeName ) && elem.href ?							0 :							-1;			}		}	},	propFix: {		"for": "htmlFor",		"class": "className"	}} );// Support: IE <=11 only// Accessing the selectedIndex property// forces the browser to respect setting selected// on the option// The getter ensures a default option is selected// when in an optgroupif ( !support.optSelected ) {	jQuery.propHooks.selected = {		get: function( elem ) {			var parent = elem.parentNode;			if ( parent && parent.parentNode ) {				parent.parentNode.selectedIndex;			}			return null;		},		set: function( elem ) {			var parent = elem.parentNode;			if ( parent ) {				parent.selectedIndex;				if ( parent.parentNode ) {					parent.parentNode.selectedIndex;				}			}		}	};}jQuery.each( [	"tabIndex",	"readOnly",	"maxLength",	"cellSpacing",	"cellPadding",	"rowSpan",	"colSpan",	"useMap",	"frameBorder",	"contentEditable"], function() {	jQuery.propFix[ this.toLowerCase() ] = this;} );var rclass = /[\t\r\n\f]/g;function getClass( elem ) {	return elem.getAttribute && elem.getAttribute( "class" ) || "";}jQuery.fn.extend( {	addClass: function( value ) {		var classes, elem, cur, curValue, clazz, j, finalValue,			i = 0;		if ( jQuery.isFunction( value ) ) {			return this.each( function( j ) {				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );			} );		}		if ( typeof value === "string" && value ) {			classes = value.match( rnotwhite ) || [];			while ( ( elem = this[ i++ ] ) ) {				curValue = getClass( elem );				cur = elem.nodeType === 1 &&					( " " + curValue + " " ).replace( rclass, " " );				if ( cur ) {					j = 0;					while ( ( clazz = classes[ j++ ] ) ) {						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {							cur += clazz + " ";						}					}					// Only assign if different to avoid unneeded rendering.					finalValue = jQuery.trim( cur );					if ( curValue !== finalValue ) {						elem.setAttribute( "class", finalValue );					}				}			}		}		return this;	},	removeClass: function( value ) {		var classes, elem, cur, curValue, clazz, j, finalValue,			i = 0;		if ( jQuery.isFunction( value ) ) {			return this.each( function( j ) {				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );			} );		}		if ( !arguments.length ) {			return this.attr( "class", "" );		}		if ( typeof value === "string" && value ) {			classes = value.match( rnotwhite ) || [];			while ( ( elem = this[ i++ ] ) ) {				curValue = getClass( elem );				// This expression is here for better compressibility (see addClass)				cur = elem.nodeType === 1 &&					( " " + curValue + " " ).replace( rclass, " " );				if ( cur ) {					j = 0;					while ( ( clazz = classes[ j++ ] ) ) {						// Remove *all* instances						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {							cur = cur.replace( " " + clazz + " ", " " );						}					}					// Only assign if different to avoid unneeded rendering.					finalValue = jQuery.trim( cur );					if ( curValue !== finalValue ) {						elem.setAttribute( "class", finalValue );					}				}			}		}		return this;	},	toggleClass: function( value, stateVal ) {		var type = typeof value;		if ( typeof stateVal === "boolean" && type === "string" ) {			return stateVal ? this.addClass( value ) : this.removeClass( value );		}		if ( jQuery.isFunction( value ) ) {			return this.each( function( i ) {				jQuery( this ).toggleClass(					value.call( this, i, getClass( this ), stateVal ),					stateVal				);			} );		}		return this.each( function() {			var className, i, self, classNames;			if ( type === "string" ) {				// Toggle individual class names				i = 0;				self = jQuery( this );				classNames = value.match( rnotwhite ) || [];				while ( ( className = classNames[ i++ ] ) ) {					// Check each className given, space separated list					if ( self.hasClass( className ) ) {						self.removeClass( className );					} else {						self.addClass( className );					}				}			// Toggle whole class name			} else if ( value === undefined || type === "boolean" ) {				className = getClass( this );				if ( className ) {					// Store className if set					dataPriv.set( this, "__className__", className );				}				// If the element has a class name or if we're passed `false`,				// then remove the whole classname (if there was one, the above saved it).				// Otherwise bring back whatever was previously saved (if anything),				// falling back to the empty string if nothing was stored.				if ( this.setAttribute ) {					this.setAttribute( "class",						className || value === false ?						"" :						dataPriv.get( this, "__className__" ) || ""					);				}			}		} );	},	hasClass: function( selector ) {		var className, elem,			i = 0;		className = " " + selector + " ";		while ( ( elem = this[ i++ ] ) ) {			if ( elem.nodeType === 1 &&				( " " + getClass( elem ) + " " ).replace( rclass, " " )					.indexOf( className ) > -1			) {				return true;			}		}		return false;	}} );var rreturn = /\r/g,	rspaces = /[\x20\t\r\n\f]+/g;jQuery.fn.extend( {	val: function( value ) {		var hooks, ret, isFunction,			elem = this[ 0 ];		if ( !arguments.length ) {			if ( elem ) {				hooks = jQuery.valHooks[ elem.type ] ||					jQuery.valHooks[ elem.nodeName.toLowerCase() ];				if ( hooks &&					"get" in hooks &&					( ret = hooks.get( elem, "value" ) ) !== undefined				) {					return ret;				}				ret = elem.value;				return typeof ret === "string" ?					// Handle most common string cases					ret.replace( rreturn, "" ) :					// Handle cases where value is null/undef or number					ret == null ? "" : ret;			}			return;		}		isFunction = jQuery.isFunction( value );		return this.each( function( i ) {			var val;			if ( this.nodeType !== 1 ) {				return;			}			if ( isFunction ) {				val = value.call( this, i, jQuery( this ).val() );			} else {				val = value;			}			// Treat null/undefined as ""; convert numbers to string			if ( val == null ) {				val = "";			} else if ( typeof val === "number" ) {				val += "";			} else if ( jQuery.isArray( val ) ) {				val = jQuery.map( val, function( value ) {					return value == null ? "" : value + "";				} );			}			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];			// If set returns undefined, fall back to normal setting			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {				this.value = val;			}		} );	}} );jQuery.extend( {	valHooks: {		option: {			get: function( elem ) {				var val = jQuery.find.attr( elem, "value" );				return val != null ?					val :					// Support: IE10-11+					// option.text throws exceptions (#14686, #14858)					// Strip and collapse whitespace					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );			}		},		select: {			get: function( elem ) {				var value, option,					options = elem.options,					index = elem.selectedIndex,					one = elem.type === "select-one" || index < 0,					values = one ? null : [],					max = one ? index + 1 : options.length,					i = index < 0 ?						max :						one ? index : 0;				// Loop through all the selected options				for ( ; i < max; i++ ) {					option = options[ i ];					// IE8-9 doesn't update selected after form reset (#2551)					if ( ( option.selected || i === index ) &&							// Don't return options that are disabled or in a disabled optgroup							( support.optDisabled ?								!option.disabled : option.getAttribute( "disabled" ) === null ) &&							( !option.parentNode.disabled ||								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {						// Get the specific value for the option						value = jQuery( option ).val();						// We don't need an array for one selects						if ( one ) {							return value;						}						// Multi-Selects return an array						values.push( value );					}				}				return values;			},			set: function( elem, value ) {				var optionSet, option,					options = elem.options,					values = jQuery.makeArray( value ),					i = options.length;				while ( i-- ) {					option = options[ i ];					if ( option.selected =						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1					) {						optionSet = true;					}				}				// Force browsers to behave consistently when non-matching value is set				if ( !optionSet ) {					elem.selectedIndex = -1;				}				return values;			}		}	}} );// Radios and checkboxes getter/setterjQuery.each( [ "radio", "checkbox" ], function() {	jQuery.valHooks[ this ] = {		set: function( elem, value ) {			if ( jQuery.isArray( value ) ) {				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );			}		}	};	if ( !support.checkOn ) {		jQuery.valHooks[ this ].get = function( elem ) {			return elem.getAttribute( "value" ) === null ? "on" : elem.value;		};	}} );// Return jQuery for attributes-only inclusionvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;jQuery.extend( jQuery.event, {	trigger: function( event, data, elem, onlyHandlers ) {		var i, cur, tmp, bubbleType, ontype, handle, special,			eventPath = [ elem || document ],			type = hasOwn.call( event, "type" ) ? event.type : event,			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];		cur = tmp = elem = elem || document;		// Don't do events on text and comment nodes		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {			return;		}		// focus/blur morphs to focusin/out; ensure we're not firing them right now		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {			return;		}		if ( type.indexOf( "." ) > -1 ) {			// Namespaced trigger; create a regexp to match event type in handle()			namespaces = type.split( "." );			type = namespaces.shift();			namespaces.sort();		}		ontype = type.indexOf( ":" ) < 0 && "on" + type;		// Caller can pass in a jQuery.Event object, Object, or just an event type string		event = event[ jQuery.expando ] ?			event :			new jQuery.Event( type, typeof event === "object" && event );		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)		event.isTrigger = onlyHandlers ? 2 : 3;		event.namespace = namespaces.join( "." );		event.rnamespace = event.namespace ?			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :			null;		// Clean up the event in case it is being reused		event.result = undefined;		if ( !event.target ) {			event.target = elem;		}		// Clone any incoming data and prepend the event, creating the handler arg list		data = data == null ?			[ event ] :			jQuery.makeArray( data, [ event ] );		// Allow special events to draw outside the lines		special = jQuery.event.special[ type ] || {};		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {			return;		}		// Determine event propagation path in advance, per W3C events spec (#9951)		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {			bubbleType = special.delegateType || type;			if ( !rfocusMorph.test( bubbleType + type ) ) {				cur = cur.parentNode;			}			for ( ; cur; cur = cur.parentNode ) {				eventPath.push( cur );				tmp = cur;			}			// Only add window if we got to document (e.g., not plain obj or detached DOM)			if ( tmp === ( elem.ownerDocument || document ) ) {				eventPath.push( tmp.defaultView || tmp.parentWindow || window );			}		}		// Fire handlers on the event path		i = 0;		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {			event.type = i > 1 ?				bubbleType :				special.bindType || type;			// jQuery handler			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&				dataPriv.get( cur, "handle" );			if ( handle ) {				handle.apply( cur, data );			}			// Native handler			handle = ontype && cur[ ontype ];			if ( handle && handle.apply && acceptData( cur ) ) {				event.result = handle.apply( cur, data );				if ( event.result === false ) {					event.preventDefault();				}			}		}		event.type = type;		// If nobody prevented the default action, do it now		if ( !onlyHandlers && !event.isDefaultPrevented() ) {			if ( ( !special._default ||				special._default.apply( eventPath.pop(), data ) === false ) &&				acceptData( elem ) ) {				// Call a native DOM method on the target with the same name name as the event.				// Don't do default actions on window, that's where global variables be (#6170)				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {					// Don't re-trigger an onFOO event when we call its FOO() method					tmp = elem[ ontype ];					if ( tmp ) {						elem[ ontype ] = null;					}					// Prevent re-triggering of the same event, since we already bubbled it above					jQuery.event.triggered = type;					elem[ type ]();					jQuery.event.triggered = undefined;					if ( tmp ) {						elem[ ontype ] = tmp;					}				}			}		}		return event.result;	},	// Piggyback on a donor event to simulate a different one	// Used only for `focus(in | out)` events	simulate: function( type, elem, event ) {		var e = jQuery.extend(			new jQuery.Event(),			event,			{				type: type,				isSimulated: true			}		);		jQuery.event.trigger( e, null, elem );	}} );jQuery.fn.extend( {	trigger: function( type, data ) {		return this.each( function() {			jQuery.event.trigger( type, data, this );		} );	},	triggerHandler: function( type, data ) {		var elem = this[ 0 ];		if ( elem ) {			return jQuery.event.trigger( type, data, elem, true );		}	}} );jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),	function( i, name ) {	// Handle event binding	jQuery.fn[ name ] = function( data, fn ) {		return arguments.length > 0 ?			this.on( name, null, data, fn ) :			this.trigger( name );	};} );jQuery.fn.extend( {	hover: function( fnOver, fnOut ) {		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );	}} );support.focusin = "onfocusin" in window;// Support: Firefox// Firefox doesn't have focus(in | out) events// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787//// Support: Chrome, Safari// focus(in | out) events fire after focus & blur events,// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857if ( !support.focusin ) {	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {		// Attach a single capturing handler on the document while someone wants focusin/focusout		var handler = function( event ) {			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );		};		jQuery.event.special[ fix ] = {			setup: function() {				var doc = this.ownerDocument || this,					attaches = dataPriv.access( doc, fix );				if ( !attaches ) {					doc.addEventListener( orig, handler, true );				}				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );			},			teardown: function() {				var doc = this.ownerDocument || this,					attaches = dataPriv.access( doc, fix ) - 1;				if ( !attaches ) {					doc.removeEventListener( orig, handler, true );					dataPriv.remove( doc, fix );				} else {					dataPriv.access( doc, fix, attaches );				}			}		};	} );}var location = window.location;var nonce = jQuery.now();var rquery = ( /\?/ );// Support: Android 2.3// Workaround failure to string-cast null inputjQuery.parseJSON = function( data ) {	return JSON.parse( data + "" );};// Cross-browser xml parsingjQuery.parseXML = function( data ) {	var xml;	if ( !data || typeof data !== "string" ) {		return null;	}	// Support: IE9	try {		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );	} catch ( e ) {		xml = undefined;	}	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {		jQuery.error( "Invalid XML: " + data );	}	return xml;};var	rhash = /#.*$/,	rts = /([?&])_=[^&]*/,	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,	// #7653, #8125, #8152: local protocol detection	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,	rnoContent = /^(?:GET|HEAD)$/,	rprotocol = /^\/\//,	/* Prefilters	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)	 * 2) These are called:	 *    - BEFORE asking for a transport	 *    - AFTER param serialization (s.data is a string if s.processData is true)	 * 3) key is the dataType	 * 4) the catchall symbol "*" can be used	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed	 */	prefilters = {},	/* Transports bindings	 * 1) key is the dataType	 * 2) the catchall symbol "*" can be used	 * 3) selection will start with transport dataType and THEN go to "*" if needed	 */	transports = {},	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression	allTypes = "*/".concat( "*" ),	// Anchor tag for parsing the document origin	originAnchor = document.createElement( "a" );	originAnchor.href = location.href;// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransportfunction addToPrefiltersOrTransports( structure ) {	// dataTypeExpression is optional and defaults to "*"	return function( dataTypeExpression, func ) {		if ( typeof dataTypeExpression !== "string" ) {			func = dataTypeExpression;			dataTypeExpression = "*";		}		var dataType,			i = 0,			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];		if ( jQuery.isFunction( func ) ) {			// For each dataType in the dataTypeExpression			while ( ( dataType = dataTypes[ i++ ] ) ) {				// Prepend if requested				if ( dataType[ 0 ] === "+" ) {					dataType = dataType.slice( 1 ) || "*";					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );				// Otherwise append				} else {					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );				}			}		}	};}// Base inspection function for prefilters and transportsfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {	var inspected = {},		seekingTransport = ( structure === transports );	function inspect( dataType ) {		var selected;		inspected[ dataType ] = true;		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );			if ( typeof dataTypeOrTransport === "string" &&				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {				options.dataTypes.unshift( dataTypeOrTransport );				inspect( dataTypeOrTransport );				return false;			} else if ( seekingTransport ) {				return !( selected = dataTypeOrTransport );			}		} );		return selected;	}	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );}// A special extend for ajax options// that takes "flat" options (not to be deep extended)// Fixes #9887function ajaxExtend( target, src ) {	var key, deep,		flatOptions = jQuery.ajaxSettings.flatOptions || {};	for ( key in src ) {		if ( src[ key ] !== undefined ) {			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];		}	}	if ( deep ) {		jQuery.extend( true, target, deep );	}	return target;}/* Handles responses to an ajax request: * - finds the right dataType (mediates between content-type and expected dataType) * - returns the corresponding response */function ajaxHandleResponses( s, jqXHR, responses ) {	var ct, type, finalDataType, firstDataType,		contents = s.contents,		dataTypes = s.dataTypes;	// Remove auto dataType and get content-type in the process	while ( dataTypes[ 0 ] === "*" ) {		dataTypes.shift();		if ( ct === undefined ) {			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );		}	}	// Check if we're dealing with a known content-type	if ( ct ) {		for ( type in contents ) {			if ( contents[ type ] && contents[ type ].test( ct ) ) {				dataTypes.unshift( type );				break;			}		}	}	// Check to see if we have a response for the expected dataType	if ( dataTypes[ 0 ] in responses ) {		finalDataType = dataTypes[ 0 ];	} else {		// Try convertible dataTypes		for ( type in responses ) {			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {				finalDataType = type;				break;			}			if ( !firstDataType ) {				firstDataType = type;			}		}		// Or just use first one		finalDataType = finalDataType || firstDataType;	}	// If we found a dataType	// We add the dataType to the list if needed	// and return the corresponding response	if ( finalDataType ) {		if ( finalDataType !== dataTypes[ 0 ] ) {			dataTypes.unshift( finalDataType );		}		return responses[ finalDataType ];	}}/* Chain conversions given the request and the original response * Also sets the responseXXX fields on the jqXHR instance */function ajaxConvert( s, response, jqXHR, isSuccess ) {	var conv2, current, conv, tmp, prev,		converters = {},		// Work with a copy of dataTypes in case we need to modify it for conversion		dataTypes = s.dataTypes.slice();	// Create converters map with lowercased keys	if ( dataTypes[ 1 ] ) {		for ( conv in s.converters ) {			converters[ conv.toLowerCase() ] = s.converters[ conv ];		}	}	current = dataTypes.shift();	// Convert to each sequential dataType	while ( current ) {		if ( s.responseFields[ current ] ) {			jqXHR[ s.responseFields[ current ] ] = response;		}		// Apply the dataFilter if provided		if ( !prev && isSuccess && s.dataFilter ) {			response = s.dataFilter( response, s.dataType );		}		prev = current;		current = dataTypes.shift();		if ( current ) {		// There's only work to do if current dataType is non-auto			if ( current === "*" ) {				current = prev;			// Convert response if prev dataType is non-auto and differs from current			} else if ( prev !== "*" && prev !== current ) {				// Seek a direct converter				conv = converters[ prev + " " + current ] || converters[ "* " + current ];				// If none found, seek a pair				if ( !conv ) {					for ( conv2 in converters ) {						// If conv2 outputs current						tmp = conv2.split( " " );						if ( tmp[ 1 ] === current ) {							// If prev can be converted to accepted input							conv = converters[ prev + " " + tmp[ 0 ] ] ||								converters[ "* " + tmp[ 0 ] ];							if ( conv ) {								// Condense equivalence converters								if ( conv === true ) {									conv = converters[ conv2 ];								// Otherwise, insert the intermediate dataType								} else if ( converters[ conv2 ] !== true ) {									current = tmp[ 0 ];									dataTypes.unshift( tmp[ 1 ] );								}								break;							}						}					}				}				// Apply converter (if not an equivalence)				if ( conv !== true ) {					// Unless errors are allowed to bubble, catch and return them					if ( conv && s.throws ) {						response = conv( response );					} else {						try {							response = conv( response );						} catch ( e ) {							return {								state: "parsererror",								error: conv ? e : "No conversion from " + prev + " to " + current							};						}					}				}			}		}	}	return { state: "success", data: response };}jQuery.extend( {	// Counter for holding the number of active queries	active: 0,	// Last-Modified header cache for next request	lastModified: {},	etag: {},	ajaxSettings: {		url: location.href,		type: "GET",		isLocal: rlocalProtocol.test( location.protocol ),		global: true,		processData: true,		async: true,		contentType: "application/x-www-form-urlencoded; charset=UTF-8",		/*		timeout: 0,		data: null,		dataType: null,		username: null,		password: null,		cache: null,		throws: false,		traditional: false,		headers: {},		*/		accepts: {			"*": allTypes,			text: "text/plain",			html: "text/html",			xml: "application/xml, text/xml",			json: "application/json, text/javascript"		},		contents: {			xml: /\bxml\b/,			html: /\bhtml/,			json: /\bjson\b/		},		responseFields: {			xml: "responseXML",			text: "responseText",			json: "responseJSON"		},		// Data converters		// Keys separate source (or catchall "*") and destination types with a single space		converters: {			// Convert anything to text			"* text": String,			// Text to html (true = no transformation)			"text html": true,			// Evaluate text as a json expression			"text json": jQuery.parseJSON,			// Parse text as xml			"text xml": jQuery.parseXML		},		// For options that shouldn't be deep extended:		// you can add your own custom options here if		// and when you create one that shouldn't be		// deep extended (see ajaxExtend)		flatOptions: {			url: true,			context: true		}	},	// Creates a full fledged settings object into target	// with both ajaxSettings and settings fields.	// If target is omitted, writes into ajaxSettings.	ajaxSetup: function( target, settings ) {		return settings ?			// Building a settings object			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :			// Extending ajaxSettings			ajaxExtend( jQuery.ajaxSettings, target );	},	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),	ajaxTransport: addToPrefiltersOrTransports( transports ),	// Main method	ajax: function( url, options ) {		// If url is an object, simulate pre-1.5 signature		if ( typeof url === "object" ) {			options = url;			url = undefined;		}		// Force options to be an object		options = options || {};		var transport,			// URL without anti-cache param			cacheURL,			// Response headers			responseHeadersString,			responseHeaders,			// timeout handle			timeoutTimer,			// Url cleanup var			urlAnchor,			// To know if global events are to be dispatched			fireGlobals,			// Loop variable			i,			// Create the final options object			s = jQuery.ajaxSetup( {}, options ),			// Callbacks context			callbackContext = s.context || s,			// Context for global events is callbackContext if it is a DOM node or jQuery collection			globalEventContext = s.context &&				( callbackContext.nodeType || callbackContext.jquery ) ?					jQuery( callbackContext ) :					jQuery.event,			// Deferreds			deferred = jQuery.Deferred(),			completeDeferred = jQuery.Callbacks( "once memory" ),			// Status-dependent callbacks			statusCode = s.statusCode || {},			// Headers (they are sent all at once)			requestHeaders = {},			requestHeadersNames = {},			// The jqXHR state			state = 0,			// Default abort message			strAbort = "canceled",			// Fake xhr			jqXHR = {				readyState: 0,				// Builds headers hashtable if needed				getResponseHeader: function( key ) {					var match;					if ( state === 2 ) {						if ( !responseHeaders ) {							responseHeaders = {};							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];							}						}						match = responseHeaders[ key.toLowerCase() ];					}					return match == null ? null : match;				},				// Raw string				getAllResponseHeaders: function() {					return state === 2 ? responseHeadersString : null;				},				// Caches the header				setRequestHeader: function( name, value ) {					var lname = name.toLowerCase();					if ( !state ) {						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;						requestHeaders[ name ] = value;					}					return this;				},				// Overrides response content-type header				overrideMimeType: function( type ) {					if ( !state ) {						s.mimeType = type;					}					return this;				},				// Status-dependent callbacks				statusCode: function( map ) {					var code;					if ( map ) {						if ( state < 2 ) {							for ( code in map ) {								// Lazy-add the new callback in a way that preserves old ones								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];							}						} else {							// Execute the appropriate callbacks							jqXHR.always( map[ jqXHR.status ] );						}					}					return this;				},				// Cancel the request				abort: function( statusText ) {					var finalText = statusText || strAbort;					if ( transport ) {						transport.abort( finalText );					}					done( 0, finalText );					return this;				}			};		// Attach deferreds		deferred.promise( jqXHR ).complete = completeDeferred.add;		jqXHR.success = jqXHR.done;		jqXHR.error = jqXHR.fail;		// Remove hash character (#7531: and string promotion)		// Add protocol if not provided (prefilters might expect it)		// Handle falsy url in the settings object (#10093: consistency with old signature)		// We also use the url parameter if available		s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )			.replace( rprotocol, location.protocol + "//" );		// Alias method option to type as per ticket #12004		s.type = options.method || options.type || s.method || s.type;		// Extract dataTypes list		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];		// A cross-domain request is in order when the origin doesn't match the current origin.		if ( s.crossDomain == null ) {			urlAnchor = document.createElement( "a" );			// Support: IE8-11+			// IE throws exception if url is malformed, e.g. http://example.com:80x/			try {				urlAnchor.href = s.url;				// Support: IE8-11+				// Anchor's host property isn't correctly set when s.url is relative				urlAnchor.href = urlAnchor.href;				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==					urlAnchor.protocol + "//" + urlAnchor.host;			} catch ( e ) {				// If there is an error parsing the URL, assume it is crossDomain,				// it can be rejected by the transport if it is invalid				s.crossDomain = true;			}		}		// Convert data if not already a string		if ( s.data && s.processData && typeof s.data !== "string" ) {			s.data = jQuery.param( s.data, s.traditional );		}		// Apply prefilters		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );		// If request was aborted inside a prefilter, stop there		if ( state === 2 ) {			return jqXHR;		}		// We can fire global events as of now if asked to		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)		fireGlobals = jQuery.event && s.global;		// Watch for a new set of requests		if ( fireGlobals && jQuery.active++ === 0 ) {			jQuery.event.trigger( "ajaxStart" );		}		// Uppercase the type		s.type = s.type.toUpperCase();		// Determine if request has content		s.hasContent = !rnoContent.test( s.type );		// Save the URL in case we're toying with the If-Modified-Since		// and/or If-None-Match header later on		cacheURL = s.url;		// More options handling for requests with no content		if ( !s.hasContent ) {			// If data is available, append data to url			if ( s.data ) {				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );				// #9682: remove data so that it's not used in an eventual retry				delete s.data;			}			// Add anti-cache in url if needed			if ( s.cache === false ) {				s.url = rts.test( cacheURL ) ?					// If there is already a '_' parameter, set its value					cacheURL.replace( rts, "$1_=" + nonce++ ) :					// Otherwise add one to the end					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;			}		}		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.		if ( s.ifModified ) {			if ( jQuery.lastModified[ cacheURL ] ) {				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );			}			if ( jQuery.etag[ cacheURL ] ) {				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );			}		}		// Set the correct header, if data is being sent		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {			jqXHR.setRequestHeader( "Content-Type", s.contentType );		}		// Set the Accepts header for the server, depending on the dataType		jqXHR.setRequestHeader(			"Accept",			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?				s.accepts[ s.dataTypes[ 0 ] ] +					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :				s.accepts[ "*" ]		);		// Check for headers option		for ( i in s.headers ) {			jqXHR.setRequestHeader( i, s.headers[ i ] );		}		// Allow custom headers/mimetypes and early abort		if ( s.beforeSend &&			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {			// Abort if not done already and return			return jqXHR.abort();		}		// Aborting is no longer a cancellation		strAbort = "abort";		// Install callbacks on deferreds		for ( i in { success: 1, error: 1, complete: 1 } ) {			jqXHR[ i ]( s[ i ] );		}		// Get transport		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );		// If no transport, we auto-abort		if ( !transport ) {			done( -1, "No Transport" );		} else {			jqXHR.readyState = 1;			// Send global event			if ( fireGlobals ) {				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );			}			// If request was aborted inside ajaxSend, stop there			if ( state === 2 ) {				return jqXHR;			}			// Timeout			if ( s.async && s.timeout > 0 ) {				timeoutTimer = window.setTimeout( function() {					jqXHR.abort( "timeout" );				}, s.timeout );			}			try {				state = 1;				transport.send( requestHeaders, done );			} catch ( e ) {				// Propagate exception as error if not done				if ( state < 2 ) {					done( -1, e );				// Simply rethrow otherwise				} else {					throw e;				}			}		}		// Callback for when everything is done		function done( status, nativeStatusText, responses, headers ) {			var isSuccess, success, error, response, modified,				statusText = nativeStatusText;			// Called once			if ( state === 2 ) {				return;			}			// State is "done" now			state = 2;			// Clear timeout if it exists			if ( timeoutTimer ) {				window.clearTimeout( timeoutTimer );			}			// Dereference transport for early garbage collection			// (no matter how long the jqXHR object will be used)			transport = undefined;			// Cache response headers			responseHeadersString = headers || "";			// Set readyState			jqXHR.readyState = status > 0 ? 4 : 0;			// Determine if successful			isSuccess = status >= 200 && status < 300 || status === 304;			// Get response data			if ( responses ) {				response = ajaxHandleResponses( s, jqXHR, responses );			}			// Convert no matter what (that way responseXXX fields are always set)			response = ajaxConvert( s, response, jqXHR, isSuccess );			// If successful, handle type chaining			if ( isSuccess ) {				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.				if ( s.ifModified ) {					modified = jqXHR.getResponseHeader( "Last-Modified" );					if ( modified ) {						jQuery.lastModified[ cacheURL ] = modified;					}					modified = jqXHR.getResponseHeader( "etag" );					if ( modified ) {						jQuery.etag[ cacheURL ] = modified;					}				}				// if no content				if ( status === 204 || s.type === "HEAD" ) {					statusText = "nocontent";				// if not modified				} else if ( status === 304 ) {					statusText = "notmodified";				// If we have data, let's convert it				} else {					statusText = response.state;					success = response.data;					error = response.error;					isSuccess = !error;				}			} else {				// Extract error from statusText and normalize for non-aborts				error = statusText;				if ( status || !statusText ) {					statusText = "error";					if ( status < 0 ) {						status = 0;					}				}			}			// Set data for the fake xhr object			jqXHR.status = status;			jqXHR.statusText = ( nativeStatusText || statusText ) + "";			// Success/Error			if ( isSuccess ) {				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );			} else {				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );			}			// Status-dependent callbacks			jqXHR.statusCode( statusCode );			statusCode = undefined;			if ( fireGlobals ) {				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",					[ jqXHR, s, isSuccess ? success : error ] );			}			// Complete			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );			if ( fireGlobals ) {				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );				// Handle the global AJAX counter				if ( !( --jQuery.active ) ) {					jQuery.event.trigger( "ajaxStop" );				}			}		}		return jqXHR;	},	getJSON: function( url, data, callback ) {		return jQuery.get( url, data, callback, "json" );	},	getScript: function( url, callback ) {		return jQuery.get( url, undefined, callback, "script" );	}} );jQuery.each( [ "get", "post" ], function( i, method ) {	jQuery[ method ] = function( url, data, callback, type ) {		// Shift arguments if data argument was omitted		if ( jQuery.isFunction( data ) ) {			type = type || callback;			callback = data;			data = undefined;		}		// The url can be an options object (which then must have .url)		return jQuery.ajax( jQuery.extend( {			url: url,			type: method,			dataType: type,			data: data,			success: callback		}, jQuery.isPlainObject( url ) && url ) );	};} );jQuery._evalUrl = function( url ) {	return jQuery.ajax( {		url: url,		// Make this explicit, since user can override this through ajaxSetup (#11264)		type: "GET",		dataType: "script",		async: false,		global: false,		"throws": true	} );};jQuery.fn.extend( {	wrapAll: function( html ) {		var wrap;		if ( jQuery.isFunction( html ) ) {			return this.each( function( i ) {				jQuery( this ).wrapAll( html.call( this, i ) );			} );		}		if ( this[ 0 ] ) {			// The elements to wrap the target around			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );			if ( this[ 0 ].parentNode ) {				wrap.insertBefore( this[ 0 ] );			}			wrap.map( function() {				var elem = this;				while ( elem.firstElementChild ) {					elem = elem.firstElementChild;				}				return elem;			} ).append( this );		}		return this;	},	wrapInner: function( html ) {		if ( jQuery.isFunction( html ) ) {			return this.each( function( i ) {				jQuery( this ).wrapInner( html.call( this, i ) );			} );		}		return this.each( function() {			var self = jQuery( this ),				contents = self.contents();			if ( contents.length ) {				contents.wrapAll( html );			} else {				self.append( html );			}		} );	},	wrap: function( html ) {		var isFunction = jQuery.isFunction( html );		return this.each( function( i ) {			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );		} );	},	unwrap: function() {		return this.parent().each( function() {			if ( !jQuery.nodeName( this, "body" ) ) {				jQuery( this ).replaceWith( this.childNodes );			}		} ).end();	}} );jQuery.expr.filters.hidden = function( elem ) {	return !jQuery.expr.filters.visible( elem );};jQuery.expr.filters.visible = function( elem ) {	// Support: Opera <= 12.12	// Opera reports offsetWidths and offsetHeights less than zero on some elements	// Use OR instead of AND as the element is not visible if either is true	// See tickets #10406 and #13132	return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;};var r20 = /%20/g,	rbracket = /\[\]$/,	rCRLF = /\r?\n/g,	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,	rsubmittable = /^(?:input|select|textarea|keygen)/i;function buildParams( prefix, obj, traditional, add ) {	var name;	if ( jQuery.isArray( obj ) ) {		// Serialize array item.		jQuery.each( obj, function( i, v ) {			if ( traditional || rbracket.test( prefix ) ) {				// Treat each array item as a scalar.				add( prefix, v );			} else {				// Item is non-scalar (array or object), encode its numeric index.				buildParams(					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",					v,					traditional,					add				);			}		} );	} else if ( !traditional && jQuery.type( obj ) === "object" ) {		// Serialize object item.		for ( name in obj ) {			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );		}	} else {		// Serialize scalar item.		add( prefix, obj );	}}// Serialize an array of form elements or a set of// key/values into a query stringjQuery.param = function( a, traditional ) {	var prefix,		s = [],		add = function( key, value ) {			// If value is a function, invoke it and return its value			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );		};	// Set traditional to true for jQuery <= 1.3.2 behavior.	if ( traditional === undefined ) {		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;	}	// If an array was passed in, assume that it is an array of form elements.	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {		// Serialize the form elements		jQuery.each( a, function() {			add( this.name, this.value );		} );	} else {		// If traditional, encode the "old" way (the way 1.3.2 or older		// did it), otherwise encode params recursively.		for ( prefix in a ) {			buildParams( prefix, a[ prefix ], traditional, add );		}	}	// Return the resulting serialization	return s.join( "&" ).replace( r20, "+" );};jQuery.fn.extend( {	serialize: function() {		return jQuery.param( this.serializeArray() );	},	serializeArray: function() {		return this.map( function() {			// Can add propHook for "elements" to filter or add form elements			var elements = jQuery.prop( this, "elements" );			return elements ? jQuery.makeArray( elements ) : this;		} )		.filter( function() {			var type = this.type;			// Use .is( ":disabled" ) so that fieldset[disabled] works			return this.name && !jQuery( this ).is( ":disabled" ) &&				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&				( this.checked || !rcheckableType.test( type ) );		} )		.map( function( i, elem ) {			var val = jQuery( this ).val();			return val == null ?				null :				jQuery.isArray( val ) ?					jQuery.map( val, function( val ) {						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };					} ) :					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };		} ).get();	}} );jQuery.ajaxSettings.xhr = function() {	try {		return new window.XMLHttpRequest();	} catch ( e ) {}};var xhrSuccessStatus = {		// File protocol always yields status code 0, assume 200		0: 200,		// Support: IE9		// #1450: sometimes IE returns 1223 when it should be 204		1223: 204	},	xhrSupported = jQuery.ajaxSettings.xhr();support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );support.ajax = xhrSupported = !!xhrSupported;jQuery.ajaxTransport( function( options ) {	var callback, errorCallback;	// Cross domain only allowed if supported through XMLHttpRequest	if ( support.cors || xhrSupported && !options.crossDomain ) {		return {			send: function( headers, complete ) {				var i,					xhr = options.xhr();				xhr.open(					options.type,					options.url,					options.async,					options.username,					options.password				);				// Apply custom fields if provided				if ( options.xhrFields ) {					for ( i in options.xhrFields ) {						xhr[ i ] = options.xhrFields[ i ];					}				}				// Override mime type if needed				if ( options.mimeType && xhr.overrideMimeType ) {					xhr.overrideMimeType( options.mimeType );				}				// X-Requested-With header				// For cross-domain requests, seeing as conditions for a preflight are				// akin to a jigsaw puzzle, we simply never set it to be sure.				// (it can always be set on a per-request basis or even using ajaxSetup)				// For same-domain requests, won't change header if already provided.				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {					headers[ "X-Requested-With" ] = "XMLHttpRequest";				}				// Set headers				for ( i in headers ) {					xhr.setRequestHeader( i, headers[ i ] );				}				// Callback				callback = function( type ) {					return function() {						if ( callback ) {							callback = errorCallback = xhr.onload =								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;							if ( type === "abort" ) {								xhr.abort();							} else if ( type === "error" ) {								// Support: IE9								// On a manual native abort, IE9 throws								// errors on any property access that is not readyState								if ( typeof xhr.status !== "number" ) {									complete( 0, "error" );								} else {									complete(										// File: protocol always yields status 0; see #8605, #14207										xhr.status,										xhr.statusText									);								}							} else {								complete(									xhrSuccessStatus[ xhr.status ] || xhr.status,									xhr.statusText,									// Support: IE9 only									// IE9 has no XHR2 but throws on binary (trac-11426)									// For XHR2 non-text, let the caller handle it (gh-2498)									( xhr.responseType || "text" ) !== "text"  ||									typeof xhr.responseText !== "string" ?										{ binary: xhr.response } :										{ text: xhr.responseText },									xhr.getAllResponseHeaders()								);							}						}					};				};				// Listen to events				xhr.onload = callback();				errorCallback = xhr.onerror = callback( "error" );				// Support: IE9				// Use onreadystatechange to replace onabort				// to handle uncaught aborts				if ( xhr.onabort !== undefined ) {					xhr.onabort = errorCallback;				} else {					xhr.onreadystatechange = function() {						// Check readyState before timeout as it changes						if ( xhr.readyState === 4 ) {							// Allow onerror to be called first,							// but that will not handle a native abort							// Also, save errorCallback to a variable							// as xhr.onerror cannot be accessed							window.setTimeout( function() {								if ( callback ) {									errorCallback();								}							} );						}					};				}				// Create the abort callback				callback = callback( "abort" );				try {					// Do send the request (this may raise an exception)					xhr.send( options.hasContent && options.data || null );				} catch ( e ) {					// #14683: Only rethrow if this hasn't been notified as an error yet					if ( callback ) {						throw e;					}				}			},			abort: function() {				if ( callback ) {					callback();				}			}		};	}} );// Install script dataTypejQuery.ajaxSetup( {	accepts: {		script: "text/javascript, application/javascript, " +			"application/ecmascript, application/x-ecmascript"	},	contents: {		script: /\b(?:java|ecma)script\b/	},	converters: {		"text script": function( text ) {			jQuery.globalEval( text );			return text;		}	}} );// Handle cache's special case and crossDomainjQuery.ajaxPrefilter( "script", function( s ) {	if ( s.cache === undefined ) {		s.cache = false;	}	if ( s.crossDomain ) {		s.type = "GET";	}} );// Bind script tag hack transportjQuery.ajaxTransport( "script", function( s ) {	// This transport only deals with cross domain requests	if ( s.crossDomain ) {		var script, callback;		return {			send: function( _, complete ) {				script = jQuery( "<script>" ).prop( {					charset: s.scriptCharset,					src: s.url				} ).on(					"load error",					callback = function( evt ) {						script.remove();						callback = null;						if ( evt ) {							complete( evt.type === "error" ? 404 : 200, evt.type );						}					}				);				// Use native DOM manipulation to avoid our domManip AJAX trickery				document.head.appendChild( script[ 0 ] );			},			abort: function() {				if ( callback ) {					callback();				}			}		};	}} );var oldCallbacks = [],	rjsonp = /(=)\?(?=&|$)|\?\?/;// Default jsonp settingsjQuery.ajaxSetup( {	jsonp: "callback",	jsonpCallback: function() {		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );		this[ callback ] = true;		return callback;	}} );// Detect, normalize options and install callbacks for jsonp requestsjQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {	var callbackName, overwritten, responseContainer,		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?			"url" :			typeof s.data === "string" &&				( s.contentType || "" )					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&				rjsonp.test( s.data ) && "data"		);	// Handle iff the expected data type is "jsonp" or we have a parameter to set	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {		// Get callback name, remembering preexisting value associated with it		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?			s.jsonpCallback() :			s.jsonpCallback;		// Insert callback into url or form data		if ( jsonProp ) {			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );		} else if ( s.jsonp !== false ) {			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;		}		// Use data converter to retrieve json after script execution		s.converters[ "script json" ] = function() {			if ( !responseContainer ) {				jQuery.error( callbackName + " was not called" );			}			return responseContainer[ 0 ];		};		// Force json dataType		s.dataTypes[ 0 ] = "json";		// Install callback		overwritten = window[ callbackName ];		window[ callbackName ] = function() {			responseContainer = arguments;		};		// Clean-up function (fires after converters)		jqXHR.always( function() {			// If previous value didn't exist - remove it			if ( overwritten === undefined ) {				jQuery( window ).removeProp( callbackName );			// Otherwise restore preexisting value			} else {				window[ callbackName ] = overwritten;			}			// Save back as free			if ( s[ callbackName ] ) {				// Make sure that re-using the options doesn't screw things around				s.jsonpCallback = originalSettings.jsonpCallback;				// Save the callback name for future use				oldCallbacks.push( callbackName );			}			// Call if it was a function and we have a response			if ( responseContainer && jQuery.isFunction( overwritten ) ) {				overwritten( responseContainer[ 0 ] );			}			responseContainer = overwritten = undefined;		} );		// Delegate to script		return "script";	}} );// Argument "data" should be string of html// context (optional): If specified, the fragment will be created in this context,// defaults to document// keepScripts (optional): If true, will include scripts passed in the html stringjQuery.parseHTML = function( data, context, keepScripts ) {	if ( !data || typeof data !== "string" ) {		return null;	}	if ( typeof context === "boolean" ) {		keepScripts = context;		context = false;	}	context = context || document;	var parsed = rsingleTag.exec( data ),		scripts = !keepScripts && [];	// Single tag	if ( parsed ) {		return [ context.createElement( parsed[ 1 ] ) ];	}	parsed = buildFragment( [ data ], context, scripts );	if ( scripts && scripts.length ) {		jQuery( scripts ).remove();	}	return jQuery.merge( [], parsed.childNodes );};// Keep a copy of the old load methodvar _load = jQuery.fn.load;/** * Load a url into a page */jQuery.fn.load = function( url, params, callback ) {	if ( typeof url !== "string" && _load ) {		return _load.apply( this, arguments );	}	var selector, type, response,		self = this,		off = url.indexOf( " " );	if ( off > -1 ) {		selector = jQuery.trim( url.slice( off ) );		url = url.slice( 0, off );	}	// If it's a function	if ( jQuery.isFunction( params ) ) {		// We assume that it's the callback		callback = params;		params = undefined;	// Otherwise, build a param string	} else if ( params && typeof params === "object" ) {		type = "POST";	}	// If we have elements to modify, make the request	if ( self.length > 0 ) {		jQuery.ajax( {			url: url,			// If "type" variable is undefined, then "GET" method will be used.			// Make value of this field explicit since			// user can override it through ajaxSetup method			type: type || "GET",			dataType: "html",			data: params		} ).done( function( responseText ) {			// Save response for use in complete callback			response = arguments;			self.html( selector ?				// If a selector was specified, locate the right elements in a dummy div				// Exclude scripts to avoid IE 'Permission Denied' errors				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :				// Otherwise use the full result				responseText );		// If the request succeeds, this function gets "data", "status", "jqXHR"		// but they are ignored because response was set above.		// If it fails, this function gets "jqXHR", "status", "error"		} ).always( callback && function( jqXHR, status ) {			self.each( function() {				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );			} );		} );	}	return this;};// Attach a bunch of functions for handling common AJAX eventsjQuery.each( [	"ajaxStart",	"ajaxStop",	"ajaxComplete",	"ajaxError",	"ajaxSuccess",	"ajaxSend"], function( i, type ) {	jQuery.fn[ type ] = function( fn ) {		return this.on( type, fn );	};} );jQuery.expr.filters.animated = function( elem ) {	return jQuery.grep( jQuery.timers, function( fn ) {		return elem === fn.elem;	} ).length;};/** * Gets a window from an element */function getWindow( elem ) {	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;}jQuery.offset = {	setOffset: function( elem, options, i ) {		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,			position = jQuery.css( elem, "position" ),			curElem = jQuery( elem ),			props = {};		// Set position first, in-case top/left are set even on static elem		if ( position === "static" ) {			elem.style.position = "relative";		}		curOffset = curElem.offset();		curCSSTop = jQuery.css( elem, "top" );		curCSSLeft = jQuery.css( elem, "left" );		calculatePosition = ( position === "absolute" || position === "fixed" ) &&			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;		// Need to be able to calculate position if either		// top or left is auto and position is either absolute or fixed		if ( calculatePosition ) {			curPosition = curElem.position();			curTop = curPosition.top;			curLeft = curPosition.left;		} else {			curTop = parseFloat( curCSSTop ) || 0;			curLeft = parseFloat( curCSSLeft ) || 0;		}		if ( jQuery.isFunction( options ) ) {			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );		}		if ( options.top != null ) {			props.top = ( options.top - curOffset.top ) + curTop;		}		if ( options.left != null ) {			props.left = ( options.left - curOffset.left ) + curLeft;		}		if ( "using" in options ) {			options.using.call( elem, props );		} else {			curElem.css( props );		}	}};jQuery.fn.extend( {	offset: function( options ) {		if ( arguments.length ) {			return options === undefined ?				this :				this.each( function( i ) {					jQuery.offset.setOffset( this, options, i );				} );		}		var docElem, win,			elem = this[ 0 ],			box = { top: 0, left: 0 },			doc = elem && elem.ownerDocument;		if ( !doc ) {			return;		}		docElem = doc.documentElement;		// Make sure it's not a disconnected DOM node		if ( !jQuery.contains( docElem, elem ) ) {			return box;		}		box = elem.getBoundingClientRect();		win = getWindow( doc );		return {			top: box.top + win.pageYOffset - docElem.clientTop,			left: box.left + win.pageXOffset - docElem.clientLeft		};	},	position: function() {		if ( !this[ 0 ] ) {			return;		}		var offsetParent, offset,			elem = this[ 0 ],			parentOffset = { top: 0, left: 0 };		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},		// because it is its only offset parent		if ( jQuery.css( elem, "position" ) === "fixed" ) {			// Assume getBoundingClientRect is there when computed position is fixed			offset = elem.getBoundingClientRect();		} else {			// Get *real* offsetParent			offsetParent = this.offsetParent();			// Get correct offsets			offset = this.offset();			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {				parentOffset = offsetParent.offset();			}			// Add offsetParent borders			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );		}		// Subtract parent offsets and element margins		return {			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )		};	},	// This method will return documentElement in the following cases:	// 1) For the element inside the iframe without offsetParent, this method will return	//    documentElement of the parent window	// 2) For the hidden or detached element	// 3) For body or html element, i.e. in case of the html node - it will return itself	//	// but those exceptions were never presented as a real life use-cases	// and might be considered as more preferable results.	//	// This logic, however, is not guaranteed and can change at any point in the future	offsetParent: function() {		return this.map( function() {			var offsetParent = this.offsetParent;			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {				offsetParent = offsetParent.offsetParent;			}			return offsetParent || documentElement;		} );	}} );// Create scrollLeft and scrollTop methodsjQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {	var top = "pageYOffset" === prop;	jQuery.fn[ method ] = function( val ) {		return access( this, function( elem, method, val ) {			var win = getWindow( elem );			if ( val === undefined ) {				return win ? win[ prop ] : elem[ method ];			}			if ( win ) {				win.scrollTo(					!top ? val : win.pageXOffset,					top ? val : win.pageYOffset				);			} else {				elem[ method ] = val;			}		}, method, val, arguments.length );	};} );// Support: Safari<7-8+, Chrome<37-44+// Add the top/left cssHooks using jQuery.fn.position// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280// getComputedStyle returns percent when specified for top/left/bottom/right;// rather than make the css module depend on the offset module, just check for it herejQuery.each( [ "top", "left" ], function( i, prop ) {	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,		function( elem, computed ) {			if ( computed ) {				computed = curCSS( elem, prop );				// If curCSS returns percentage, fallback to offset				return rnumnonpx.test( computed ) ?					jQuery( elem ).position()[ prop ] + "px" :					computed;			}		}	);} );// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methodsjQuery.each( { Height: "height", Width: "width" }, function( name, type ) {	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },		function( defaultExtra, funcName ) {		// Margin is only for outerHeight, outerWidth		jQuery.fn[ funcName ] = function( margin, value ) {			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );			return access( this, function( elem, type, value ) {				var doc;				if ( jQuery.isWindow( elem ) ) {					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there					// isn't a whole lot we can do. See pull request at this URL for discussion:					// https://github.com/jquery/jquery/pull/764					return elem.document.documentElement[ "client" + name ];				}				// Get document width or height				if ( elem.nodeType === 9 ) {					doc = elem.documentElement;					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],					// whichever is greatest					return Math.max(						elem.body[ "scroll" + name ], doc[ "scroll" + name ],						elem.body[ "offset" + name ], doc[ "offset" + name ],						doc[ "client" + name ]					);				}				return value === undefined ?					// Get width or height on the element, requesting but not forcing parseFloat					jQuery.css( elem, type, extra ) :					// Set width or height on the element					jQuery.style( elem, type, value, extra );			}, type, chainable ? margin : undefined, chainable, null );		};	} );} );jQuery.fn.extend( {	bind: function( types, data, fn ) {		return this.on( types, null, data, fn );	},	unbind: function( types, fn ) {		return this.off( types, null, fn );	},	delegate: function( selector, types, data, fn ) {		return this.on( types, selector, data, fn );	},	undelegate: function( selector, types, fn ) {		// ( namespace ) or ( selector, types [, fn] )		return arguments.length === 1 ?			this.off( selector, "**" ) :			this.off( types, selector || "**", fn );	},	size: function() {		return this.length;	}} );jQuery.fn.andSelf = jQuery.fn.addBack;// Register as a named AMD module, since jQuery can be concatenated with other// files that may use define, but not via a proper concatenation script that// understands anonymous AMD modules. A named AMD is safest and most robust// way to register. Lowercase jquery is used because AMD module names are// derived from file names, and jQuery is normally delivered in a lowercase// file name. Do this after creating the global so that if an AMD module wants// to call noConflict to hide this version of jQuery, it will work.// Note that for maximum portability, libraries that are not jQuery should// declare themselves as anonymous modules, and avoid setting a global if an// AMD loader is present. jQuery is a special case. For more information, see// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anonif ( typeof define === "function" && define.amd ) {	define( "jquery", [], function() {		return jQuery;	} );}var	// Map over jQuery in case of overwrite	_jQuery = window.jQuery,	// Map over the $ in case of overwrite	_$ = window.$;jQuery.noConflict = function( deep ) {	if ( window.$ === jQuery ) {		window.$ = _$;	}	if ( deep && window.jQuery === jQuery ) {		window.jQuery = _jQuery;	}	return jQuery;};// Expose jQuery and $ identifiers, even in AMD// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)// and CommonJS for browser emulators (#13566)if ( !noGlobal ) {	window.jQuery = window.$ = jQuery;}return jQuery;}));/*     _ _      _       _ ___| (_) ___| | __  (_)___/ __| | |/ __| |/ /  | / __|\__ \ | | (__|   < _ | \__ \|___/_|_|\___|_|\_(_)/ |___/                   |__/ Version: 1.6.0  Author: Ken Wheeler Website: http://kenwheeler.github.io    Docs: http://kenwheeler.github.io/slick    Repo: http://github.com/kenwheeler/slick  Issues: http://github.com/kenwheeler/slick/issues */!function(a){"use strict";"function"==typeof define&&define.amd?define(["jquery"],a):"undefined"!=typeof exports?module.exports=a(require("jquery")):a(jQuery)}(function(a){"use strict";var b=window.Slick||{};b=function(){function c(c,d){var f,e=this;e.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:a(c),appendDots:a(c),arrows:!0,asNavFor:null,prevArrow:'<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',nextArrow:'<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(b,c){return a('<button type="button" data-role="none" role="button" tabindex="0" />').text(c+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},e.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},a.extend(e,e.initials),e.activeBreakpoint=null,e.animType=null,e.animProp=null,e.breakpoints=[],e.breakpointSettings=[],e.cssTransitions=!1,e.focussed=!1,e.interrupted=!1,e.hidden="hidden",e.paused=!0,e.positionProp=null,e.respondTo=null,e.rowCount=1,e.shouldClick=!0,e.$slider=a(c),e.$slidesCache=null,e.transformType=null,e.transitionType=null,e.visibilityChange="visibilitychange",e.windowWidth=0,e.windowTimer=null,f=a(c).data("slick")||{},e.options=a.extend({},e.defaults,d,f),e.currentSlide=e.options.initialSlide,e.originalSettings=e.options,"undefined"!=typeof document.mozHidden?(e.hidden="mozHidden",e.visibilityChange="mozvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(e.hidden="webkitHidden",e.visibilityChange="webkitvisibilitychange"),e.autoPlay=a.proxy(e.autoPlay,e),e.autoPlayClear=a.proxy(e.autoPlayClear,e),e.autoPlayIterator=a.proxy(e.autoPlayIterator,e),e.changeSlide=a.proxy(e.changeSlide,e),e.clickHandler=a.proxy(e.clickHandler,e),e.selectHandler=a.proxy(e.selectHandler,e),e.setPosition=a.proxy(e.setPosition,e),e.swipeHandler=a.proxy(e.swipeHandler,e),e.dragHandler=a.proxy(e.dragHandler,e),e.keyHandler=a.proxy(e.keyHandler,e),e.instanceUid=b++,e.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,e.registerBreakpoints(),e.init(!0)}var b=0;return c}(),b.prototype.activateADA=function(){var a=this;a.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},b.prototype.addSlide=b.prototype.slickAdd=function(b,c,d){var e=this;if("boolean"==typeof c)d=c,c=null;else if(0>c||c>=e.slideCount)return!1;e.unload(),"number"==typeof c?0===c&&0===e.$slides.length?a(b).appendTo(e.$slideTrack):d?a(b).insertBefore(e.$slides.eq(c)):a(b).insertAfter(e.$slides.eq(c)):d===!0?a(b).prependTo(e.$slideTrack):a(b).appendTo(e.$slideTrack),e.$slides=e.$slideTrack.children(this.options.slide),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.append(e.$slides),e.$slides.each(function(b,c){a(c).attr("data-slick-index",b)}),e.$slidesCache=e.$slides,e.reinit()},b.prototype.animateHeight=function(){var a=this;if(1===a.options.slidesToShow&&a.options.adaptiveHeight===!0&&a.options.vertical===!1){var b=a.$slides.eq(a.currentSlide).outerHeight(!0);a.$list.animate({height:b},a.options.speed)}},b.prototype.animateSlide=function(b,c){var d={},e=this;e.animateHeight(),e.options.rtl===!0&&e.options.vertical===!1&&(b=-b),e.transformsEnabled===!1?e.options.vertical===!1?e.$slideTrack.animate({left:b},e.options.speed,e.options.easing,c):e.$slideTrack.animate({top:b},e.options.speed,e.options.easing,c):e.cssTransitions===!1?(e.options.rtl===!0&&(e.currentLeft=-e.currentLeft),a({animStart:e.currentLeft}).animate({animStart:b},{duration:e.options.speed,easing:e.options.easing,step:function(a){a=Math.ceil(a),e.options.vertical===!1?(d[e.animType]="translate("+a+"px, 0px)",e.$slideTrack.css(d)):(d[e.animType]="translate(0px,"+a+"px)",e.$slideTrack.css(d))},complete:function(){c&&c.call()}})):(e.applyTransition(),b=Math.ceil(b),e.options.vertical===!1?d[e.animType]="translate3d("+b+"px, 0px, 0px)":d[e.animType]="translate3d(0px,"+b+"px, 0px)",e.$slideTrack.css(d),c&&setTimeout(function(){e.disableTransition(),c.call()},e.options.speed))},b.prototype.getNavTarget=function(){var b=this,c=b.options.asNavFor;return c&&null!==c&&(c=a(c).not(b.$slider)),c},b.prototype.asNavFor=function(b){var c=this,d=c.getNavTarget();null!==d&&"object"==typeof d&&d.each(function(){var c=a(this).slick("getSlick");c.unslicked||c.slideHandler(b,!0)})},b.prototype.applyTransition=function(a){var b=this,c={};b.options.fade===!1?c[b.transitionType]=b.transformType+" "+b.options.speed+"ms "+b.options.cssEase:c[b.transitionType]="opacity "+b.options.speed+"ms "+b.options.cssEase,b.options.fade===!1?b.$slideTrack.css(c):b.$slides.eq(a).css(c)},b.prototype.autoPlay=function(){var a=this;a.autoPlayClear(),a.slideCount>a.options.slidesToShow&&(a.autoPlayTimer=setInterval(a.autoPlayIterator,a.options.autoplaySpeed))},b.prototype.autoPlayClear=function(){var a=this;a.autoPlayTimer&&clearInterval(a.autoPlayTimer)},b.prototype.autoPlayIterator=function(){var a=this,b=a.currentSlide+a.options.slidesToScroll;a.paused||a.interrupted||a.focussed||(a.options.infinite===!1&&(1===a.direction&&a.currentSlide+1===a.slideCount-1?a.direction=0:0===a.direction&&(b=a.currentSlide-a.options.slidesToScroll,a.currentSlide-1===0&&(a.direction=1))),a.slideHandler(b))},b.prototype.buildArrows=function(){var b=this;b.options.arrows===!0&&(b.$prevArrow=a(b.options.prevArrow).addClass("slick-arrow"),b.$nextArrow=a(b.options.nextArrow).addClass("slick-arrow"),b.slideCount>b.options.slidesToShow?(b.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),b.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),b.htmlExpr.test(b.options.prevArrow)&&b.$prevArrow.prependTo(b.options.appendArrows),b.htmlExpr.test(b.options.nextArrow)&&b.$nextArrow.appendTo(b.options.appendArrows),b.options.infinite!==!0&&b.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):b.$prevArrow.add(b.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},b.prototype.buildDots=function(){var c,d,b=this;if(b.options.dots===!0&&b.slideCount>b.options.slidesToShow){for(b.$slider.addClass("slick-dotted"),d=a("<ul />").addClass(b.options.dotsClass),c=0;c<=b.getDotCount();c+=1)d.append(a("<li />").append(b.options.customPaging.call(this,b,c)));b.$dots=d.appendTo(b.options.appendDots),b.$dots.find("li").first().addClass("slick-active").attr("aria-hidden","false")}},b.prototype.buildOut=function(){var b=this;b.$slides=b.$slider.children(b.options.slide+":not(.slick-cloned)").addClass("slick-slide"),b.slideCount=b.$slides.length,b.$slides.each(function(b,c){a(c).attr("data-slick-index",b).data("originalStyling",a(c).attr("style")||"")}),b.$slider.addClass("slick-slider"),b.$slideTrack=0===b.slideCount?a('<div class="slick-track"/>').appendTo(b.$slider):b.$slides.wrapAll('<div class="slick-track"/>').parent(),b.$list=b.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent(),b.$slideTrack.css("opacity",0),(b.options.centerMode===!0||b.options.swipeToSlide===!0)&&(b.options.slidesToScroll=1),a("img[data-lazy]",b.$slider).not("[src]").addClass("slick-loading"),b.setupInfinite(),b.buildArrows(),b.buildDots(),b.updateDots(),b.setSlideClasses("number"==typeof b.currentSlide?b.currentSlide:0),b.options.draggable===!0&&b.$list.addClass("draggable")},b.prototype.buildRows=function(){var b,c,d,e,f,g,h,a=this;if(e=document.createDocumentFragment(),g=a.$slider.children(),a.options.rows>1){for(h=a.options.slidesPerRow*a.options.rows,f=Math.ceil(g.length/h),b=0;f>b;b++){var i=document.createElement("div");for(c=0;c<a.options.rows;c++){var j=document.createElement("div");for(d=0;d<a.options.slidesPerRow;d++){var k=b*h+(c*a.options.slidesPerRow+d);g.get(k)&&j.appendChild(g.get(k))}i.appendChild(j)}e.appendChild(i)}a.$slider.empty().append(e),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},b.prototype.checkResponsive=function(b,c){var e,f,g,d=this,h=!1,i=d.$slider.width(),j=window.innerWidth||a(window).width();if("window"===d.respondTo?g=j:"slider"===d.respondTo?g=i:"min"===d.respondTo&&(g=Math.min(j,i)),d.options.responsive&&d.options.responsive.length&&null!==d.options.responsive){f=null;for(e in d.breakpoints)d.breakpoints.hasOwnProperty(e)&&(d.originalSettings.mobileFirst===!1?g<d.breakpoints[e]&&(f=d.breakpoints[e]):g>d.breakpoints[e]&&(f=d.breakpoints[e]));null!==f?null!==d.activeBreakpoint?(f!==d.activeBreakpoint||c)&&(d.activeBreakpoint=f,"unslick"===d.breakpointSettings[f]?d.unslick(f):(d.options=a.extend({},d.originalSettings,d.breakpointSettings[f]),b===!0&&(d.currentSlide=d.options.initialSlide),d.refresh(b)),h=f):(d.activeBreakpoint=f,"unslick"===d.breakpointSettings[f]?d.unslick(f):(d.options=a.extend({},d.originalSettings,d.breakpointSettings[f]),b===!0&&(d.currentSlide=d.options.initialSlide),d.refresh(b)),h=f):null!==d.activeBreakpoint&&(d.activeBreakpoint=null,d.options=d.originalSettings,b===!0&&(d.currentSlide=d.options.initialSlide),d.refresh(b),h=f),b||h===!1||d.$slider.trigger("breakpoint",[d,h])}},b.prototype.changeSlide=function(b,c){var f,g,h,d=this,e=a(b.currentTarget);switch(e.is("a")&&b.preventDefault(),e.is("li")||(e=e.closest("li")),h=d.slideCount%d.options.slidesToScroll!==0,f=h?0:(d.slideCount-d.currentSlide)%d.options.slidesToScroll,b.data.message){case"previous":g=0===f?d.options.slidesToScroll:d.options.slidesToShow-f,d.slideCount>d.options.slidesToShow&&d.slideHandler(d.currentSlide-g,!1,c);break;case"next":g=0===f?d.options.slidesToScroll:f,d.slideCount>d.options.slidesToShow&&d.slideHandler(d.currentSlide+g,!1,c);break;case"index":var i=0===b.data.index?0:b.data.index||e.index()*d.options.slidesToScroll;d.slideHandler(d.checkNavigable(i),!1,c),e.children().trigger("focus");break;default:return}},b.prototype.checkNavigable=function(a){var c,d,b=this;if(c=b.getNavigableIndexes(),d=0,a>c[c.length-1])a=c[c.length-1];else for(var e in c){if(a<c[e]){a=d;break}d=c[e]}return a},b.prototype.cleanUpEvents=function(){var b=this;b.options.dots&&null!==b.$dots&&a("li",b.$dots).off("click.slick",b.changeSlide).off("mouseenter.slick",a.proxy(b.interrupt,b,!0)).off("mouseleave.slick",a.proxy(b.interrupt,b,!1)),b.$slider.off("focus.slick blur.slick"),b.options.arrows===!0&&b.slideCount>b.options.slidesToShow&&(b.$prevArrow&&b.$prevArrow.off("click.slick",b.changeSlide),b.$nextArrow&&b.$nextArrow.off("click.slick",b.changeSlide)),b.$list.off("touchstart.slick mousedown.slick",b.swipeHandler),b.$list.off("touchmove.slick mousemove.slick",b.swipeHandler),b.$list.off("touchend.slick mouseup.slick",b.swipeHandler),b.$list.off("touchcancel.slick mouseleave.slick",b.swipeHandler),b.$list.off("click.slick",b.clickHandler),a(document).off(b.visibilityChange,b.visibility),b.cleanUpSlideEvents(),b.options.accessibility===!0&&b.$list.off("keydown.slick",b.keyHandler),b.options.focusOnSelect===!0&&a(b.$slideTrack).children().off("click.slick",b.selectHandler),a(window).off("orientationchange.slick.slick-"+b.instanceUid,b.orientationChange),a(window).off("resize.slick.slick-"+b.instanceUid,b.resize),a("[draggable!=true]",b.$slideTrack).off("dragstart",b.preventDefault),a(window).off("load.slick.slick-"+b.instanceUid,b.setPosition),a(document).off("ready.slick.slick-"+b.instanceUid,b.setPosition)},b.prototype.cleanUpSlideEvents=function(){var b=this;b.$list.off("mouseenter.slick",a.proxy(b.interrupt,b,!0)),b.$list.off("mouseleave.slick",a.proxy(b.interrupt,b,!1))},b.prototype.cleanUpRows=function(){var b,a=this;a.options.rows>1&&(b=a.$slides.children().children(),b.removeAttr("style"),a.$slider.empty().append(b))},b.prototype.clickHandler=function(a){var b=this;b.shouldClick===!1&&(a.stopImmediatePropagation(),a.stopPropagation(),a.preventDefault())},b.prototype.destroy=function(b){var c=this;c.autoPlayClear(),c.touchObject={},c.cleanUpEvents(),a(".slick-cloned",c.$slider).detach(),c.$dots&&c.$dots.remove(),c.$prevArrow&&c.$prevArrow.length&&(c.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),c.htmlExpr.test(c.options.prevArrow)&&c.$prevArrow.remove()),c.$nextArrow&&c.$nextArrow.length&&(c.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),c.htmlExpr.test(c.options.nextArrow)&&c.$nextArrow.remove()),c.$slides&&(c.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){a(this).attr("style",a(this).data("originalStyling"))}),c.$slideTrack.children(this.options.slide).detach(),c.$slideTrack.detach(),c.$list.detach(),c.$slider.append(c.$slides)),c.cleanUpRows(),c.$slider.removeClass("slick-slider"),c.$slider.removeClass("slick-initialized"),c.$slider.removeClass("slick-dotted"),c.unslicked=!0,b||c.$slider.trigger("destroy",[c])},b.prototype.disableTransition=function(a){var b=this,c={};c[b.transitionType]="",b.options.fade===!1?b.$slideTrack.css(c):b.$slides.eq(a).css(c)},b.prototype.fadeSlide=function(a,b){var c=this;c.cssTransitions===!1?(c.$slides.eq(a).css({zIndex:c.options.zIndex}),c.$slides.eq(a).animate({opacity:1},c.options.speed,c.options.easing,b)):(c.applyTransition(a),c.$slides.eq(a).css({opacity:1,zIndex:c.options.zIndex}),b&&setTimeout(function(){c.disableTransition(a),b.call()},c.options.speed))},b.prototype.fadeSlideOut=function(a){var b=this;b.cssTransitions===!1?b.$slides.eq(a).animate({opacity:0,zIndex:b.options.zIndex-2},b.options.speed,b.options.easing):(b.applyTransition(a),b.$slides.eq(a).css({opacity:0,zIndex:b.options.zIndex-2}))},b.prototype.filterSlides=b.prototype.slickFilter=function(a){var b=this;null!==a&&(b.$slidesCache=b.$slides,b.unload(),b.$slideTrack.children(this.options.slide).detach(),b.$slidesCache.filter(a).appendTo(b.$slideTrack),b.reinit())},b.prototype.focusHandler=function(){var b=this;b.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*:not(.slick-arrow)",function(c){c.stopImmediatePropagation();var d=a(this);setTimeout(function(){b.options.pauseOnFocus&&(b.focussed=d.is(":focus"),b.autoPlay())},0)})},b.prototype.getCurrent=b.prototype.slickCurrentSlide=function(){var a=this;return a.currentSlide},b.prototype.getDotCount=function(){var a=this,b=0,c=0,d=0;if(a.options.infinite===!0)for(;b<a.slideCount;)++d,b=c+a.options.slidesToScroll,c+=a.options.slidesToScroll<=a.options.slidesToShow?a.options.slidesToScroll:a.options.slidesToShow;else if(a.options.centerMode===!0)d=a.slideCount;else if(a.options.asNavFor)for(;b<a.slideCount;)++d,b=c+a.options.slidesToScroll,c+=a.options.slidesToScroll<=a.options.slidesToShow?a.options.slidesToScroll:a.options.slidesToShow;else d=1+Math.ceil((a.slideCount-a.options.slidesToShow)/a.options.slidesToScroll);return d-1},b.prototype.getLeft=function(a){var c,d,f,b=this,e=0;return b.slideOffset=0,d=b.$slides.first().outerHeight(!0),b.options.infinite===!0?(b.slideCount>b.options.slidesToShow&&(b.slideOffset=b.slideWidth*b.options.slidesToShow*-1,e=d*b.options.slidesToShow*-1),b.slideCount%b.options.slidesToScroll!==0&&a+b.options.slidesToScroll>b.slideCount&&b.slideCount>b.options.slidesToShow&&(a>b.slideCount?(b.slideOffset=(b.options.slidesToShow-(a-b.slideCount))*b.slideWidth*-1,e=(b.options.slidesToShow-(a-b.slideCount))*d*-1):(b.slideOffset=b.slideCount%b.options.slidesToScroll*b.slideWidth*-1,e=b.slideCount%b.options.slidesToScroll*d*-1))):a+b.options.slidesToShow>b.slideCount&&(b.slideOffset=(a+b.options.slidesToShow-b.slideCount)*b.slideWidth,e=(a+b.options.slidesToShow-b.slideCount)*d),b.slideCount<=b.options.slidesToShow&&(b.slideOffset=0,e=0),b.options.centerMode===!0&&b.options.infinite===!0?b.slideOffset+=b.slideWidth*Math.floor(b.options.slidesToShow/2)-b.slideWidth:b.options.centerMode===!0&&(b.slideOffset=0,b.slideOffset+=b.slideWidth*Math.floor(b.options.slidesToShow/2)),c=b.options.vertical===!1?a*b.slideWidth*-1+b.slideOffset:a*d*-1+e,b.options.variableWidth===!0&&(f=b.slideCount<=b.options.slidesToShow||b.options.infinite===!1?b.$slideTrack.children(".slick-slide").eq(a):b.$slideTrack.children(".slick-slide").eq(a+b.options.slidesToShow),c=b.options.rtl===!0?f[0]?-1*(b.$slideTrack.width()-f[0].offsetLeft-f.width()):0:f[0]?-1*f[0].offsetLeft:0,b.options.centerMode===!0&&(f=b.slideCount<=b.options.slidesToShow||b.options.infinite===!1?b.$slideTrack.children(".slick-slide").eq(a):b.$slideTrack.children(".slick-slide").eq(a+b.options.slidesToShow+1),c=b.options.rtl===!0?f[0]?-1*(b.$slideTrack.width()-f[0].offsetLeft-f.width()):0:f[0]?-1*f[0].offsetLeft:0,c+=(b.$list.width()-f.outerWidth())/2)),c},b.prototype.getOption=b.prototype.slickGetOption=function(a){var b=this;return b.options[a]},b.prototype.getNavigableIndexes=function(){var e,a=this,b=0,c=0,d=[];for(a.options.infinite===!1?e=a.slideCount:(b=-1*a.options.slidesToScroll,c=-1*a.options.slidesToScroll,e=2*a.slideCount);e>b;)d.push(b),b=c+a.options.slidesToScroll,c+=a.options.slidesToScroll<=a.options.slidesToShow?a.options.slidesToScroll:a.options.slidesToShow;return d},b.prototype.getSlick=function(){return this},b.prototype.getSlideCount=function(){var c,d,e,b=this;return e=b.options.centerMode===!0?b.slideWidth*Math.floor(b.options.slidesToShow/2):0,b.options.swipeToSlide===!0?(b.$slideTrack.find(".slick-slide").each(function(c,f){return f.offsetLeft-e+a(f).outerWidth()/2>-1*b.swipeLeft?(d=f,!1):void 0}),c=Math.abs(a(d).attr("data-slick-index")-b.currentSlide)||1):b.options.slidesToScroll},b.prototype.goTo=b.prototype.slickGoTo=function(a,b){var c=this;c.changeSlide({data:{message:"index",index:parseInt(a)}},b)},b.prototype.init=function(b){var c=this;a(c.$slider).hasClass("slick-initialized")||(a(c.$slider).addClass("slick-initialized"),c.buildRows(),c.buildOut(),c.setProps(),c.startLoad(),c.loadSlider(),c.initializeEvents(),c.updateArrows(),c.updateDots(),c.checkResponsive(!0),c.focusHandler()),b&&c.$slider.trigger("init",[c]),c.options.accessibility===!0&&c.initADA(),c.options.autoplay&&(c.paused=!1,c.autoPlay())},b.prototype.initADA=function(){var b=this;b.$slides.add(b.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),b.$slideTrack.attr("role","listbox"),b.$slides.not(b.$slideTrack.find(".slick-cloned")).each(function(c){a(this).attr({role:"option","aria-describedby":"slick-slide"+b.instanceUid+c})}),null!==b.$dots&&b.$dots.attr("role","tablist").find("li").each(function(c){a(this).attr({role:"presentation","aria-selected":"false","aria-controls":"navigation"+b.instanceUid+c,id:"slick-slide"+b.instanceUid+c})}).first().attr("aria-selected","true").end().find("button").attr("role","button").end().closest("div").attr("role","toolbar"),b.activateADA()},b.prototype.initArrowEvents=function(){var a=this;a.options.arrows===!0&&a.slideCount>a.options.slidesToShow&&(a.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},a.changeSlide),a.$nextArrow.off("click.slick").on("click.slick",{message:"next"},a.changeSlide))},b.prototype.initDotEvents=function(){var b=this;b.options.dots===!0&&b.slideCount>b.options.slidesToShow&&a("li",b.$dots).on("click.slick",{message:"index"},b.changeSlide),b.options.dots===!0&&b.options.pauseOnDotsHover===!0&&a("li",b.$dots).on("mouseenter.slick",a.proxy(b.interrupt,b,!0)).on("mouseleave.slick",a.proxy(b.interrupt,b,!1))},b.prototype.initSlideEvents=function(){var b=this;b.options.pauseOnHover&&(b.$list.on("mouseenter.slick",a.proxy(b.interrupt,b,!0)),b.$list.on("mouseleave.slick",a.proxy(b.interrupt,b,!1)))},b.prototype.initializeEvents=function(){var b=this;b.initArrowEvents(),b.initDotEvents(),b.initSlideEvents(),b.$list.on("touchstart.slick mousedown.slick",{action:"start"},b.swipeHandler),b.$list.on("touchmove.slick mousemove.slick",{action:"move"},b.swipeHandler),b.$list.on("touchend.slick mouseup.slick",{action:"end"},b.swipeHandler),b.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},b.swipeHandler),b.$list.on("click.slick",b.clickHandler),a(document).on(b.visibilityChange,a.proxy(b.visibility,b)),b.options.accessibility===!0&&b.$list.on("keydown.slick",b.keyHandler),b.options.focusOnSelect===!0&&a(b.$slideTrack).children().on("click.slick",b.selectHandler),a(window).on("orientationchange.slick.slick-"+b.instanceUid,a.proxy(b.orientationChange,b)),a(window).on("resize.slick.slick-"+b.instanceUid,a.proxy(b.resize,b)),a("[draggable!=true]",b.$slideTrack).on("dragstart",b.preventDefault),a(window).on("load.slick.slick-"+b.instanceUid,b.setPosition),a(document).on("ready.slick.slick-"+b.instanceUid,b.setPosition)},b.prototype.initUI=function(){var a=this;a.options.arrows===!0&&a.slideCount>a.options.slidesToShow&&(a.$prevArrow.show(),a.$nextArrow.show()),a.options.dots===!0&&a.slideCount>a.options.slidesToShow&&a.$dots.show()},b.prototype.keyHandler=function(a){var b=this;a.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===a.keyCode&&b.options.accessibility===!0?b.changeSlide({data:{message:b.options.rtl===!0?"next":"previous"}}):39===a.keyCode&&b.options.accessibility===!0&&b.changeSlide({data:{message:b.options.rtl===!0?"previous":"next"}}))},b.prototype.lazyLoad=function(){function g(c){a("img[data-lazy]",c).each(function(){var c=a(this),d=a(this).attr("data-lazy"),e=document.createElement("img");e.onload=function(){c.animate({opacity:0},100,function(){c.attr("src",d).animate({opacity:1},200,function(){c.removeAttr("data-lazy").removeClass("slick-loading")}),b.$slider.trigger("lazyLoaded",[b,c,d])})},e.onerror=function(){c.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),b.$slider.trigger("lazyLoadError",[b,c,d])},e.src=d})}var c,d,e,f,b=this;b.options.centerMode===!0?b.options.infinite===!0?(e=b.currentSlide+(b.options.slidesToShow/2+1),f=e+b.options.slidesToShow+2):(e=Math.max(0,b.currentSlide-(b.options.slidesToShow/2+1)),f=2+(b.options.slidesToShow/2+1)+b.currentSlide):(e=b.options.infinite?b.options.slidesToShow+b.currentSlide:b.currentSlide,f=Math.ceil(e+b.options.slidesToShow),b.options.fade===!0&&(e>0&&e--,f<=b.slideCount&&f++)),c=b.$slider.find(".slick-slide").slice(e,f),g(c),b.slideCount<=b.options.slidesToShow?(d=b.$slider.find(".slick-slide"),g(d)):b.currentSlide>=b.slideCount-b.options.slidesToShow?(d=b.$slider.find(".slick-cloned").slice(0,b.options.slidesToShow),g(d)):0===b.currentSlide&&(d=b.$slider.find(".slick-cloned").slice(-1*b.options.slidesToShow),g(d))},b.prototype.loadSlider=function(){var a=this;a.setPosition(),a.$slideTrack.css({opacity:1}),a.$slider.removeClass("slick-loading"),a.initUI(),"progressive"===a.options.lazyLoad&&a.progressiveLazyLoad()},b.prototype.next=b.prototype.slickNext=function(){var a=this;a.changeSlide({data:{message:"next"}})},b.prototype.orientationChange=function(){var a=this;a.checkResponsive(),a.setPosition()},b.prototype.pause=b.prototype.slickPause=function(){var a=this;a.autoPlayClear(),a.paused=!0},b.prototype.play=b.prototype.slickPlay=function(){var a=this;a.autoPlay(),a.options.autoplay=!0,a.paused=!1,a.focussed=!1,a.interrupted=!1},b.prototype.postSlide=function(a){var b=this;b.unslicked||(b.$slider.trigger("afterChange",[b,a]),b.animating=!1,b.setPosition(),b.swipeLeft=null,b.options.autoplay&&b.autoPlay(),b.options.accessibility===!0&&b.initADA())},b.prototype.prev=b.prototype.slickPrev=function(){var a=this;a.changeSlide({data:{message:"previous"}})},b.prototype.preventDefault=function(a){a.preventDefault()},b.prototype.progressiveLazyLoad=function(b){b=b||1;var e,f,g,c=this,d=a("img[data-lazy]",c.$slider);d.length?(e=d.first(),f=e.attr("data-lazy"),g=document.createElement("img"),g.onload=function(){e.attr("src",f).removeAttr("data-lazy").removeClass("slick-loading"),c.options.adaptiveHeight===!0&&c.setPosition(),c.$slider.trigger("lazyLoaded",[c,e,f]),c.progressiveLazyLoad()},g.onerror=function(){3>b?setTimeout(function(){c.progressiveLazyLoad(b+1)},500):(e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),c.$slider.trigger("lazyLoadError",[c,e,f]),c.progressiveLazyLoad())},g.src=f):c.$slider.trigger("allImagesLoaded",[c])},b.prototype.refresh=function(b){var d,e,c=this;e=c.slideCount-c.options.slidesToShow,!c.options.infinite&&c.currentSlide>e&&(c.currentSlide=e),c.slideCount<=c.options.slidesToShow&&(c.currentSlide=0),d=c.currentSlide,c.destroy(!0),a.extend(c,c.initials,{currentSlide:d}),c.init(),b||c.changeSlide({data:{message:"index",index:d}},!1)},b.prototype.registerBreakpoints=function(){var c,d,e,b=this,f=b.options.responsive||null;if("array"===a.type(f)&&f.length){b.respondTo=b.options.respondTo||"window";for(c in f)if(e=b.breakpoints.length-1,d=f[c].breakpoint,f.hasOwnProperty(c)){for(;e>=0;)b.breakpoints[e]&&b.breakpoints[e]===d&&b.breakpoints.splice(e,1),e--;b.breakpoints.push(d),b.breakpointSettings[d]=f[c].settings}b.breakpoints.sort(function(a,c){return b.options.mobileFirst?a-c:c-a})}},b.prototype.reinit=function(){var b=this;b.$slides=b.$slideTrack.children(b.options.slide).addClass("slick-slide"),b.slideCount=b.$slides.length,b.currentSlide>=b.slideCount&&0!==b.currentSlide&&(b.currentSlide=b.currentSlide-b.options.slidesToScroll),b.slideCount<=b.options.slidesToShow&&(b.currentSlide=0),b.registerBreakpoints(),b.setProps(),b.setupInfinite(),b.buildArrows(),b.updateArrows(),b.initArrowEvents(),b.buildDots(),b.updateDots(),b.initDotEvents(),b.cleanUpSlideEvents(),b.initSlideEvents(),b.checkResponsive(!1,!0),b.options.focusOnSelect===!0&&a(b.$slideTrack).children().on("click.slick",b.selectHandler),b.setSlideClasses("number"==typeof b.currentSlide?b.currentSlide:0),b.setPosition(),b.focusHandler(),b.paused=!b.options.autoplay,b.autoPlay(),b.$slider.trigger("reInit",[b])},b.prototype.resize=function(){var b=this;a(window).width()!==b.windowWidth&&(clearTimeout(b.windowDelay),b.windowDelay=window.setTimeout(function(){b.windowWidth=a(window).width(),b.checkResponsive(),b.unslicked||b.setPosition()},50))},b.prototype.removeSlide=b.prototype.slickRemove=function(a,b,c){var d=this;return"boolean"==typeof a?(b=a,a=b===!0?0:d.slideCount-1):a=b===!0?--a:a,d.slideCount<1||0>a||a>d.slideCount-1?!1:(d.unload(),c===!0?d.$slideTrack.children().remove():d.$slideTrack.children(this.options.slide).eq(a).remove(),d.$slides=d.$slideTrack.children(this.options.slide),d.$slideTrack.children(this.options.slide).detach(),d.$slideTrack.append(d.$slides),d.$slidesCache=d.$slides,void d.reinit())},b.prototype.setCSS=function(a){var d,e,b=this,c={};b.options.rtl===!0&&(a=-a),d="left"==b.positionProp?Math.ceil(a)+"px":"0px",e="top"==b.positionProp?Math.ceil(a)+"px":"0px",c[b.positionProp]=a,b.transformsEnabled===!1?b.$slideTrack.css(c):(c={},b.cssTransitions===!1?(c[b.animType]="translate("+d+", "+e+")",b.$slideTrack.css(c)):(c[b.animType]="translate3d("+d+", "+e+", 0px)",b.$slideTrack.css(c)))},b.prototype.setDimensions=function(){var a=this;a.options.vertical===!1?a.options.centerMode===!0&&a.$list.css({padding:"0px "+a.options.centerPadding}):(a.$list.height(a.$slides.first().outerHeight(!0)*a.options.slidesToShow),a.options.centerMode===!0&&a.$list.css({padding:a.options.centerPadding+" 0px"})),a.listWidth=a.$list.width(),a.listHeight=a.$list.height(),a.options.vertical===!1&&a.options.variableWidth===!1?(a.slideWidth=Math.ceil(a.listWidth/a.options.slidesToShow),a.$slideTrack.width(Math.ceil(a.slideWidth*a.$slideTrack.children(".slick-slide").length))):a.options.variableWidth===!0?a.$slideTrack.width(5e3*a.slideCount):(a.slideWidth=Math.ceil(a.listWidth),a.$slideTrack.height(Math.ceil(a.$slides.first().outerHeight(!0)*a.$slideTrack.children(".slick-slide").length)));var b=a.$slides.first().outerWidth(!0)-a.$slides.first().width();a.options.variableWidth===!1&&a.$slideTrack.children(".slick-slide").width(a.slideWidth-b)},b.prototype.setFade=function(){var c,b=this;b.$slides.each(function(d,e){c=b.slideWidth*d*-1,b.options.rtl===!0?a(e).css({position:"relative",right:c,top:0,zIndex:b.options.zIndex-2,opacity:0}):a(e).css({position:"relative",left:c,top:0,zIndex:b.options.zIndex-2,opacity:0})}),b.$slides.eq(b.currentSlide).css({zIndex:b.options.zIndex-1,opacity:1})},b.prototype.setHeight=function(){var a=this;if(1===a.options.slidesToShow&&a.options.adaptiveHeight===!0&&a.options.vertical===!1){var b=a.$slides.eq(a.currentSlide).outerHeight(!0);a.$list.css("height",b)}},b.prototype.setOption=b.prototype.slickSetOption=function(){var c,d,e,f,h,b=this,g=!1;if("object"===a.type(arguments[0])?(e=arguments[0],g=arguments[1],h="multiple"):"string"===a.type(arguments[0])&&(e=arguments[0],f=arguments[1],g=arguments[2],"responsive"===arguments[0]&&"array"===a.type(arguments[1])?h="responsive":"undefined"!=typeof arguments[1]&&(h="single")),"single"===h)b.options[e]=f;else if("multiple"===h)a.each(e,function(a,c){b.options[a]=c});else if("responsive"===h)for(d in f)if("array"!==a.type(b.options.responsive))b.options.responsive=[f[d]];else{for(c=b.options.responsive.length-1;c>=0;)b.options.responsive[c].breakpoint===f[d].breakpoint&&b.options.responsive.splice(c,1),c--;b.options.responsive.push(f[d])}g&&(b.unload(),b.reinit())},b.prototype.setPosition=function(){var a=this;a.setDimensions(),a.setHeight(),a.options.fade===!1?a.setCSS(a.getLeft(a.currentSlide)):a.setFade(),a.$slider.trigger("setPosition",[a])},b.prototype.setProps=function(){var a=this,b=document.body.style;a.positionProp=a.options.vertical===!0?"top":"left","top"===a.positionProp?a.$slider.addClass("slick-vertical"):a.$slider.removeClass("slick-vertical"),(void 0!==b.WebkitTransition||void 0!==b.MozTransition||void 0!==b.msTransition)&&a.options.useCSS===!0&&(a.cssTransitions=!0),a.options.fade&&("number"==typeof a.options.zIndex?a.options.zIndex<3&&(a.options.zIndex=3):a.options.zIndex=a.defaults.zIndex),void 0!==b.OTransform&&(a.animType="OTransform",a.transformType="-o-transform",a.transitionType="OTransition",void 0===b.perspectiveProperty&&void 0===b.webkitPerspective&&(a.animType=!1)),void 0!==b.MozTransform&&(a.animType="MozTransform",a.transformType="-moz-transform",a.transitionType="MozTransition",void 0===b.perspectiveProperty&&void 0===b.MozPerspective&&(a.animType=!1)),void 0!==b.webkitTransform&&(a.animType="webkitTransform",a.transformType="-webkit-transform",a.transitionType="webkitTransition",void 0===b.perspectiveProperty&&void 0===b.webkitPerspective&&(a.animType=!1)),void 0!==b.msTransform&&(a.animType="msTransform",a.transformType="-ms-transform",a.transitionType="msTransition",void 0===b.msTransform&&(a.animType=!1)),void 0!==b.transform&&a.animType!==!1&&(a.animType="transform",a.transformType="transform",a.transitionType="transition"),a.transformsEnabled=a.options.useTransform&&null!==a.animType&&a.animType!==!1},b.prototype.setSlideClasses=function(a){var c,d,e,f,b=this;d=b.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),b.$slides.eq(a).addClass("slick-current"),b.options.centerMode===!0?(c=Math.floor(b.options.slidesToShow/2),b.options.infinite===!0&&(a>=c&&a<=b.slideCount-1-c?b.$slides.slice(a-c,a+c+1).addClass("slick-active").attr("aria-hidden","false"):(e=b.options.slidesToShow+a,d.slice(e-c+1,e+c+2).addClass("slick-active").attr("aria-hidden","false")),0===a?d.eq(d.length-1-b.options.slidesToShow).addClass("slick-center"):a===b.slideCount-1&&d.eq(b.options.slidesToShow).addClass("slick-center")),b.$slides.eq(a).addClass("slick-center")):a>=0&&a<=b.slideCount-b.options.slidesToShow?b.$slides.slice(a,a+b.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):d.length<=b.options.slidesToShow?d.addClass("slick-active").attr("aria-hidden","false"):(f=b.slideCount%b.options.slidesToShow,e=b.options.infinite===!0?b.options.slidesToShow+a:a,b.options.slidesToShow==b.options.slidesToScroll&&b.slideCount-a<b.options.slidesToShow?d.slice(e-(b.options.slidesToShow-f),e+f).addClass("slick-active").attr("aria-hidden","false"):d.slice(e,e+b.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false")),"ondemand"===b.options.lazyLoad&&b.lazyLoad()},b.prototype.setupInfinite=function(){var c,d,e,b=this;if(b.options.fade===!0&&(b.options.centerMode=!1),b.options.infinite===!0&&b.options.fade===!1&&(d=null,b.slideCount>b.options.slidesToShow)){for(e=b.options.centerMode===!0?b.options.slidesToShow+1:b.options.slidesToShow,c=b.slideCount;c>b.slideCount-e;c-=1)d=c-1,a(b.$slides[d]).clone(!0).attr("id","").attr("data-slick-index",d-b.slideCount).prependTo(b.$slideTrack).addClass("slick-cloned");for(c=0;e>c;c+=1)d=c,a(b.$slides[d]).clone(!0).attr("id","").attr("data-slick-index",d+b.slideCount).appendTo(b.$slideTrack).addClass("slick-cloned");b.$slideTrack.find(".slick-cloned").find("[id]").each(function(){a(this).attr("id","")})}},b.prototype.interrupt=function(a){var b=this;a||b.autoPlay(),b.interrupted=a},b.prototype.selectHandler=function(b){var c=this,d=a(b.target).is(".slick-slide")?a(b.target):a(b.target).parents(".slick-slide"),e=parseInt(d.attr("data-slick-index"));return e||(e=0),c.slideCount<=c.options.slidesToShow?(c.setSlideClasses(e),void c.asNavFor(e)):void c.slideHandler(e)},b.prototype.slideHandler=function(a,b,c){var d,e,f,g,j,h=null,i=this;return b=b||!1,i.animating===!0&&i.options.waitForAnimate===!0||i.options.fade===!0&&i.currentSlide===a||i.slideCount<=i.options.slidesToShow?void 0:(b===!1&&i.asNavFor(a),d=a,h=i.getLeft(d),g=i.getLeft(i.currentSlide),i.currentLeft=null===i.swipeLeft?g:i.swipeLeft,i.options.infinite===!1&&i.options.centerMode===!1&&(0>a||a>i.getDotCount()*i.options.slidesToScroll)?void(i.options.fade===!1&&(d=i.currentSlide,c!==!0?i.animateSlide(g,function(){i.postSlide(d)}):i.postSlide(d))):i.options.infinite===!1&&i.options.centerMode===!0&&(0>a||a>i.slideCount-i.options.slidesToScroll)?void(i.options.fade===!1&&(d=i.currentSlide,c!==!0?i.animateSlide(g,function(){i.postSlide(d)}):i.postSlide(d))):(i.options.autoplay&&clearInterval(i.autoPlayTimer),e=0>d?i.slideCount%i.options.slidesToScroll!==0?i.slideCount-i.slideCount%i.options.slidesToScroll:i.slideCount+d:d>=i.slideCount?i.slideCount%i.options.slidesToScroll!==0?0:d-i.slideCount:d,i.animating=!0,i.$slider.trigger("beforeChange",[i,i.currentSlide,e]),f=i.currentSlide,i.currentSlide=e,i.setSlideClasses(i.currentSlide),i.options.asNavFor&&(j=i.getNavTarget(),j=j.slick("getSlick"),j.slideCount<=j.options.slidesToShow&&j.setSlideClasses(i.currentSlide)),i.updateDots(),i.updateArrows(),i.options.fade===!0?(c!==!0?(i.fadeSlideOut(f),i.fadeSlide(e,function(){i.postSlide(e)})):i.postSlide(e),void i.animateHeight()):void(c!==!0?i.animateSlide(h,function(){i.postSlide(e)}):i.postSlide(e))))},b.prototype.startLoad=function(){var a=this;a.options.arrows===!0&&a.slideCount>a.options.slidesToShow&&(a.$prevArrow.hide(),a.$nextArrow.hide()),a.options.dots===!0&&a.slideCount>a.options.slidesToShow&&a.$dots.hide(),a.$slider.addClass("slick-loading")},b.prototype.swipeDirection=function(){var a,b,c,d,e=this;return a=e.touchObject.startX-e.touchObject.curX,b=e.touchObject.startY-e.touchObject.curY,c=Math.atan2(b,a),d=Math.round(180*c/Math.PI),0>d&&(d=360-Math.abs(d)),45>=d&&d>=0?e.options.rtl===!1?"left":"right":360>=d&&d>=315?e.options.rtl===!1?"left":"right":d>=135&&225>=d?e.options.rtl===!1?"right":"left":e.options.verticalSwiping===!0?d>=35&&135>=d?"down":"up":"vertical"},b.prototype.swipeEnd=function(a){var c,d,b=this;if(b.dragging=!1,b.interrupted=!1,b.shouldClick=b.touchObject.swipeLength>10?!1:!0,void 0===b.touchObject.curX)return!1;if(b.touchObject.edgeHit===!0&&b.$slider.trigger("edge",[b,b.swipeDirection()]),b.touchObject.swipeLength>=b.touchObject.minSwipe){switch(d=b.swipeDirection()){case"left":case"down":c=b.options.swipeToSlide?b.checkNavigable(b.currentSlide+b.getSlideCount()):b.currentSlide+b.getSlideCount(),b.currentDirection=0;break;case"right":case"up":c=b.options.swipeToSlide?b.checkNavigable(b.currentSlide-b.getSlideCount()):b.currentSlide-b.getSlideCount(),b.currentDirection=1}"vertical"!=d&&(b.slideHandler(c),b.touchObject={},b.$slider.trigger("swipe",[b,d]))}else b.touchObject.startX!==b.touchObject.curX&&(b.slideHandler(b.currentSlide),b.touchObject={})},b.prototype.swipeHandler=function(a){var b=this;if(!(b.options.swipe===!1||"ontouchend"in document&&b.options.swipe===!1||b.options.draggable===!1&&-1!==a.type.indexOf("mouse")))switch(b.touchObject.fingerCount=a.originalEvent&&void 0!==a.originalEvent.touches?a.originalEvent.touches.length:1,b.touchObject.minSwipe=b.listWidth/b.options.touchThreshold,b.options.verticalSwiping===!0&&(b.touchObject.minSwipe=b.listHeight/b.options.touchThreshold),a.data.action){case"start":b.swipeStart(a);break;case"move":b.swipeMove(a);break;case"end":b.swipeEnd(a)}},b.prototype.swipeMove=function(a){var d,e,f,g,h,b=this;return h=void 0!==a.originalEvent?a.originalEvent.touches:null,!b.dragging||h&&1!==h.length?!1:(d=b.getLeft(b.currentSlide),b.touchObject.curX=void 0!==h?h[0].pageX:a.clientX,b.touchObject.curY=void 0!==h?h[0].pageY:a.clientY,b.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(b.touchObject.curX-b.touchObject.startX,2))),b.options.verticalSwiping===!0&&(b.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(b.touchObject.curY-b.touchObject.startY,2)))),e=b.swipeDirection(),"vertical"!==e?(void 0!==a.originalEvent&&b.touchObject.swipeLength>4&&a.preventDefault(),g=(b.options.rtl===!1?1:-1)*(b.touchObject.curX>b.touchObject.startX?1:-1),b.options.verticalSwiping===!0&&(g=b.touchObject.curY>b.touchObject.startY?1:-1),f=b.touchObject.swipeLength,b.touchObject.edgeHit=!1,b.options.infinite===!1&&(0===b.currentSlide&&"right"===e||b.currentSlide>=b.getDotCount()&&"left"===e)&&(f=b.touchObject.swipeLength*b.options.edgeFriction,b.touchObject.edgeHit=!0),b.options.vertical===!1?b.swipeLeft=d+f*g:b.swipeLeft=d+f*(b.$list.height()/b.listWidth)*g,b.options.verticalSwiping===!0&&(b.swipeLeft=d+f*g),b.options.fade===!0||b.options.touchMove===!1?!1:b.animating===!0?(b.swipeLeft=null,!1):void b.setCSS(b.swipeLeft)):void 0)},b.prototype.swipeStart=function(a){var c,b=this;return b.interrupted=!0,1!==b.touchObject.fingerCount||b.slideCount<=b.options.slidesToShow?(b.touchObject={},!1):(void 0!==a.originalEvent&&void 0!==a.originalEvent.touches&&(c=a.originalEvent.touches[0]),b.touchObject.startX=b.touchObject.curX=void 0!==c?c.pageX:a.clientX,b.touchObject.startY=b.touchObject.curY=void 0!==c?c.pageY:a.clientY,void(b.dragging=!0))},b.prototype.unfilterSlides=b.prototype.slickUnfilter=function(){var a=this;null!==a.$slidesCache&&(a.unload(),a.$slideTrack.children(this.options.slide).detach(),a.$slidesCache.appendTo(a.$slideTrack),a.reinit())},b.prototype.unload=function(){var b=this;a(".slick-cloned",b.$slider).remove(),b.$dots&&b.$dots.remove(),b.$prevArrow&&b.htmlExpr.test(b.options.prevArrow)&&b.$prevArrow.remove(),b.$nextArrow&&b.htmlExpr.test(b.options.nextArrow)&&b.$nextArrow.remove(),b.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},b.prototype.unslick=function(a){var b=this;b.$slider.trigger("unslick",[b,a]),b.destroy()},b.prototype.updateArrows=function(){var b,a=this;b=Math.floor(a.options.slidesToShow/2),a.options.arrows===!0&&a.slideCount>a.options.slidesToShow&&!a.options.infinite&&(a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===a.currentSlide?(a.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):a.currentSlide>=a.slideCount-a.options.slidesToShow&&a.options.centerMode===!1?(a.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):a.currentSlide>=a.slideCount-1&&a.options.centerMode===!0&&(a.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},b.prototype.updateDots=function(){var a=this;null!==a.$dots&&(a.$dots.find("li").removeClass("slick-active").attr("aria-hidden","true"),a.$dots.find("li").eq(Math.floor(a.currentSlide/a.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden","false"))},b.prototype.visibility=function(){var a=this;a.options.autoplay&&(document[a.hidden]?a.interrupted=!0:a.interrupted=!1)},a.fn.slick=function(){var f,g,a=this,c=arguments[0],d=Array.prototype.slice.call(arguments,1),e=a.length;for(f=0;e>f;f++)if("object"==typeof c||"undefined"==typeof c?a[f].slick=new b(a[f],c):g=a[f].slick[c].apply(a[f].slick,d),"undefined"!=typeof g)return g;return a}});/*! * Select2 4.0.3 * https://select2.github.io * * Released under the MIT license * https://github.com/select2/select2/blob/master/LICENSE.md */(function (factory) {  if (typeof define === 'function' && define.amd) {    // AMD. Register as an anonymous module.    define(['jquery'], factory);  } else if (typeof exports === 'object') {    // Node/CommonJS    factory(require('jquery'));  } else {    // Browser globals    factory(jQuery);  }}(function (jQuery) {  // This is needed so we can catch the AMD loader configuration and use it  // The inner file should be wrapped (by `banner.start.js`) in a function that  // returns the AMD loader references.  var S2 =(function () {  // Restore the Select2 AMD loader so it can be used  // Needed mostly in the language files, where the loader is not inserted  if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {    var S2 = jQuery.fn.select2.amd;  }var S2;(function () { if (!S2 || !S2.requirejs) {if (!S2) { S2 = {}; } else { require = S2; }/** * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved. * Available via the MIT or new BSD license. * see: http://github.com/jrburke/almond for details *///Going sloppy to avoid 'use strict' string cost, but strict practices should//be followed./*jslint sloppy: true *//*global setTimeout: false */var requirejs, require, define;(function (undef) {    var main, req, makeMap, handlers,        defined = {},        waiting = {},        config = {},        defining = {},        hasOwn = Object.prototype.hasOwnProperty,        aps = [].slice,        jsSuffixRegExp = /\.js$/;    function hasProp(obj, prop) {        return hasOwn.call(obj, prop);    }    /**     * Given a relative module name, like ./something, normalize it to     * a real name that can be mapped to a path.     * @param {String} name the relative name     * @param {String} baseName a real name that the name arg is relative     * to.     * @returns {String} normalized name     */    function normalize(name, baseName) {        var nameParts, nameSegment, mapValue, foundMap, lastIndex,            foundI, foundStarMap, starI, i, j, part,            baseParts = baseName && baseName.split("/"),            map = config.map,            starMap = (map && map['*']) || {};        //Adjust any relative paths.        if (name && name.charAt(0) === ".") {            //If have a base name, try to normalize against it,            //otherwise, assume it is a top-level require that will            //be relative to baseUrl in the end.            if (baseName) {                name = name.split('/');                lastIndex = name.length - 1;                // Node .js allowance:                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');                }                //Lop off the last part of baseParts, so that . matches the                //"directory" and not name of the baseName's module. For instance,                //baseName of "one/two/three", maps to "one/two/three.js", but we                //want the directory, "one/two" for this normalization.                name = baseParts.slice(0, baseParts.length - 1).concat(name);                //start trimDots                for (i = 0; i < name.length; i += 1) {                    part = name[i];                    if (part === ".") {                        name.splice(i, 1);                        i -= 1;                    } else if (part === "..") {                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {                            //End of the line. Keep at least one non-dot                            //path segment at the front so it can be mapped                            //correctly to disk. Otherwise, there is likely                            //no path mapping for a path starting with '..'.                            //This can still fail, but catches the most reasonable                            //uses of ..                            break;                        } else if (i > 0) {                            name.splice(i - 1, 2);                            i -= 2;                        }                    }                }                //end trimDots                name = name.join("/");            } else if (name.indexOf('./') === 0) {                // No baseName, so this is ID is resolved relative                // to baseUrl, pull off the leading dot.                name = name.substring(2);            }        }        //Apply map config if available.        if ((baseParts || starMap) && map) {            nameParts = name.split('/');            for (i = nameParts.length; i > 0; i -= 1) {                nameSegment = nameParts.slice(0, i).join("/");                if (baseParts) {                    //Find the longest baseName segment match in the config.                    //So, do joins on the biggest to smallest lengths of baseParts.                    for (j = baseParts.length; j > 0; j -= 1) {                        mapValue = map[baseParts.slice(0, j).join('/')];                        //baseName segment has  config, find if it has one for                        //this name.                        if (mapValue) {                            mapValue = mapValue[nameSegment];                            if (mapValue) {                                //Match, update name to the new value.                                foundMap = mapValue;                                foundI = i;                                break;                            }                        }                    }                }                if (foundMap) {                    break;                }                //Check for a star map match, but just hold on to it,                //if there is a shorter segment match later in a matching                //config, then favor over this star map.                if (!foundStarMap && starMap && starMap[nameSegment]) {                    foundStarMap = starMap[nameSegment];                    starI = i;                }            }            if (!foundMap && foundStarMap) {                foundMap = foundStarMap;                foundI = starI;            }            if (foundMap) {                nameParts.splice(0, foundI, foundMap);                name = nameParts.join('/');            }        }        return name;    }    function makeRequire(relName, forceSync) {        return function () {            //A version of a require function that passes a moduleName            //value for items that may need to            //look up paths relative to the moduleName            var args = aps.call(arguments, 0);            //If first arg is not require('string'), and there is only            //one arg, it is the array form without a callback. Insert            //a null so that the following concat is correct.            if (typeof args[0] !== 'string' && args.length === 1) {                args.push(null);            }            return req.apply(undef, args.concat([relName, forceSync]));        };    }    function makeNormalize(relName) {        return function (name) {            return normalize(name, relName);        };    }    function makeLoad(depName) {        return function (value) {            defined[depName] = value;        };    }    function callDep(name) {        if (hasProp(waiting, name)) {            var args = waiting[name];            delete waiting[name];            defining[name] = true;            main.apply(undef, args);        }        if (!hasProp(defined, name) && !hasProp(defining, name)) {            throw new Error('No ' + name);        }        return defined[name];    }    //Turns a plugin!resource to [plugin, resource]    //with the plugin being undefined if the name    //did not have a plugin prefix.    function splitPrefix(name) {        var prefix,            index = name ? name.indexOf('!') : -1;        if (index > -1) {            prefix = name.substring(0, index);            name = name.substring(index + 1, name.length);        }        return [prefix, name];    }    /**     * Makes a name map, normalizing the name, and using a plugin     * for normalization if necessary. Grabs a ref to plugin     * too, as an optimization.     */    makeMap = function (name, relName) {        var plugin,            parts = splitPrefix(name),            prefix = parts[0];        name = parts[1];        if (prefix) {            prefix = normalize(prefix, relName);            plugin = callDep(prefix);        }        //Normalize according        if (prefix) {            if (plugin && plugin.normalize) {                name = plugin.normalize(name, makeNormalize(relName));            } else {                name = normalize(name, relName);            }        } else {            name = normalize(name, relName);            parts = splitPrefix(name);            prefix = parts[0];            name = parts[1];            if (prefix) {                plugin = callDep(prefix);            }        }        //Using ridiculous property names for space reasons        return {            f: prefix ? prefix + '!' + name : name, //fullName            n: name,            pr: prefix,            p: plugin        };    };    function makeConfig(name) {        return function () {            return (config && config.config && config.config[name]) || {};        };    }    handlers = {        require: function (name) {            return makeRequire(name);        },        exports: function (name) {            var e = defined[name];            if (typeof e !== 'undefined') {                return e;            } else {                return (defined[name] = {});            }        },        module: function (name) {            return {                id: name,                uri: '',                exports: defined[name],                config: makeConfig(name)            };        }    };    main = function (name, deps, callback, relName) {        var cjsModule, depName, ret, map, i,            args = [],            callbackType = typeof callback,            usingExports;        //Use name if no relName        relName = relName || name;        //Call the callback to define the module, if necessary.        if (callbackType === 'undefined' || callbackType === 'function') {            //Pull out the defined dependencies and pass the ordered            //values to the callback.            //Default to [require, exports, module] if no deps            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;            for (i = 0; i < deps.length; i += 1) {                map = makeMap(deps[i], relName);                depName = map.f;                //Fast path CommonJS standard dependencies.                if (depName === "require") {                    args[i] = handlers.require(name);                } else if (depName === "exports") {                    //CommonJS module spec 1.1                    args[i] = handlers.exports(name);                    usingExports = true;                } else if (depName === "module") {                    //CommonJS module spec 1.1                    cjsModule = args[i] = handlers.module(name);                } else if (hasProp(defined, depName) ||                           hasProp(waiting, depName) ||                           hasProp(defining, depName)) {                    args[i] = callDep(depName);                } else if (map.p) {                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});                    args[i] = defined[depName];                } else {                    throw new Error(name + ' missing ' + depName);                }            }            ret = callback ? callback.apply(defined[name], args) : undefined;            if (name) {                //If setting exports via "module" is in play,                //favor that over return value and exports. After that,                //favor a non-undefined return value over exports use.                if (cjsModule && cjsModule.exports !== undef &&                        cjsModule.exports !== defined[name]) {                    defined[name] = cjsModule.exports;                } else if (ret !== undef || !usingExports) {                    //Use the return value from the function.                    defined[name] = ret;                }            }        } else if (name) {            //May just be an object definition for the module. Only            //worry about defining if have a module name.            defined[name] = callback;        }    };    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {        if (typeof deps === "string") {            if (handlers[deps]) {                //callback in this case is really relName                return handlers[deps](callback);            }            //Just return the module wanted. In this scenario, the            //deps arg is the module name, and second arg (if passed)            //is just the relName.            //Normalize module name, if it contains . or ..            return callDep(makeMap(deps, callback).f);        } else if (!deps.splice) {            //deps is a config object, not an array.            config = deps;            if (config.deps) {                req(config.deps, config.callback);            }            if (!callback) {                return;            }            if (callback.splice) {                //callback is an array, which means it is a dependency list.                //Adjust args if there are dependencies                deps = callback;                callback = relName;                relName = null;            } else {                deps = undef;            }        }        //Support require(['a'])        callback = callback || function () {};        //If relName is a function, it is an errback handler,        //so remove it.        if (typeof relName === 'function') {            relName = forceSync;            forceSync = alt;        }        //Simulate async callback;        if (forceSync) {            main(undef, deps, callback, relName);        } else {            //Using a non-zero value because of concern for what old browsers            //do, and latest browsers "upgrade" to 4 if lower value is used:            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:            //If want a value immediately, use require('id') instead -- something            //that works in almond on the global level, but not guaranteed and            //unlikely to work in other AMD implementations.            setTimeout(function () {                main(undef, deps, callback, relName);            }, 4);        }        return req;    };    /**     * Just drops the config on the floor, but returns req in case     * the config return value is used.     */    req.config = function (cfg) {        return req(cfg);    };    /**     * Expose module registry for debugging and tooling     */    requirejs._defined = defined;    define = function (name, deps, callback) {        if (typeof name !== 'string') {            throw new Error('See almond README: incorrect module build, no module name');        }        //This module may not have dependencies        if (!deps.splice) {            //deps is not an array, so probably means            //an object literal or factory function for            //the value. Adjust args.            callback = deps;            deps = [];        }        if (!hasProp(defined, name) && !hasProp(waiting, name)) {            waiting[name] = [name, deps, callback];        }    };    define.amd = {        jQuery: true    };}());S2.requirejs = requirejs;S2.require = require;S2.define = define;}}());S2.define("almond", function(){});/* global jQuery:false, $:false */S2.define('jquery',[],function () {  var _$ = jQuery || $;  if (_$ == null && console && console.error) {    console.error(      'Select2: An instance of jQuery or a jQuery-compatible library was not ' +      'found. Make sure that you are including jQuery before Select2 on your ' +      'web page.'    );  }  return _$;});S2.define('select2/utils',[  'jquery'], function ($) {  var Utils = {};  Utils.Extend = function (ChildClass, SuperClass) {    var __hasProp = {}.hasOwnProperty;    function BaseConstructor () {      this.constructor = ChildClass;    }    for (var key in SuperClass) {      if (__hasProp.call(SuperClass, key)) {        ChildClass[key] = SuperClass[key];      }    }    BaseConstructor.prototype = SuperClass.prototype;    ChildClass.prototype = new BaseConstructor();    ChildClass.__super__ = SuperClass.prototype;    return ChildClass;  };  function getMethods (theClass) {    var proto = theClass.prototype;    var methods = [];    for (var methodName in proto) {      var m = proto[methodName];      if (typeof m !== 'function') {        continue;      }      if (methodName === 'constructor') {        continue;      }      methods.push(methodName);    }    return methods;  }  Utils.Decorate = function (SuperClass, DecoratorClass) {    var decoratedMethods = getMethods(DecoratorClass);    var superMethods = getMethods(SuperClass);    function DecoratedClass () {      var unshift = Array.prototype.unshift;      var argCount = DecoratorClass.prototype.constructor.length;      var calledConstructor = SuperClass.prototype.constructor;      if (argCount > 0) {        unshift.call(arguments, SuperClass.prototype.constructor);        calledConstructor = DecoratorClass.prototype.constructor;      }      calledConstructor.apply(this, arguments);    }    DecoratorClass.displayName = SuperClass.displayName;    function ctr () {      this.constructor = DecoratedClass;    }    DecoratedClass.prototype = new ctr();    for (var m = 0; m < superMethods.length; m++) {        var superMethod = superMethods[m];        DecoratedClass.prototype[superMethod] =          SuperClass.prototype[superMethod];    }    var calledMethod = function (methodName) {      // Stub out the original method if it's not decorating an actual method      var originalMethod = function () {};      if (methodName in DecoratedClass.prototype) {        originalMethod = DecoratedClass.prototype[methodName];      }      var decoratedMethod = DecoratorClass.prototype[methodName];      return function () {        var unshift = Array.prototype.unshift;        unshift.call(arguments, originalMethod);        return decoratedMethod.apply(this, arguments);      };    };    for (var d = 0; d < decoratedMethods.length; d++) {      var decoratedMethod = decoratedMethods[d];      DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);    }    return DecoratedClass;  };  var Observable = function () {    this.listeners = {};  };  Observable.prototype.on = function (event, callback) {    this.listeners = this.listeners || {};    if (event in this.listeners) {      this.listeners[event].push(callback);    } else {      this.listeners[event] = [callback];    }  };  Observable.prototype.trigger = function (event) {    var slice = Array.prototype.slice;    var params = slice.call(arguments, 1);    this.listeners = this.listeners || {};    // Params should always come in as an array    if (params == null) {      params = [];    }    // If there are no arguments to the event, use a temporary object    if (params.length === 0) {      params.push({});    }    // Set the `_type` of the first object to the event    params[0]._type = event;    if (event in this.listeners) {      this.invoke(this.listeners[event], slice.call(arguments, 1));    }    if ('*' in this.listeners) {      this.invoke(this.listeners['*'], arguments);    }  };  Observable.prototype.invoke = function (listeners, params) {    for (var i = 0, len = listeners.length; i < len; i++) {      listeners[i].apply(this, params);    }  };  Utils.Observable = Observable;  Utils.generateChars = function (length) {    var chars = '';    for (var i = 0; i < length; i++) {      var randomChar = Math.floor(Math.random() * 36);      chars += randomChar.toString(36);    }    return chars;  };  Utils.bind = function (func, context) {    return function () {      func.apply(context, arguments);    };  };  Utils._convertData = function (data) {    for (var originalKey in data) {      var keys = originalKey.split('-');      var dataLevel = data;      if (keys.length === 1) {        continue;      }      for (var k = 0; k < keys.length; k++) {        var key = keys[k];        // Lowercase the first letter        // By default, dash-separated becomes camelCase        key = key.substring(0, 1).toLowerCase() + key.substring(1);        if (!(key in dataLevel)) {          dataLevel[key] = {};        }        if (k == keys.length - 1) {          dataLevel[key] = data[originalKey];        }        dataLevel = dataLevel[key];      }      delete data[originalKey];    }    return data;  };  Utils.hasScroll = function (index, el) {    // Adapted from the function created by @ShadowScripter    // and adapted by @BillBarry on the Stack Exchange Code Review website.    // The original code can be found at    // http://codereview.stackexchange.com/q/13338    // and was designed to be used with the Sizzle selector engine.    var $el = $(el);    var overflowX = el.style.overflowX;    var overflowY = el.style.overflowY;    //Check both x and y declarations    if (overflowX === overflowY &&        (overflowY === 'hidden' || overflowY === 'visible')) {      return false;    }    if (overflowX === 'scroll' || overflowY === 'scroll') {      return true;    }    return ($el.innerHeight() < el.scrollHeight ||      $el.innerWidth() < el.scrollWidth);  };  Utils.escapeMarkup = function (markup) {    var replaceMap = {      '\\': '&#92;',      '&': '&amp;',      '<': '&lt;',      '>': '&gt;',      '"': '&quot;',      '\'': '&#39;',      '/': '&#47;'    };    // Do not try to escape the markup if it's not a string    if (typeof markup !== 'string') {      return markup;    }    return String(markup).replace(/[&<>"'\/\\]/g, function (match) {      return replaceMap[match];    });  };  // Append an array of jQuery nodes to a given element.  Utils.appendMany = function ($element, $nodes) {    // jQuery 1.7.x does not support $.fn.append() with an array    // Fall back to a jQuery object collection using $.fn.add()    if ($.fn.jquery.substr(0, 3) === '1.7') {      var $jqNodes = $();      $.map($nodes, function (node) {        $jqNodes = $jqNodes.add(node);      });      $nodes = $jqNodes;    }    $element.append($nodes);  };  return Utils;});S2.define('select2/results',[  'jquery',  './utils'], function ($, Utils) {  function Results ($element, options, dataAdapter) {    this.$element = $element;    this.data = dataAdapter;    this.options = options;    Results.__super__.constructor.call(this);  }  Utils.Extend(Results, Utils.Observable);  Results.prototype.render = function () {    var $results = $(      '<ul class="select2-results__options" role="tree"></ul>'    );    if (this.options.get('multiple')) {      $results.attr('aria-multiselectable', 'true');    }    this.$results = $results;    return $results;  };  Results.prototype.clear = function () {    this.$results.empty();  };  Results.prototype.displayMessage = function (params) {    var escapeMarkup = this.options.get('escapeMarkup');    this.clear();    this.hideLoading();    var $message = $(      '<li role="treeitem" aria-live="assertive"' +      ' class="select2-results__option"></li>'    );    var message = this.options.get('translations').get(params.message);    $message.append(      escapeMarkup(        message(params.args)      )    );    $message[0].className += ' select2-results__message';    this.$results.append($message);  };  Results.prototype.hideMessages = function () {    this.$results.find('.select2-results__message').remove();  };  Results.prototype.append = function (data) {    this.hideLoading();    var $options = [];    if (data.results == null || data.results.length === 0) {      if (this.$results.children().length === 0) {        this.trigger('results:message', {          message: 'noResults'        });      }      return;    }    data.results = this.sort(data.results);    for (var d = 0; d < data.results.length; d++) {      var item = data.results[d];      var $option = this.option(item);      $options.push($option);    }    this.$results.append($options);  };  Results.prototype.position = function ($results, $dropdown) {    var $resultsContainer = $dropdown.find('.select2-results');    $resultsContainer.append($results);  };  Results.prototype.sort = function (data) {    var sorter = this.options.get('sorter');    return sorter(data);  };  Results.prototype.highlightFirstItem = function () {    var $options = this.$results      .find('.select2-results__option[aria-selected]');    var $selected = $options.filter('[aria-selected=true]');    // Check if there are any selected options    if ($selected.length > 0) {      // If there are selected options, highlight the first      $selected.first().trigger('mouseenter');    } else {      // If there are no selected options, highlight the first option      // in the dropdown      $options.first().trigger('mouseenter');    }    this.ensureHighlightVisible();  };  Results.prototype.setClasses = function () {    var self = this;    this.data.current(function (selected) {      var selectedIds = $.map(selected, function (s) {        return s.id.toString();      });      var $options = self.$results        .find('.select2-results__option[aria-selected]');      $options.each(function () {        var $option = $(this);        var item = $.data(this, 'data');        // id needs to be converted to a string when comparing        var id = '' + item.id;        if ((item.element != null && item.element.selected) ||            (item.element == null && $.inArray(id, selectedIds) > -1)) {          $option.attr('aria-selected', 'true');        } else {          $option.attr('aria-selected', 'false');        }      });    });  };  Results.prototype.showLoading = function (params) {    this.hideLoading();    var loadingMore = this.options.get('translations').get('searching');    var loading = {      disabled: true,      loading: true,      text: loadingMore(params)    };    var $loading = this.option(loading);    $loading.className += ' loading-results';    this.$results.prepend($loading);  };  Results.prototype.hideLoading = function () {    this.$results.find('.loading-results').remove();  };  Results.prototype.option = function (data) {    var option = document.createElement('li');    option.className = 'select2-results__option';    var attrs = {      'role': 'treeitem',      'aria-selected': 'false'    };    if (data.disabled) {      delete attrs['aria-selected'];      attrs['aria-disabled'] = 'true';    }    if (data.id == null) {      delete attrs['aria-selected'];    }    if (data._resultId != null) {      option.id = data._resultId;    }    if (data.title) {      option.title = data.title;    }    if (data.children) {      attrs.role = 'group';      attrs['aria-label'] = data.text;      delete attrs['aria-selected'];    }    for (var attr in attrs) {      var val = attrs[attr];      option.setAttribute(attr, val);    }    if (data.children) {      var $option = $(option);      var label = document.createElement('strong');      label.className = 'select2-results__group';      var $label = $(label);      this.template(data, label);      var $children = [];      for (var c = 0; c < data.children.length; c++) {        var child = data.children[c];        var $child = this.option(child);        $children.push($child);      }      var $childrenContainer = $('<ul></ul>', {        'class': 'select2-results__options select2-results__options--nested'      });      $childrenContainer.append($children);      $option.append(label);      $option.append($childrenContainer);    } else {      this.template(data, option);    }    $.data(option, 'data', data);    return option;  };  Results.prototype.bind = function (container, $container) {    var self = this;    var id = container.id + '-results';    this.$results.attr('id', id);    container.on('results:all', function (params) {      self.clear();      self.append(params.data);      if (container.isOpen()) {        self.setClasses();        self.highlightFirstItem();      }    });    container.on('results:append', function (params) {      self.append(params.data);      if (container.isOpen()) {        self.setClasses();      }    });    container.on('query', function (params) {      self.hideMessages();      self.showLoading(params);    });    container.on('select', function () {      if (!container.isOpen()) {        return;      }      self.setClasses();      self.highlightFirstItem();    });    container.on('unselect', function () {      if (!container.isOpen()) {        return;      }      self.setClasses();      self.highlightFirstItem();    });    container.on('open', function () {      // When the dropdown is open, aria-expended="true"      self.$results.attr('aria-expanded', 'true');      self.$results.attr('aria-hidden', 'false');      self.setClasses();      self.ensureHighlightVisible();    });    container.on('close', function () {      // When the dropdown is closed, aria-expended="false"      self.$results.attr('aria-expanded', 'false');      self.$results.attr('aria-hidden', 'true');      self.$results.removeAttr('aria-activedescendant');    });    container.on('results:toggle', function () {      var $highlighted = self.getHighlightedResults();      if ($highlighted.length === 0) {        return;      }      $highlighted.trigger('mouseup');    });    container.on('results:select', function () {      var $highlighted = self.getHighlightedResults();      if ($highlighted.length === 0) {        return;      }      var data = $highlighted.data('data');      if ($highlighted.attr('aria-selected') == 'true') {        self.trigger('close', {});      } else {        self.trigger('select', {          data: data        });      }    });    container.on('results:previous', function () {      var $highlighted = self.getHighlightedResults();      var $options = self.$results.find('[aria-selected]');      var currentIndex = $options.index($highlighted);      // If we are already at te top, don't move further      if (currentIndex === 0) {        return;      }      var nextIndex = currentIndex - 1;      // If none are highlighted, highlight the first      if ($highlighted.length === 0) {        nextIndex = 0;      }      var $next = $options.eq(nextIndex);      $next.trigger('mouseenter');      var currentOffset = self.$results.offset().top;      var nextTop = $next.offset().top;      var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);      if (nextIndex === 0) {        self.$results.scrollTop(0);      } else if (nextTop - currentOffset < 0) {        self.$results.scrollTop(nextOffset);      }    });    container.on('results:next', function () {      var $highlighted = self.getHighlightedResults();      var $options = self.$results.find('[aria-selected]');      var currentIndex = $options.index($highlighted);      var nextIndex = currentIndex + 1;      // If we are at the last option, stay there      if (nextIndex >= $options.length) {        return;      }      var $next = $options.eq(nextIndex);      $next.trigger('mouseenter');      var currentOffset = self.$results.offset().top +        self.$results.outerHeight(false);      var nextBottom = $next.offset().top + $next.outerHeight(false);      var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;      if (nextIndex === 0) {        self.$results.scrollTop(0);      } else if (nextBottom > currentOffset) {        self.$results.scrollTop(nextOffset);      }    });    container.on('results:focus', function (params) {      params.element.addClass('select2-results__option--highlighted');    });    container.on('results:message', function (params) {      self.displayMessage(params);    });    if ($.fn.mousewheel) {      this.$results.on('mousewheel', function (e) {        var top = self.$results.scrollTop();        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();        if (isAtTop) {          self.$results.scrollTop(0);          e.preventDefault();          e.stopPropagation();        } else if (isAtBottom) {          self.$results.scrollTop(            self.$results.get(0).scrollHeight - self.$results.height()          );          e.preventDefault();          e.stopPropagation();        }      });    }    this.$results.on('mouseup', '.select2-results__option[aria-selected]',      function (evt) {      var $this = $(this);      var data = $this.data('data');      if ($this.attr('aria-selected') === 'true') {        if (self.options.get('multiple')) {          self.trigger('unselect', {            originalEvent: evt,            data: data          });        } else {          self.trigger('close', {});        }        return;      }      self.trigger('select', {        originalEvent: evt,        data: data      });    });    this.$results.on('mouseenter', '.select2-results__option[aria-selected]',      function (evt) {      var data = $(this).data('data');      self.getHighlightedResults()          .removeClass('select2-results__option--highlighted');      self.trigger('results:focus', {        data: data,        element: $(this)      });    });  };  Results.prototype.getHighlightedResults = function () {    var $highlighted = this.$results    .find('.select2-results__option--highlighted');    return $highlighted;  };  Results.prototype.destroy = function () {    this.$results.remove();  };  Results.prototype.ensureHighlightVisible = function () {    var $highlighted = this.getHighlightedResults();    if ($highlighted.length === 0) {      return;    }    var $options = this.$results.find('[aria-selected]');    var currentIndex = $options.index($highlighted);    var currentOffset = this.$results.offset().top;    var nextTop = $highlighted.offset().top;    var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);    var offsetDelta = nextTop - currentOffset;    nextOffset -= $highlighted.outerHeight(false) * 2;    if (currentIndex <= 2) {      this.$results.scrollTop(0);    } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {      this.$results.scrollTop(nextOffset);    }  };  Results.prototype.template = function (result, container) {    var template = this.options.get('templateResult');    var escapeMarkup = this.options.get('escapeMarkup');    var content = template(result, container);    if (content == null) {      container.style.display = 'none';    } else if (typeof content === 'string') {      container.innerHTML = escapeMarkup(content);    } else {      $(container).append(content);    }  };  return Results;});S2.define('select2/keys',[], function () {  var KEYS = {    BACKSPACE: 8,    TAB: 9,    ENTER: 13,    SHIFT: 16,    CTRL: 17,    ALT: 18,    ESC: 27,    SPACE: 32,    PAGE_UP: 33,    PAGE_DOWN: 34,    END: 35,    HOME: 36,    LEFT: 37,    UP: 38,    RIGHT: 39,    DOWN: 40,    DELETE: 46  };  return KEYS;});S2.define('select2/selection/base',[  'jquery',  '../utils',  '../keys'], function ($, Utils, KEYS) {  function BaseSelection ($element, options) {    this.$element = $element;    this.options = options;    BaseSelection.__super__.constructor.call(this);  }  Utils.Extend(BaseSelection, Utils.Observable);  BaseSelection.prototype.render = function () {    var $selection = $(      '<span class="select2-selection" role="combobox" ' +      ' aria-haspopup="true" aria-expanded="false">' +      '</span>'    );    this._tabindex = 0;    if (this.$element.data('old-tabindex') != null) {      this._tabindex = this.$element.data('old-tabindex');    } else if (this.$element.attr('tabindex') != null) {      this._tabindex = this.$element.attr('tabindex');    }    $selection.attr('title', this.$element.attr('title'));    $selection.attr('tabindex', this._tabindex);    this.$selection = $selection;    return $selection;  };  BaseSelection.prototype.bind = function (container, $container) {    var self = this;    var id = container.id + '-container';    var resultsId = container.id + '-results';    this.container = container;    this.$selection.on('focus', function (evt) {      self.trigger('focus', evt);    });    this.$selection.on('blur', function (evt) {      self._handleBlur(evt);    });    this.$selection.on('keydown', function (evt) {      self.trigger('keypress', evt);      if (evt.which === KEYS.SPACE) {        evt.preventDefault();      }    });    container.on('results:focus', function (params) {      self.$selection.attr('aria-activedescendant', params.data._resultId);    });    container.on('selection:update', function (params) {      self.update(params.data);    });    container.on('open', function () {      // When the dropdown is open, aria-expanded="true"      self.$selection.attr('aria-expanded', 'true');      self.$selection.attr('aria-owns', resultsId);      self._attachCloseHandler(container);    });    container.on('close', function () {      // When the dropdown is closed, aria-expanded="false"      self.$selection.attr('aria-expanded', 'false');      self.$selection.removeAttr('aria-activedescendant');      self.$selection.removeAttr('aria-owns');      self.$selection.focus();      self._detachCloseHandler(container);    });    container.on('enable', function () {      self.$selection.attr('tabindex', self._tabindex);    });    container.on('disable', function () {      self.$selection.attr('tabindex', '-1');    });  };  BaseSelection.prototype._handleBlur = function (evt) {    var self = this;    // This needs to be delayed as the active element is the body when the tab    // key is pressed, possibly along with others.    window.setTimeout(function () {      // Don't trigger `blur` if the focus is still in the selection      if (        (document.activeElement == self.$selection[0]) ||        ($.contains(self.$selection[0], document.activeElement))      ) {        return;      }      self.trigger('blur', evt);    }, 1);  };  BaseSelection.prototype._attachCloseHandler = function (container) {    var self = this;    $(document.body).on('mousedown.select2.' + container.id, function (e) {      var $target = $(e.target);      var $select = $target.closest('.select2');      var $all = $('.select2.select2-container--open');      $all.each(function () {        var $this = $(this);        if (this == $select[0]) {          return;        }        var $element = $this.data('element');        $element.select2('close');      });    });  };  BaseSelection.prototype._detachCloseHandler = function (container) {    $(document.body).off('mousedown.select2.' + container.id);  };  BaseSelection.prototype.position = function ($selection, $container) {    var $selectionContainer = $container.find('.selection');    $selectionContainer.append($selection);  };  BaseSelection.prototype.destroy = function () {    this._detachCloseHandler(this.container);  };  BaseSelection.prototype.update = function (data) {    throw new Error('The `update` method must be defined in child classes.');  };  return BaseSelection;});S2.define('select2/selection/single',[  'jquery',  './base',  '../utils',  '../keys'], function ($, BaseSelection, Utils, KEYS) {  function SingleSelection () {    SingleSelection.__super__.constructor.apply(this, arguments);  }  Utils.Extend(SingleSelection, BaseSelection);  SingleSelection.prototype.render = function () {    var $selection = SingleSelection.__super__.render.call(this);    $selection.addClass('select2-selection--single');    $selection.html(      '<span class="select2-selection__rendered"></span>' +      '<span class="select2-selection__arrow" role="presentation">' +        '<b role="presentation"></b>' +      '</span>'    );    return $selection;  };  SingleSelection.prototype.bind = function (container, $container) {    var self = this;    SingleSelection.__super__.bind.apply(this, arguments);    var id = container.id + '-container';    this.$selection.find('.select2-selection__rendered').attr('id', id);    this.$selection.attr('aria-labelledby', id);    this.$selection.on('mousedown', function (evt) {      // Only respond to left clicks      if (evt.which !== 1) {        return;      }      self.trigger('toggle', {        originalEvent: evt      });    });    this.$selection.on('focus', function (evt) {      // User focuses on the container    });    this.$selection.on('blur', function (evt) {      // User exits the container    });    container.on('focus', function (evt) {      if (!container.isOpen()) {        self.$selection.focus();      }    });    container.on('selection:update', function (params) {      self.update(params.data);    });  };  SingleSelection.prototype.clear = function () {    this.$selection.find('.select2-selection__rendered').empty();  };  SingleSelection.prototype.display = function (data, container) {    var template = this.options.get('templateSelection');    var escapeMarkup = this.options.get('escapeMarkup');    return escapeMarkup(template(data, container));  };  SingleSelection.prototype.selectionContainer = function () {    return $('<span></span>');  };  SingleSelection.prototype.update = function (data) {    if (data.length === 0) {      this.clear();      return;    }    var selection = data[0];    var $rendered = this.$selection.find('.select2-selection__rendered');    var formatted = this.display(selection, $rendered);    $rendered.empty().append(formatted);    $rendered.prop('title', selection.title || selection.text);  };  return SingleSelection;});S2.define('select2/selection/multiple',[  'jquery',  './base',  '../utils'], function ($, BaseSelection, Utils) {  function MultipleSelection ($element, options) {    MultipleSelection.__super__.constructor.apply(this, arguments);  }  Utils.Extend(MultipleSelection, BaseSelection);  MultipleSelection.prototype.render = function () {    var $selection = MultipleSelection.__super__.render.call(this);    $selection.addClass('select2-selection--multiple');    $selection.html(      '<ul class="select2-selection__rendered"></ul>'    );    return $selection;  };  MultipleSelection.prototype.bind = function (container, $container) {    var self = this;    MultipleSelection.__super__.bind.apply(this, arguments);    this.$selection.on('click', function (evt) {      self.trigger('toggle', {        originalEvent: evt      });    });    this.$selection.on(      'click',      '.select2-selection__choice__remove',      function (evt) {        // Ignore the event if it is disabled        if (self.options.get('disabled')) {          return;        }        var $remove = $(this);        var $selection = $remove.parent();        var data = $selection.data('data');        self.trigger('unselect', {          originalEvent: evt,          data: data        });      }    );  };  MultipleSelection.prototype.clear = function () {    this.$selection.find('.select2-selection__rendered').empty();  };  MultipleSelection.prototype.display = function (data, container) {    var template = this.options.get('templateSelection');    var escapeMarkup = this.options.get('escapeMarkup');    return escapeMarkup(template(data, container));  };  MultipleSelection.prototype.selectionContainer = function () {    var $container = $(      '<li class="select2-selection__choice">' +        '<span class="select2-selection__choice__remove" role="presentation">' +          '&times;' +        '</span>' +      '</li>'    );    return $container;  };  MultipleSelection.prototype.update = function (data) {    this.clear();    if (data.length === 0) {      return;    }    var $selections = [];    for (var d = 0; d < data.length; d++) {      var selection = data[d];      var $selection = this.selectionContainer();      var formatted = this.display(selection, $selection);      $selection.append(formatted);      $selection.prop('title', selection.title || selection.text);      $selection.data('data', selection);      $selections.push($selection);    }    var $rendered = this.$selection.find('.select2-selection__rendered');    Utils.appendMany($rendered, $selections);  };  return MultipleSelection;});S2.define('select2/selection/placeholder',[  '../utils'], function (Utils) {  function Placeholder (decorated, $element, options) {    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));    decorated.call(this, $element, options);  }  Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {    if (typeof placeholder === 'string') {      placeholder = {        id: '',        text: placeholder      };    }    return placeholder;  };  Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {    var $placeholder = this.selectionContainer();    $placeholder.html(this.display(placeholder));    $placeholder.addClass('select2-selection__placeholder')                .removeClass('select2-selection__choice');    return $placeholder;  };  Placeholder.prototype.update = function (decorated, data) {    var singlePlaceholder = (      data.length == 1 && data[0].id != this.placeholder.id    );    var multipleSelections = data.length > 1;    if (multipleSelections || singlePlaceholder) {      return decorated.call(this, data);    }    this.clear();    var $placeholder = this.createPlaceholder(this.placeholder);    this.$selection.find('.select2-selection__rendered').append($placeholder);  };  return Placeholder;});S2.define('select2/selection/allowClear',[  'jquery',  '../keys'], function ($, KEYS) {  function AllowClear () { }  AllowClear.prototype.bind = function (decorated, container, $container) {    var self = this;    decorated.call(this, container, $container);    if (this.placeholder == null) {      if (this.options.get('debug') && window.console && console.error) {        console.error(          'Select2: The `allowClear` option should be used in combination ' +          'with the `placeholder` option.'        );      }    }    this.$selection.on('mousedown', '.select2-selection__clear',      function (evt) {        self._handleClear(evt);    });    container.on('keypress', function (evt) {      self._handleKeyboardClear(evt, container);    });  };  AllowClear.prototype._handleClear = function (_, evt) {    // Ignore the event if it is disabled    if (this.options.get('disabled')) {      return;    }    var $clear = this.$selection.find('.select2-selection__clear');    // Ignore the event if nothing has been selected    if ($clear.length === 0) {      return;    }    evt.stopPropagation();    var data = $clear.data('data');    for (var d = 0; d < data.length; d++) {      var unselectData = {        data: data[d]      };      // Trigger the `unselect` event, so people can prevent it from being      // cleared.      this.trigger('unselect', unselectData);      // If the event was prevented, don't clear it out.      if (unselectData.prevented) {        return;      }    }    this.$element.val(this.placeholder.id).trigger('change');    this.trigger('toggle', {});  };  AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {    if (container.isOpen()) {      return;    }    if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {      this._handleClear(evt);    }  };  AllowClear.prototype.update = function (decorated, data) {    decorated.call(this, data);    if (this.$selection.find('.select2-selection__placeholder').length > 0 ||        data.length === 0) {      return;    }    var $remove = $(      '<span class="select2-selection__clear">' +        '&times;' +      '</span>'    );    $remove.data('data', data);    this.$selection.find('.select2-selection__rendered').prepend($remove);  };  return AllowClear;});S2.define('select2/selection/search',[  'jquery',  '../utils',  '../keys'], function ($, Utils, KEYS) {  function Search (decorated, $element, options) {    decorated.call(this, $element, options);  }  Search.prototype.render = function (decorated) {    var $search = $(      '<li class="select2-search select2-search--inline">' +        '<input class="select2-search__field" type="search" tabindex="-1"' +        ' autocomplete="off" autocorrect="off" autocapitalize="off"' +        ' spellcheck="false" role="textbox" aria-autocomplete="list" />' +      '</li>'    );    this.$searchContainer = $search;    this.$search = $search.find('input');    var $rendered = decorated.call(this);    this._transferTabIndex();    return $rendered;  };  Search.prototype.bind = function (decorated, container, $container) {    var self = this;    decorated.call(this, container, $container);    container.on('open', function () {      self.$search.trigger('focus');    });    container.on('close', function () {      self.$search.val('');      self.$search.removeAttr('aria-activedescendant');      self.$search.trigger('focus');    });    container.on('enable', function () {      self.$search.prop('disabled', false);      self._transferTabIndex();    });    container.on('disable', function () {      self.$search.prop('disabled', true);    });    container.on('focus', function (evt) {      self.$search.trigger('focus');    });    container.on('results:focus', function (params) {      self.$search.attr('aria-activedescendant', params.id);    });    this.$selection.on('focusin', '.select2-search--inline', function (evt) {      self.trigger('focus', evt);    });    this.$selection.on('focusout', '.select2-search--inline', function (evt) {      self._handleBlur(evt);    });    this.$selection.on('keydown', '.select2-search--inline', function (evt) {      evt.stopPropagation();      self.trigger('keypress', evt);      self._keyUpPrevented = evt.isDefaultPrevented();      var key = evt.which;      if (key === KEYS.BACKSPACE && self.$search.val() === '') {        var $previousChoice = self.$searchContainer          .prev('.select2-selection__choice');        if ($previousChoice.length > 0) {          var item = $previousChoice.data('data');          self.searchRemoveChoice(item);          evt.preventDefault();        }      }    });    // Try to detect the IE version should the `documentMode` property that    // is stored on the document. This is only implemented in IE and is    // slightly cleaner than doing a user agent check.    // This property is not available in Edge, but Edge also doesn't have    // this bug.    var msie = document.documentMode;    var disableInputEvents = msie && msie <= 11;    // Workaround for browsers which do not support the `input` event    // This will prevent double-triggering of events for browsers which support    // both the `keyup` and `input` events.    this.$selection.on(      'input.searchcheck',      '.select2-search--inline',      function (evt) {        // IE will trigger the `input` event when a placeholder is used on a        // search box. To get around this issue, we are forced to ignore all        // `input` events in IE and keep using `keyup`.        if (disableInputEvents) {          self.$selection.off('input.search input.searchcheck');          return;        }        // Unbind the duplicated `keyup` event        self.$selection.off('keyup.search');      }    );    this.$selection.on(      'keyup.search input.search',      '.select2-search--inline',      function (evt) {        // IE will trigger the `input` event when a placeholder is used on a        // search box. To get around this issue, we are forced to ignore all        // `input` events in IE and keep using `keyup`.        if (disableInputEvents && evt.type === 'input') {          self.$selection.off('input.search input.searchcheck');          return;        }        var key = evt.which;        // We can freely ignore events from modifier keys        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {          return;        }        // Tabbing will be handled during the `keydown` phase        if (key == KEYS.TAB) {          return;        }        self.handleSearch(evt);      }    );  };  /**   * This method will transfer the tabindex attribute from the rendered   * selection to the search box. This allows for the search box to be used as   * the primary focus instead of the selection container.   *   * @private   */  Search.prototype._transferTabIndex = function (decorated) {    this.$search.attr('tabindex', this.$selection.attr('tabindex'));    this.$selection.attr('tabindex', '-1');  };  Search.prototype.createPlaceholder = function (decorated, placeholder) {    this.$search.attr('placeholder', placeholder.text);  };  Search.prototype.update = function (decorated, data) {    var searchHadFocus = this.$search[0] == document.activeElement;    this.$search.attr('placeholder', '');    decorated.call(this, data);    this.$selection.find('.select2-selection__rendered')                   .append(this.$searchContainer);    this.resizeSearch();    if (searchHadFocus) {      this.$search.focus();    }  };  Search.prototype.handleSearch = function () {    this.resizeSearch();    if (!this._keyUpPrevented) {      var input = this.$search.val();      this.trigger('query', {        term: input      });    }    this._keyUpPrevented = false;  };  Search.prototype.searchRemoveChoice = function (decorated, item) {    this.trigger('unselect', {      data: item    });    this.$search.val(item.text);    this.handleSearch();  };  Search.prototype.resizeSearch = function () {    this.$search.css('width', '25px');    var width = '';    if (this.$search.attr('placeholder') !== '') {      width = this.$selection.find('.select2-selection__rendered').innerWidth();    } else {      var minimumWidth = this.$search.val().length + 1;      width = (minimumWidth * 0.75) + 'em';    }    this.$search.css('width', width);  };  return Search;});S2.define('select2/selection/eventRelay',[  'jquery'], function ($) {  function EventRelay () { }  EventRelay.prototype.bind = function (decorated, container, $container) {    var self = this;    var relayEvents = [      'open', 'opening',      'close', 'closing',      'select', 'selecting',      'unselect', 'unselecting'    ];    var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];    decorated.call(this, container, $container);    container.on('*', function (name, params) {      // Ignore events that should not be relayed      if ($.inArray(name, relayEvents) === -1) {        return;      }      // The parameters should always be an object      params = params || {};      // Generate the jQuery event for the Select2 event      var evt = $.Event('select2:' + name, {        params: params      });      self.$element.trigger(evt);      // Only handle preventable events if it was one      if ($.inArray(name, preventableEvents) === -1) {        return;      }      params.prevented = evt.isDefaultPrevented();    });  };  return EventRelay;});S2.define('select2/translation',[  'jquery',  'require'], function ($, require) {  function Translation (dict) {    this.dict = dict || {};  }  Translation.prototype.all = function () {    return this.dict;  };  Translation.prototype.get = function (key) {    return this.dict[key];  };  Translation.prototype.extend = function (translation) {    this.dict = $.extend({}, translation.all(), this.dict);  };  // Static functions  Translation._cache = {};  Translation.loadPath = function (path) {    if (!(path in Translation._cache)) {      var translations = require(path);      Translation._cache[path] = translations;    }    return new Translation(Translation._cache[path]);  };  return Translation;});S2.define('select2/diacritics',[], function () {  var diacritics = {    '\u24B6': 'A',    '\uFF21': 'A',    '\u00C0': 'A',    '\u00C1': 'A',    '\u00C2': 'A',    '\u1EA6': 'A',    '\u1EA4': 'A',    '\u1EAA': 'A',    '\u1EA8': 'A',    '\u00C3': 'A',    '\u0100': 'A',    '\u0102': 'A',    '\u1EB0': 'A',    '\u1EAE': 'A',    '\u1EB4': 'A',    '\u1EB2': 'A',    '\u0226': 'A',    '\u01E0': 'A',    '\u00C4': 'A',    '\u01DE': 'A',    '\u1EA2': 'A',    '\u00C5': 'A',    '\u01FA': 'A',    '\u01CD': 'A',    '\u0200': 'A',    '\u0202': 'A',    '\u1EA0': 'A',    '\u1EAC': 'A',    '\u1EB6': 'A',    '\u1E00': 'A',    '\u0104': 'A',    '\u023A': 'A',    '\u2C6F': 'A',    '\uA732': 'AA',    '\u00C6': 'AE',    '\u01FC': 'AE',    '\u01E2': 'AE',    '\uA734': 'AO',    '\uA736': 'AU',    '\uA738': 'AV',    '\uA73A': 'AV',    '\uA73C': 'AY',    '\u24B7': 'B',    '\uFF22': 'B',    '\u1E02': 'B',    '\u1E04': 'B',    '\u1E06': 'B',    '\u0243': 'B',    '\u0182': 'B',    '\u0181': 'B',    '\u24B8': 'C',    '\uFF23': 'C',    '\u0106': 'C',    '\u0108': 'C',    '\u010A': 'C',    '\u010C': 'C',    '\u00C7': 'C',    '\u1E08': 'C',    '\u0187': 'C',    '\u023B': 'C',    '\uA73E': 'C',    '\u24B9': 'D',    '\uFF24': 'D',    '\u1E0A': 'D',    '\u010E': 'D',    '\u1E0C': 'D',    '\u1E10': 'D',    '\u1E12': 'D',    '\u1E0E': 'D',    '\u0110': 'D',    '\u018B': 'D',    '\u018A': 'D',    '\u0189': 'D',    '\uA779': 'D',    '\u01F1': 'DZ',    '\u01C4': 'DZ',    '\u01F2': 'Dz',    '\u01C5': 'Dz',    '\u24BA': 'E',    '\uFF25': 'E',    '\u00C8': 'E',    '\u00C9': 'E',    '\u00CA': 'E',    '\u1EC0': 'E',    '\u1EBE': 'E',    '\u1EC4': 'E',    '\u1EC2': 'E',    '\u1EBC': 'E',    '\u0112': 'E',    '\u1E14': 'E',    '\u1E16': 'E',    '\u0114': 'E',    '\u0116': 'E',    '\u00CB': 'E',    '\u1EBA': 'E',    '\u011A': 'E',    '\u0204': 'E',    '\u0206': 'E',    '\u1EB8': 'E',    '\u1EC6': 'E',    '\u0228': 'E',    '\u1E1C': 'E',    '\u0118': 'E',    '\u1E18': 'E',    '\u1E1A': 'E',    '\u0190': 'E',    '\u018E': 'E',    '\u24BB': 'F',    '\uFF26': 'F',    '\u1E1E': 'F',    '\u0191': 'F',    '\uA77B': 'F',    '\u24BC': 'G',    '\uFF27': 'G',    '\u01F4': 'G',    '\u011C': 'G',    '\u1E20': 'G',    '\u011E': 'G',    '\u0120': 'G',    '\u01E6': 'G',    '\u0122': 'G',    '\u01E4': 'G',    '\u0193': 'G',    '\uA7A0': 'G',    '\uA77D': 'G',    '\uA77E': 'G',    '\u24BD': 'H',    '\uFF28': 'H',    '\u0124': 'H',    '\u1E22': 'H',    '\u1E26': 'H',    '\u021E': 'H',    '\u1E24': 'H',    '\u1E28': 'H',    '\u1E2A': 'H',    '\u0126': 'H',    '\u2C67': 'H',    '\u2C75': 'H',    '\uA78D': 'H',    '\u24BE': 'I',    '\uFF29': 'I',    '\u00CC': 'I',    '\u00CD': 'I',    '\u00CE': 'I',    '\u0128': 'I',    '\u012A': 'I',    '\u012C': 'I',    '\u0130': 'I',    '\u00CF': 'I',    '\u1E2E': 'I',    '\u1EC8': 'I',    '\u01CF': 'I',    '\u0208': 'I',    '\u020A': 'I',    '\u1ECA': 'I',    '\u012E': 'I',    '\u1E2C': 'I',    '\u0197': 'I',    '\u24BF': 'J',    '\uFF2A': 'J',    '\u0134': 'J',    '\u0248': 'J',    '\u24C0': 'K',    '\uFF2B': 'K',    '\u1E30': 'K',    '\u01E8': 'K',    '\u1E32': 'K',    '\u0136': 'K',    '\u1E34': 'K',    '\u0198': 'K',    '\u2C69': 'K',    '\uA740': 'K',    '\uA742': 'K',    '\uA744': 'K',    '\uA7A2': 'K',    '\u24C1': 'L',    '\uFF2C': 'L',    '\u013F': 'L',    '\u0139': 'L',    '\u013D': 'L',    '\u1E36': 'L',    '\u1E38': 'L',    '\u013B': 'L',    '\u1E3C': 'L',    '\u1E3A': 'L',    '\u0141': 'L',    '\u023D': 'L',    '\u2C62': 'L',    '\u2C60': 'L',    '\uA748': 'L',    '\uA746': 'L',    '\uA780': 'L',    '\u01C7': 'LJ',    '\u01C8': 'Lj',    '\u24C2': 'M',    '\uFF2D': 'M',    '\u1E3E': 'M',    '\u1E40': 'M',    '\u1E42': 'M',    '\u2C6E': 'M',    '\u019C': 'M',    '\u24C3': 'N',    '\uFF2E': 'N',    '\u01F8': 'N',    '\u0143': 'N',    '\u00D1': 'N',    '\u1E44': 'N',    '\u0147': 'N',    '\u1E46': 'N',    '\u0145': 'N',    '\u1E4A': 'N',    '\u1E48': 'N',    '\u0220': 'N',    '\u019D': 'N',    '\uA790': 'N',    '\uA7A4': 'N',    '\u01CA': 'NJ',    '\u01CB': 'Nj',    '\u24C4': 'O',    '\uFF2F': 'O',    '\u00D2': 'O',    '\u00D3': 'O',    '\u00D4': 'O',    '\u1ED2': 'O',    '\u1ED0': 'O',    '\u1ED6': 'O',    '\u1ED4': 'O',    '\u00D5': 'O',    '\u1E4C': 'O',    '\u022C': 'O',    '\u1E4E': 'O',    '\u014C': 'O',    '\u1E50': 'O',    '\u1E52': 'O',    '\u014E': 'O',    '\u022E': 'O',    '\u0230': 'O',    '\u00D6': 'O',    '\u022A': 'O',    '\u1ECE': 'O',    '\u0150': 'O',    '\u01D1': 'O',    '\u020C': 'O',    '\u020E': 'O',    '\u01A0': 'O',    '\u1EDC': 'O',    '\u1EDA': 'O',    '\u1EE0': 'O',    '\u1EDE': 'O',    '\u1EE2': 'O',    '\u1ECC': 'O',    '\u1ED8': 'O',    '\u01EA': 'O',    '\u01EC': 'O',    '\u00D8': 'O',    '\u01FE': 'O',    '\u0186': 'O',    '\u019F': 'O',    '\uA74A': 'O',    '\uA74C': 'O',    '\u01A2': 'OI',    '\uA74E': 'OO',    '\u0222': 'OU',    '\u24C5': 'P',    '\uFF30': 'P',    '\u1E54': 'P',    '\u1E56': 'P',    '\u01A4': 'P',    '\u2C63': 'P',    '\uA750': 'P',    '\uA752': 'P',    '\uA754': 'P',    '\u24C6': 'Q',    '\uFF31': 'Q',    '\uA756': 'Q',    '\uA758': 'Q',    '\u024A': 'Q',    '\u24C7': 'R',    '\uFF32': 'R',    '\u0154': 'R',    '\u1E58': 'R',    '\u0158': 'R',    '\u0210': 'R',    '\u0212': 'R',    '\u1E5A': 'R',    '\u1E5C': 'R',    '\u0156': 'R',    '\u1E5E': 'R',    '\u024C': 'R',    '\u2C64': 'R',    '\uA75A': 'R',    '\uA7A6': 'R',    '\uA782': 'R',    '\u24C8': 'S',    '\uFF33': 'S',    '\u1E9E': 'S',    '\u015A': 'S',    '\u1E64': 'S',    '\u015C': 'S',    '\u1E60': 'S',    '\u0160': 'S',    '\u1E66': 'S',    '\u1E62': 'S',    '\u1E68': 'S',    '\u0218': 'S',    '\u015E': 'S',    '\u2C7E': 'S',    '\uA7A8': 'S',    '\uA784': 'S',    '\u24C9': 'T',    '\uFF34': 'T',    '\u1E6A': 'T',    '\u0164': 'T',    '\u1E6C': 'T',    '\u021A': 'T',    '\u0162': 'T',    '\u1E70': 'T',    '\u1E6E': 'T',    '\u0166': 'T',    '\u01AC': 'T',    '\u01AE': 'T',    '\u023E': 'T',    '\uA786': 'T',    '\uA728': 'TZ',    '\u24CA': 'U',    '\uFF35': 'U',    '\u00D9': 'U',    '\u00DA': 'U',    '\u00DB': 'U',    '\u0168': 'U',    '\u1E78': 'U',    '\u016A': 'U',    '\u1E7A': 'U',    '\u016C': 'U',    '\u00DC': 'U',    '\u01DB': 'U',    '\u01D7': 'U',    '\u01D5': 'U',    '\u01D9': 'U',    '\u1EE6': 'U',    '\u016E': 'U',    '\u0170': 'U',    '\u01D3': 'U',    '\u0214': 'U',    '\u0216': 'U',    '\u01AF': 'U',    '\u1EEA': 'U',    '\u1EE8': 'U',    '\u1EEE': 'U',    '\u1EEC': 'U',    '\u1EF0': 'U',    '\u1EE4': 'U',    '\u1E72': 'U',    '\u0172': 'U',    '\u1E76': 'U',    '\u1E74': 'U',    '\u0244': 'U',    '\u24CB': 'V',    '\uFF36': 'V',    '\u1E7C': 'V',    '\u1E7E': 'V',    '\u01B2': 'V',    '\uA75E': 'V',    '\u0245': 'V',    '\uA760': 'VY',    '\u24CC': 'W',    '\uFF37': 'W',    '\u1E80': 'W',    '\u1E82': 'W',    '\u0174': 'W',    '\u1E86': 'W',    '\u1E84': 'W',    '\u1E88': 'W',    '\u2C72': 'W',    '\u24CD': 'X',    '\uFF38': 'X',    '\u1E8A': 'X',    '\u1E8C': 'X',    '\u24CE': 'Y',    '\uFF39': 'Y',    '\u1EF2': 'Y',    '\u00DD': 'Y',    '\u0176': 'Y',    '\u1EF8': 'Y',    '\u0232': 'Y',    '\u1E8E': 'Y',    '\u0178': 'Y',    '\u1EF6': 'Y',    '\u1EF4': 'Y',    '\u01B3': 'Y',    '\u024E': 'Y',    '\u1EFE': 'Y',    '\u24CF': 'Z',    '\uFF3A': 'Z',    '\u0179': 'Z',    '\u1E90': 'Z',    '\u017B': 'Z',    '\u017D': 'Z',    '\u1E92': 'Z',    '\u1E94': 'Z',    '\u01B5': 'Z',    '\u0224': 'Z',    '\u2C7F': 'Z',    '\u2C6B': 'Z',    '\uA762': 'Z',    '\u24D0': 'a',    '\uFF41': 'a',    '\u1E9A': 'a',    '\u00E0': 'a',    '\u00E1': 'a',    '\u00E2': 'a',    '\u1EA7': 'a',    '\u1EA5': 'a',    '\u1EAB': 'a',    '\u1EA9': 'a',    '\u00E3': 'a',    '\u0101': 'a',    '\u0103': 'a',    '\u1EB1': 'a',    '\u1EAF': 'a',    '\u1EB5': 'a',    '\u1EB3': 'a',    '\u0227': 'a',    '\u01E1': 'a',    '\u00E4': 'a',    '\u01DF': 'a',    '\u1EA3': 'a',    '\u00E5': 'a',    '\u01FB': 'a',    '\u01CE': 'a',    '\u0201': 'a',    '\u0203': 'a',    '\u1EA1': 'a',    '\u1EAD': 'a',    '\u1EB7': 'a',    '\u1E01': 'a',    '\u0105': 'a',    '\u2C65': 'a',    '\u0250': 'a',    '\uA733': 'aa',    '\u00E6': 'ae',    '\u01FD': 'ae',    '\u01E3': 'ae',    '\uA735': 'ao',    '\uA737': 'au',    '\uA739': 'av',    '\uA73B': 'av',    '\uA73D': 'ay',    '\u24D1': 'b',    '\uFF42': 'b',    '\u1E03': 'b',    '\u1E05': 'b',    '\u1E07': 'b',    '\u0180': 'b',    '\u0183': 'b',    '\u0253': 'b',    '\u24D2': 'c',    '\uFF43': 'c',    '\u0107': 'c',    '\u0109': 'c',    '\u010B': 'c',    '\u010D': 'c',    '\u00E7': 'c',    '\u1E09': 'c',    '\u0188': 'c',    '\u023C': 'c',    '\uA73F': 'c',    '\u2184': 'c',    '\u24D3': 'd',    '\uFF44': 'd',    '\u1E0B': 'd',    '\u010F': 'd',    '\u1E0D': 'd',    '\u1E11': 'd',    '\u1E13': 'd',    '\u1E0F': 'd',    '\u0111': 'd',    '\u018C': 'd',    '\u0256': 'd',    '\u0257': 'd',    '\uA77A': 'd',    '\u01F3': 'dz',    '\u01C6': 'dz',    '\u24D4': 'e',    '\uFF45': 'e',    '\u00E8': 'e',    '\u00E9': 'e',    '\u00EA': 'e',    '\u1EC1': 'e',    '\u1EBF': 'e',    '\u1EC5': 'e',    '\u1EC3': 'e',    '\u1EBD': 'e',    '\u0113': 'e',    '\u1E15': 'e',    '\u1E17': 'e',    '\u0115': 'e',    '\u0117': 'e',    '\u00EB': 'e',    '\u1EBB': 'e',    '\u011B': 'e',    '\u0205': 'e',    '\u0207': 'e',    '\u1EB9': 'e',    '\u1EC7': 'e',    '\u0229': 'e',    '\u1E1D': 'e',    '\u0119': 'e',    '\u1E19': 'e',    '\u1E1B': 'e',    '\u0247': 'e',    '\u025B': 'e',    '\u01DD': 'e',    '\u24D5': 'f',    '\uFF46': 'f',    '\u1E1F': 'f',    '\u0192': 'f',    '\uA77C': 'f',    '\u24D6': 'g',    '\uFF47': 'g',    '\u01F5': 'g',    '\u011D': 'g',    '\u1E21': 'g',    '\u011F': 'g',    '\u0121': 'g',    '\u01E7': 'g',    '\u0123': 'g',    '\u01E5': 'g',    '\u0260': 'g',    '\uA7A1': 'g',    '\u1D79': 'g',    '\uA77F': 'g',    '\u24D7': 'h',    '\uFF48': 'h',    '\u0125': 'h',    '\u1E23': 'h',    '\u1E27': 'h',    '\u021F': 'h',    '\u1E25': 'h',    '\u1E29': 'h',    '\u1E2B': 'h',    '\u1E96': 'h',    '\u0127': 'h',    '\u2C68': 'h',    '\u2C76': 'h',    '\u0265': 'h',    '\u0195': 'hv',    '\u24D8': 'i',    '\uFF49': 'i',    '\u00EC': 'i',    '\u00ED': 'i',    '\u00EE': 'i',    '\u0129': 'i',    '\u012B': 'i',    '\u012D': 'i',    '\u00EF': 'i',    '\u1E2F': 'i',    '\u1EC9': 'i',    '\u01D0': 'i',    '\u0209': 'i',    '\u020B': 'i',    '\u1ECB': 'i',    '\u012F': 'i',    '\u1E2D': 'i',    '\u0268': 'i',    '\u0131': 'i',    '\u24D9': 'j',    '\uFF4A': 'j',    '\u0135': 'j',    '\u01F0': 'j',    '\u0249': 'j',    '\u24DA': 'k',    '\uFF4B': 'k',    '\u1E31': 'k',    '\u01E9': 'k',    '\u1E33': 'k',    '\u0137': 'k',    '\u1E35': 'k',    '\u0199': 'k',    '\u2C6A': 'k',    '\uA741': 'k',    '\uA743': 'k',    '\uA745': 'k',    '\uA7A3': 'k',    '\u24DB': 'l',    '\uFF4C': 'l',    '\u0140': 'l',    '\u013A': 'l',    '\u013E': 'l',    '\u1E37': 'l',    '\u1E39': 'l',    '\u013C': 'l',    '\u1E3D': 'l',    '\u1E3B': 'l',    '\u017F': 'l',    '\u0142': 'l',    '\u019A': 'l',    '\u026B': 'l',    '\u2C61': 'l',    '\uA749': 'l',    '\uA781': 'l',    '\uA747': 'l',    '\u01C9': 'lj',    '\u24DC': 'm',    '\uFF4D': 'm',    '\u1E3F': 'm',    '\u1E41': 'm',    '\u1E43': 'm',    '\u0271': 'm',    '\u026F': 'm',    '\u24DD': 'n',    '\uFF4E': 'n',    '\u01F9': 'n',    '\u0144': 'n',    '\u00F1': 'n',    '\u1E45': 'n',    '\u0148': 'n',    '\u1E47': 'n',    '\u0146': 'n',    '\u1E4B': 'n',    '\u1E49': 'n',    '\u019E': 'n',    '\u0272': 'n',    '\u0149': 'n',    '\uA791': 'n',    '\uA7A5': 'n',    '\u01CC': 'nj',    '\u24DE': 'o',    '\uFF4F': 'o',    '\u00F2': 'o',    '\u00F3': 'o',    '\u00F4': 'o',    '\u1ED3': 'o',    '\u1ED1': 'o',    '\u1ED7': 'o',    '\u1ED5': 'o',    '\u00F5': 'o',    '\u1E4D': 'o',    '\u022D': 'o',    '\u1E4F': 'o',    '\u014D': 'o',    '\u1E51': 'o',    '\u1E53': 'o',    '\u014F': 'o',    '\u022F': 'o',    '\u0231': 'o',    '\u00F6': 'o',    '\u022B': 'o',    '\u1ECF': 'o',    '\u0151': 'o',    '\u01D2': 'o',    '\u020D': 'o',    '\u020F': 'o',    '\u01A1': 'o',    '\u1EDD': 'o',    '\u1EDB': 'o',    '\u1EE1': 'o',    '\u1EDF': 'o',    '\u1EE3': 'o',    '\u1ECD': 'o',    '\u1ED9': 'o',    '\u01EB': 'o',    '\u01ED': 'o',    '\u00F8': 'o',    '\u01FF': 'o',    '\u0254': 'o',    '\uA74B': 'o',    '\uA74D': 'o',    '\u0275': 'o',    '\u01A3': 'oi',    '\u0223': 'ou',    '\uA74F': 'oo',    '\u24DF': 'p',    '\uFF50': 'p',    '\u1E55': 'p',    '\u1E57': 'p',    '\u01A5': 'p',    '\u1D7D': 'p',    '\uA751': 'p',    '\uA753': 'p',    '\uA755': 'p',    '\u24E0': 'q',    '\uFF51': 'q',    '\u024B': 'q',    '\uA757': 'q',    '\uA759': 'q',    '\u24E1': 'r',    '\uFF52': 'r',    '\u0155': 'r',    '\u1E59': 'r',    '\u0159': 'r',    '\u0211': 'r',    '\u0213': 'r',    '\u1E5B': 'r',    '\u1E5D': 'r',    '\u0157': 'r',    '\u1E5F': 'r',    '\u024D': 'r',    '\u027D': 'r',    '\uA75B': 'r',    '\uA7A7': 'r',    '\uA783': 'r',    '\u24E2': 's',    '\uFF53': 's',    '\u00DF': 's',    '\u015B': 's',    '\u1E65': 's',    '\u015D': 's',    '\u1E61': 's',    '\u0161': 's',    '\u1E67': 's',    '\u1E63': 's',    '\u1E69': 's',    '\u0219': 's',    '\u015F': 's',    '\u023F': 's',    '\uA7A9': 's',    '\uA785': 's',    '\u1E9B': 's',    '\u24E3': 't',    '\uFF54': 't',    '\u1E6B': 't',    '\u1E97': 't',    '\u0165': 't',    '\u1E6D': 't',    '\u021B': 't',    '\u0163': 't',    '\u1E71': 't',    '\u1E6F': 't',    '\u0167': 't',    '\u01AD': 't',    '\u0288': 't',    '\u2C66': 't',    '\uA787': 't',    '\uA729': 'tz',    '\u24E4': 'u',    '\uFF55': 'u',    '\u00F9': 'u',    '\u00FA': 'u',    '\u00FB': 'u',    '\u0169': 'u',    '\u1E79': 'u',    '\u016B': 'u',    '\u1E7B': 'u',    '\u016D': 'u',    '\u00FC': 'u',    '\u01DC': 'u',    '\u01D8': 'u',    '\u01D6': 'u',    '\u01DA': 'u',    '\u1EE7': 'u',    '\u016F': 'u',    '\u0171': 'u',    '\u01D4': 'u',    '\u0215': 'u',    '\u0217': 'u',    '\u01B0': 'u',    '\u1EEB': 'u',    '\u1EE9': 'u',    '\u1EEF': 'u',    '\u1EED': 'u',    '\u1EF1': 'u',    '\u1EE5': 'u',    '\u1E73': 'u',    '\u0173': 'u',    '\u1E77': 'u',    '\u1E75': 'u',    '\u0289': 'u',    '\u24E5': 'v',    '\uFF56': 'v',    '\u1E7D': 'v',    '\u1E7F': 'v',    '\u028B': 'v',    '\uA75F': 'v',    '\u028C': 'v',    '\uA761': 'vy',    '\u24E6': 'w',    '\uFF57': 'w',    '\u1E81': 'w',    '\u1E83': 'w',    '\u0175': 'w',    '\u1E87': 'w',    '\u1E85': 'w',    '\u1E98': 'w',    '\u1E89': 'w',    '\u2C73': 'w',    '\u24E7': 'x',    '\uFF58': 'x',    '\u1E8B': 'x',    '\u1E8D': 'x',    '\u24E8': 'y',    '\uFF59': 'y',    '\u1EF3': 'y',    '\u00FD': 'y',    '\u0177': 'y',    '\u1EF9': 'y',    '\u0233': 'y',    '\u1E8F': 'y',    '\u00FF': 'y',    '\u1EF7': 'y',    '\u1E99': 'y',    '\u1EF5': 'y',    '\u01B4': 'y',    '\u024F': 'y',    '\u1EFF': 'y',    '\u24E9': 'z',    '\uFF5A': 'z',    '\u017A': 'z',    '\u1E91': 'z',    '\u017C': 'z',    '\u017E': 'z',    '\u1E93': 'z',    '\u1E95': 'z',    '\u01B6': 'z',    '\u0225': 'z',    '\u0240': 'z',    '\u2C6C': 'z',    '\uA763': 'z',    '\u0386': '\u0391',    '\u0388': '\u0395',    '\u0389': '\u0397',    '\u038A': '\u0399',    '\u03AA': '\u0399',    '\u038C': '\u039F',    '\u038E': '\u03A5',    '\u03AB': '\u03A5',    '\u038F': '\u03A9',    '\u03AC': '\u03B1',    '\u03AD': '\u03B5',    '\u03AE': '\u03B7',    '\u03AF': '\u03B9',    '\u03CA': '\u03B9',    '\u0390': '\u03B9',    '\u03CC': '\u03BF',    '\u03CD': '\u03C5',    '\u03CB': '\u03C5',    '\u03B0': '\u03C5',    '\u03C9': '\u03C9',    '\u03C2': '\u03C3'  };  return diacritics;});S2.define('select2/data/base',[  '../utils'], function (Utils) {  function BaseAdapter ($element, options) {    BaseAdapter.__super__.constructor.call(this);  }  Utils.Extend(BaseAdapter, Utils.Observable);  BaseAdapter.prototype.current = function (callback) {    throw new Error('The `current` method must be defined in child classes.');  };  BaseAdapter.prototype.query = function (params, callback) {    throw new Error('The `query` method must be defined in child classes.');  };  BaseAdapter.prototype.bind = function (container, $container) {    // Can be implemented in subclasses  };  BaseAdapter.prototype.destroy = function () {    // Can be implemented in subclasses  };  BaseAdapter.prototype.generateResultId = function (container, data) {    var id = container.id + '-result-';    id += Utils.generateChars(4);    if (data.id != null) {      id += '-' + data.id.toString();    } else {      id += '-' + Utils.generateChars(4);    }    return id;  };  return BaseAdapter;});S2.define('select2/data/select',[  './base',  '../utils',  'jquery'], function (BaseAdapter, Utils, $) {  function SelectAdapter ($element, options) {    this.$element = $element;    this.options = options;    SelectAdapter.__super__.constructor.call(this);  }  Utils.Extend(SelectAdapter, BaseAdapter);  SelectAdapter.prototype.current = function (callback) {    var data = [];    var self = this;    this.$element.find(':selected').each(function () {      var $option = $(this);      var option = self.item($option);      data.push(option);    });    callback(data);  };  SelectAdapter.prototype.select = function (data) {    var self = this;    data.selected = true;    // If data.element is a DOM node, use it instead    if ($(data.element).is('option')) {      data.element.selected = true;      this.$element.trigger('change');      return;    }    if (this.$element.prop('multiple')) {      this.current(function (currentData) {        var val = [];        data = [data];        data.push.apply(data, currentData);        for (var d = 0; d < data.length; d++) {          var id = data[d].id;          if ($.inArray(id, val) === -1) {            val.push(id);          }        }        self.$element.val(val);        self.$element.trigger('change');      });    } else {      var val = data.id;      this.$element.val(val);      this.$element.trigger('change');    }  };  SelectAdapter.prototype.unselect = function (data) {    var self = this;    if (!this.$element.prop('multiple')) {      return;    }    data.selected = false;    if ($(data.element).is('option')) {      data.element.selected = false;      this.$element.trigger('change');      return;    }    this.current(function (currentData) {      var val = [];      for (var d = 0; d < currentData.length; d++) {        var id = currentData[d].id;        if (id !== data.id && $.inArray(id, val) === -1) {          val.push(id);        }      }      self.$element.val(val);      self.$element.trigger('change');    });  };  SelectAdapter.prototype.bind = function (container, $container) {    var self = this;    this.container = container;    container.on('select', function (params) {      self.select(params.data);    });    container.on('unselect', function (params) {      self.unselect(params.data);    });  };  SelectAdapter.prototype.destroy = function () {    // Remove anything added to child elements    this.$element.find('*').each(function () {      // Remove any custom data set by Select2      $.removeData(this, 'data');    });  };  SelectAdapter.prototype.query = function (params, callback) {    var data = [];    var self = this;    var $options = this.$element.children();    $options.each(function () {      var $option = $(this);      if (!$option.is('option') && !$option.is('optgroup')) {        return;      }      var option = self.item($option);      var matches = self.matches(params, option);      if (matches !== null) {        data.push(matches);      }    });    callback({      results: data    });  };  SelectAdapter.prototype.addOptions = function ($options) {    Utils.appendMany(this.$element, $options);  };  SelectAdapter.prototype.option = function (data) {    var option;    if (data.children) {      option = document.createElement('optgroup');      option.label = data.text;    } else {      option = document.createElement('option');      if (option.textContent !== undefined) {        option.textContent = data.text;      } else {        option.innerText = data.text;      }    }    if (data.id) {      option.value = data.id;    }    if (data.disabled) {      option.disabled = true;    }    if (data.selected) {      option.selected = true;    }    if (data.title) {      option.title = data.title;    }    var $option = $(option);    var normalizedData = this._normalizeItem(data);    normalizedData.element = option;    // Override the option's data with the combined data    $.data(option, 'data', normalizedData);    return $option;  };  SelectAdapter.prototype.item = function ($option) {    var data = {};    data = $.data($option[0], 'data');    if (data != null) {      return data;    }    if ($option.is('option')) {      data = {        id: $option.val(),        text: $option.text(),        disabled: $option.prop('disabled'),        selected: $option.prop('selected'),        title: $option.prop('title')      };    } else if ($option.is('optgroup')) {      data = {        text: $option.prop('label'),        children: [],        title: $option.prop('title')      };      var $children = $option.children('option');      var children = [];      for (var c = 0; c < $children.length; c++) {        var $child = $($children[c]);        var child = this.item($child);        children.push(child);      }      data.children = children;    }    data = this._normalizeItem(data);    data.element = $option[0];    $.data($option[0], 'data', data);    return data;  };  SelectAdapter.prototype._normalizeItem = function (item) {    if (!$.isPlainObject(item)) {      item = {        id: item,        text: item      };    }    item = $.extend({}, {      text: ''    }, item);    var defaults = {      selected: false,      disabled: false    };    if (item.id != null) {      item.id = item.id.toString();    }    if (item.text != null) {      item.text = item.text.toString();    }    if (item._resultId == null && item.id && this.container != null) {      item._resultId = this.generateResultId(this.container, item);    }    return $.extend({}, defaults, item);  };  SelectAdapter.prototype.matches = function (params, data) {    var matcher = this.options.get('matcher');    return matcher(params, data);  };  return SelectAdapter;});S2.define('select2/data/array',[  './select',  '../utils',  'jquery'], function (SelectAdapter, Utils, $) {  function ArrayAdapter ($element, options) {    var data = options.get('data') || [];    ArrayAdapter.__super__.constructor.call(this, $element, options);    this.addOptions(this.convertToOptions(data));  }  Utils.Extend(ArrayAdapter, SelectAdapter);  ArrayAdapter.prototype.select = function (data) {    var $option = this.$element.find('option').filter(function (i, elm) {      return elm.value == data.id.toString();    });    if ($option.length === 0) {      $option = this.option(data);      this.addOptions($option);    }    ArrayAdapter.__super__.select.call(this, data);  };  ArrayAdapter.prototype.convertToOptions = function (data) {    var self = this;    var $existing = this.$element.find('option');    var existingIds = $existing.map(function () {      return self.item($(this)).id;    }).get();    var $options = [];    // Filter out all items except for the one passed in the argument    function onlyItem (item) {      return function () {        return $(this).val() == item.id;      };    }    for (var d = 0; d < data.length; d++) {      var item = this._normalizeItem(data[d]);      // Skip items which were pre-loaded, only merge the data      if ($.inArray(item.id, existingIds) >= 0) {        var $existingOption = $existing.filter(onlyItem(item));        var existingData = this.item($existingOption);        var newData = $.extend(true, {}, item, existingData);        var $newOption = this.option(newData);        $existingOption.replaceWith($newOption);        continue;      }      var $option = this.option(item);      if (item.children) {        var $children = this.convertToOptions(item.children);        Utils.appendMany($option, $children);      }      $options.push($option);    }    return $options;  };  return ArrayAdapter;});S2.define('select2/data/ajax',[  './array',  '../utils',  'jquery'], function (ArrayAdapter, Utils, $) {  function AjaxAdapter ($element, options) {    this.ajaxOptions = this._applyDefaults(options.get('ajax'));    if (this.ajaxOptions.processResults != null) {      this.processResults = this.ajaxOptions.processResults;    }    AjaxAdapter.__super__.constructor.call(this, $element, options);  }  Utils.Extend(AjaxAdapter, ArrayAdapter);  AjaxAdapter.prototype._applyDefaults = function (options) {    var defaults = {      data: function (params) {        return $.extend({}, params, {          q: params.term        });      },      transport: function (params, success, failure) {        var $request = $.ajax(params);        $request.then(success);        $request.fail(failure);        return $request;      }    };    return $.extend({}, defaults, options, true);  };  AjaxAdapter.prototype.processResults = function (results) {    return results;  };  AjaxAdapter.prototype.query = function (params, callback) {    var matches = [];    var self = this;    if (this._request != null) {      // JSONP requests cannot always be aborted      if ($.isFunction(this._request.abort)) {        this._request.abort();      }      this._request = null;    }    var options = $.extend({      type: 'GET'    }, this.ajaxOptions);    if (typeof options.url === 'function') {      options.url = options.url.call(this.$element, params);    }    if (typeof options.data === 'function') {      options.data = options.data.call(this.$element, params);    }    function request () {      var $request = options.transport(options, function (data) {        var results = self.processResults(data, params);        if (self.options.get('debug') && window.console && console.error) {          // Check to make sure that the response included a `results` key.          if (!results || !results.results || !$.isArray(results.results)) {            console.error(              'Select2: The AJAX results did not return an array in the ' +              '`results` key of the response.'            );          }        }        callback(results);      }, function () {        // Attempt to detect if a request was aborted        // Only works if the transport exposes a status property        if ($request.status && $request.status === '0') {          return;        }        self.trigger('results:message', {          message: 'errorLoading'        });      });      self._request = $request;    }    if (this.ajaxOptions.delay && params.term != null) {      if (this._queryTimeout) {        window.clearTimeout(this._queryTimeout);      }      this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);    } else {      request();    }  };  return AjaxAdapter;});S2.define('select2/data/tags',[  'jquery'], function ($) {  function Tags (decorated, $element, options) {    var tags = options.get('tags');    var createTag = options.get('createTag');    if (createTag !== undefined) {      this.createTag = createTag;    }    var insertTag = options.get('insertTag');    if (insertTag !== undefined) {        this.insertTag = insertTag;    }    decorated.call(this, $element, options);    if ($.isArray(tags)) {      for (var t = 0; t < tags.length; t++) {        var tag = tags[t];        var item = this._normalizeItem(tag);        var $option = this.option(item);        this.$element.append($option);      }    }  }  Tags.prototype.query = function (decorated, params, callback) {    var self = this;    this._removeOldTags();    if (params.term == null || params.page != null) {      decorated.call(this, params, callback);      return;    }    function wrapper (obj, child) {      var data = obj.results;      for (var i = 0; i < data.length; i++) {        var option = data[i];        var checkChildren = (          option.children != null &&          !wrapper({            results: option.children          }, true)        );        var checkText = option.text === params.term;        if (checkText || checkChildren) {          if (child) {            return false;          }          obj.data = data;          callback(obj);          return;        }      }      if (child) {        return true;      }      var tag = self.createTag(params);      if (tag != null) {        var $option = self.option(tag);        $option.attr('data-select2-tag', true);        self.addOptions([$option]);        self.insertTag(data, tag);      }      obj.results = data;      callback(obj);    }    decorated.call(this, params, wrapper);  };  Tags.prototype.createTag = function (decorated, params) {    var term = $.trim(params.term);    if (term === '') {      return null;    }    return {      id: term,      text: term    };  };  Tags.prototype.insertTag = function (_, data, tag) {    data.unshift(tag);  };  Tags.prototype._removeOldTags = function (_) {    var tag = this._lastTag;    var $options = this.$element.find('option[data-select2-tag]');    $options.each(function () {      if (this.selected) {        return;      }      $(this).remove();    });  };  return Tags;});S2.define('select2/data/tokenizer',[  'jquery'], function ($) {  function Tokenizer (decorated, $element, options) {    var tokenizer = options.get('tokenizer');    if (tokenizer !== undefined) {      this.tokenizer = tokenizer;    }    decorated.call(this, $element, options);  }  Tokenizer.prototype.bind = function (decorated, container, $container) {    decorated.call(this, container, $container);    this.$search =  container.dropdown.$search || container.selection.$search ||      $container.find('.select2-search__field');  };  Tokenizer.prototype.query = function (decorated, params, callback) {    var self = this;    function createAndSelect (data) {      // Normalize the data object so we can use it for checks      var item = self._normalizeItem(data);      // Check if the data object already exists as a tag      // Select it if it doesn't      var $existingOptions = self.$element.find('option').filter(function () {        return $(this).val() === item.id;      });      // If an existing option wasn't found for it, create the option      if (!$existingOptions.length) {        var $option = self.option(item);        $option.attr('data-select2-tag', true);        self._removeOldTags();        self.addOptions([$option]);      }      // Select the item, now that we know there is an option for it      select(item);    }    function select (data) {      self.trigger('select', {        data: data      });    }    params.term = params.term || '';    var tokenData = this.tokenizer(params, this.options, createAndSelect);    if (tokenData.term !== params.term) {      // Replace the search term if we have the search box      if (this.$search.length) {        this.$search.val(tokenData.term);        this.$search.focus();      }      params.term = tokenData.term;    }    decorated.call(this, params, callback);  };  Tokenizer.prototype.tokenizer = function (_, params, options, callback) {    var separators = options.get('tokenSeparators') || [];    var term = params.term;    var i = 0;    var createTag = this.createTag || function (params) {      return {        id: params.term,        text: params.term      };    };    while (i < term.length) {      var termChar = term[i];      if ($.inArray(termChar, separators) === -1) {        i++;        continue;      }      var part = term.substr(0, i);      var partParams = $.extend({}, params, {        term: part      });      var data = createTag(partParams);      if (data == null) {        i++;        continue;      }      callback(data);      // Reset the term to not include the tokenized portion      term = term.substr(i + 1) || '';      i = 0;    }    return {      term: term    };  };  return Tokenizer;});S2.define('select2/data/minimumInputLength',[], function () {  function MinimumInputLength (decorated, $e, options) {    this.minimumInputLength = options.get('minimumInputLength');    decorated.call(this, $e, options);  }  MinimumInputLength.prototype.query = function (decorated, params, callback) {    params.term = params.term || '';    if (params.term.length < this.minimumInputLength) {      this.trigger('results:message', {        message: 'inputTooShort',        args: {          minimum: this.minimumInputLength,          input: params.term,          params: params        }      });      return;    }    decorated.call(this, params, callback);  };  return MinimumInputLength;});S2.define('select2/data/maximumInputLength',[], function () {  function MaximumInputLength (decorated, $e, options) {    this.maximumInputLength = options.get('maximumInputLength');    decorated.call(this, $e, options);  }  MaximumInputLength.prototype.query = function (decorated, params, callback) {    params.term = params.term || '';    if (this.maximumInputLength > 0 &&        params.term.length > this.maximumInputLength) {      this.trigger('results:message', {        message: 'inputTooLong',        args: {          maximum: this.maximumInputLength,          input: params.term,          params: params        }      });      return;    }    decorated.call(this, params, callback);  };  return MaximumInputLength;});S2.define('select2/data/maximumSelectionLength',[], function (){  function MaximumSelectionLength (decorated, $e, options) {    this.maximumSelectionLength = options.get('maximumSelectionLength');    decorated.call(this, $e, options);  }  MaximumSelectionLength.prototype.query =    function (decorated, params, callback) {      var self = this;      this.current(function (currentData) {        var count = currentData != null ? currentData.length : 0;        if (self.maximumSelectionLength > 0 &&          count >= self.maximumSelectionLength) {          self.trigger('results:message', {            message: 'maximumSelected',            args: {              maximum: self.maximumSelectionLength            }          });          return;        }        decorated.call(self, params, callback);      });  };  return MaximumSelectionLength;});S2.define('select2/dropdown',[  'jquery',  './utils'], function ($, Utils) {  function Dropdown ($element, options) {    this.$element = $element;    this.options = options;    Dropdown.__super__.constructor.call(this);  }  Utils.Extend(Dropdown, Utils.Observable);  Dropdown.prototype.render = function () {    var $dropdown = $(      '<span class="select2-dropdown">' +        '<span class="select2-results"></span>' +      '</span>'    );    $dropdown.attr('dir', this.options.get('dir'));    this.$dropdown = $dropdown;    return $dropdown;  };  Dropdown.prototype.bind = function () {    // Should be implemented in subclasses  };  Dropdown.prototype.position = function ($dropdown, $container) {    // Should be implmented in subclasses  };  Dropdown.prototype.destroy = function () {    // Remove the dropdown from the DOM    this.$dropdown.remove();  };  return Dropdown;});S2.define('select2/dropdown/search',[  'jquery',  '../utils'], function ($, Utils) {  function Search () { }  Search.prototype.render = function (decorated) {    var $rendered = decorated.call(this);    var $search = $(      '<span class="select2-search select2-search--dropdown">' +        '<input class="select2-search__field" type="search" tabindex="-1"' +        ' autocomplete="off" autocorrect="off" autocapitalize="off"' +        ' spellcheck="false" role="textbox" />' +      '</span>'    );    this.$searchContainer = $search;    this.$search = $search.find('input');    $rendered.prepend($search);    return $rendered;  };  Search.prototype.bind = function (decorated, container, $container) {    var self = this;    decorated.call(this, container, $container);    this.$search.on('keydown', function (evt) {      self.trigger('keypress', evt);      self._keyUpPrevented = evt.isDefaultPrevented();    });    // Workaround for browsers which do not support the `input` event    // This will prevent double-triggering of events for browsers which support    // both the `keyup` and `input` events.    this.$search.on('input', function (evt) {      // Unbind the duplicated `keyup` event      $(this).off('keyup');    });    this.$search.on('keyup input', function (evt) {      self.handleSearch(evt);    });    container.on('open', function () {      self.$search.attr('tabindex', 0);      self.$search.focus();      window.setTimeout(function () {        self.$search.focus();      }, 0);    });    container.on('close', function () {      self.$search.attr('tabindex', -1);      self.$search.val('');    });    container.on('focus', function () {      if (container.isOpen()) {        self.$search.focus();      }    });    container.on('results:all', function (params) {      if (params.query.term == null || params.query.term === '') {        var showSearch = self.showSearch(params);        if (showSearch) {          self.$searchContainer.removeClass('select2-search--hide');        } else {          self.$searchContainer.addClass('select2-search--hide');        }      }    });  };  Search.prototype.handleSearch = function (evt) {    if (!this._keyUpPrevented) {      var input = this.$search.val();      this.trigger('query', {        term: input      });    }    this._keyUpPrevented = false;  };  Search.prototype.showSearch = function (_, params) {    return true;  };  return Search;});S2.define('select2/dropdown/hidePlaceholder',[], function () {  function HidePlaceholder (decorated, $element, options, dataAdapter) {    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));    decorated.call(this, $element, options, dataAdapter);  }  HidePlaceholder.prototype.append = function (decorated, data) {    data.results = this.removePlaceholder(data.results);    decorated.call(this, data);  };  HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {    if (typeof placeholder === 'string') {      placeholder = {        id: '',        text: placeholder      };    }    return placeholder;  };  HidePlaceholder.prototype.removePlaceholder = function (_, data) {    var modifiedData = data.slice(0);    for (var d = data.length - 1; d >= 0; d--) {      var item = data[d];      if (this.placeholder.id === item.id) {        modifiedData.splice(d, 1);      }    }    return modifiedData;  };  return HidePlaceholder;});S2.define('select2/dropdown/infiniteScroll',[  'jquery'], function ($) {  function InfiniteScroll (decorated, $element, options, dataAdapter) {    this.lastParams = {};    decorated.call(this, $element, options, dataAdapter);    this.$loadingMore = this.createLoadingMore();    this.loading = false;  }  InfiniteScroll.prototype.append = function (decorated, data) {    this.$loadingMore.remove();    this.loading = false;    decorated.call(this, data);    if (this.showLoadingMore(data)) {      this.$results.append(this.$loadingMore);    }  };  InfiniteScroll.prototype.bind = function (decorated, container, $container) {    var self = this;    decorated.call(this, container, $container);    container.on('query', function (params) {      self.lastParams = params;      self.loading = true;    });    container.on('query:append', function (params) {      self.lastParams = params;      self.loading = true;    });    this.$results.on('scroll', function () {      var isLoadMoreVisible = $.contains(        document.documentElement,        self.$loadingMore[0]      );      if (self.loading || !isLoadMoreVisible) {        return;      }      var currentOffset = self.$results.offset().top +        self.$results.outerHeight(false);      var loadingMoreOffset = self.$loadingMore.offset().top +        self.$loadingMore.outerHeight(false);      if (currentOffset + 50 >= loadingMoreOffset) {        self.loadMore();      }    });  };  InfiniteScroll.prototype.loadMore = function () {    this.loading = true;    var params = $.extend({}, {page: 1}, this.lastParams);    params.page++;    this.trigger('query:append', params);  };  InfiniteScroll.prototype.showLoadingMore = function (_, data) {    return data.pagination && data.pagination.more;  };  InfiniteScroll.prototype.createLoadingMore = function () {    var $option = $(      '<li ' +      'class="select2-results__option select2-results__option--load-more"' +      'role="treeitem" aria-disabled="true"></li>'    );    var message = this.options.get('translations').get('loadingMore');    $option.html(message(this.lastParams));    return $option;  };  return InfiniteScroll;});S2.define('select2/dropdown/attachBody',[  'jquery',  '../utils'], function ($, Utils) {  function AttachBody (decorated, $element, options) {    this.$dropdownParent = options.get('dropdownParent') || $(document.body);    decorated.call(this, $element, options);  }  AttachBody.prototype.bind = function (decorated, container, $container) {    var self = this;    var setupResultsEvents = false;    decorated.call(this, container, $container);    container.on('open', function () {      self._showDropdown();      self._attachPositioningHandler(container);      if (!setupResultsEvents) {        setupResultsEvents = true;        container.on('results:all', function () {          self._positionDropdown();          self._resizeDropdown();        });        container.on('results:append', function () {          self._positionDropdown();          self._resizeDropdown();        });      }    });    container.on('close', function () {      self._hideDropdown();      self._detachPositioningHandler(container);    });    this.$dropdownContainer.on('mousedown', function (evt) {      evt.stopPropagation();    });  };  AttachBody.prototype.destroy = function (decorated) {    decorated.call(this);    this.$dropdownContainer.remove();  };  AttachBody.prototype.position = function (decorated, $dropdown, $container) {    // Clone all of the container classes    $dropdown.attr('class', $container.attr('class'));    $dropdown.removeClass('select2');    $dropdown.addClass('select2-container--open');    $dropdown.css({      position: 'absolute',      top: -999999    });    this.$container = $container;  };  AttachBody.prototype.render = function (decorated) {    var $container = $('<span></span>');    var $dropdown = decorated.call(this);    $container.append($dropdown);    this.$dropdownContainer = $container;    return $container;  };  AttachBody.prototype._hideDropdown = function (decorated) {    this.$dropdownContainer.detach();  };  AttachBody.prototype._attachPositioningHandler =      function (decorated, container) {    var self = this;    var scrollEvent = 'scroll.select2.' + container.id;    var resizeEvent = 'resize.select2.' + container.id;    var orientationEvent = 'orientationchange.select2.' + container.id;    var $watchers = this.$container.parents().filter(Utils.hasScroll);    $watchers.each(function () {      $(this).data('select2-scroll-position', {        x: $(this).scrollLeft(),        y: $(this).scrollTop()      });    });    $watchers.on(scrollEvent, function (ev) {      var position = $(this).data('select2-scroll-position');      $(this).scrollTop(position.y);    });    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,      function (e) {      self._positionDropdown();      self._resizeDropdown();    });  };  AttachBody.prototype._detachPositioningHandler =      function (decorated, container) {    var scrollEvent = 'scroll.select2.' + container.id;    var resizeEvent = 'resize.select2.' + container.id;    var orientationEvent = 'orientationchange.select2.' + container.id;    var $watchers = this.$container.parents().filter(Utils.hasScroll);    $watchers.off(scrollEvent);    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);  };  AttachBody.prototype._positionDropdown = function () {    var $window = $(window);    var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');    var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');    var newDirection = null;    var offset = this.$container.offset();    offset.bottom = offset.top + this.$container.outerHeight(false);    var container = {      height: this.$container.outerHeight(false)    };    container.top = offset.top;    container.bottom = offset.top + container.height;    var dropdown = {      height: this.$dropdown.outerHeight(false)    };    var viewport = {      top: $window.scrollTop(),      bottom: $window.scrollTop() + $window.height()    };    var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);    var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);    var css = {      left: offset.left,      top: container.bottom    };    // Determine what the parent element is to use for calciulating the offset    var $offsetParent = this.$dropdownParent;    // For statically positoned elements, we need to get the element    // that is determining the offset    if ($offsetParent.css('position') === 'static') {      $offsetParent = $offsetParent.offsetParent();    }    var parentOffset = $offsetParent.offset();    css.top -= parentOffset.top;    css.left -= parentOffset.left;    if (!isCurrentlyAbove && !isCurrentlyBelow) {      newDirection = 'below';    }    if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {      newDirection = 'above';    } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {      newDirection = 'below';    }    if (newDirection == 'above' ||      (isCurrentlyAbove && newDirection !== 'below')) {      css.top = container.top - parentOffset.top - dropdown.height;    }    if (newDirection != null) {      this.$dropdown        .removeClass('select2-dropdown--below select2-dropdown--above')        .addClass('select2-dropdown--' + newDirection);      this.$container        .removeClass('select2-container--below select2-container--above')        .addClass('select2-container--' + newDirection);    }    this.$dropdownContainer.css(css);  };  AttachBody.prototype._resizeDropdown = function () {    var css = {      width: this.$container.outerWidth(false) + 'px'    };    if (this.options.get('dropdownAutoWidth')) {      css.minWidth = css.width;      css.position = 'relative';      css.width = 'auto';    }    this.$dropdown.css(css);  };  AttachBody.prototype._showDropdown = function (decorated) {    this.$dropdownContainer.appendTo(this.$dropdownParent);    this._positionDropdown();    this._resizeDropdown();  };  return AttachBody;});S2.define('select2/dropdown/minimumResultsForSearch',[], function () {  function countResults (data) {    var count = 0;    for (var d = 0; d < data.length; d++) {      var item = data[d];      if (item.children) {        count += countResults(item.children);      } else {        count++;      }    }    return count;  }  function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {    this.minimumResultsForSearch = options.get('minimumResultsForSearch');    if (this.minimumResultsForSearch < 0) {      this.minimumResultsForSearch = Infinity;    }    decorated.call(this, $element, options, dataAdapter);  }  MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {    if (countResults(params.data.results) < this.minimumResultsForSearch) {      return false;    }    return decorated.call(this, params);  };  return MinimumResultsForSearch;});S2.define('select2/dropdown/selectOnClose',[], function () {  function SelectOnClose () { }  SelectOnClose.prototype.bind = function (decorated, container, $container) {    var self = this;    decorated.call(this, container, $container);    container.on('close', function (params) {      self._handleSelectOnClose(params);    });  };  SelectOnClose.prototype._handleSelectOnClose = function (_, params) {    if (params && params.originalSelect2Event != null) {      var event = params.originalSelect2Event;      // Don't select an item if the close event was triggered from a select or      // unselect event      if (event._type === 'select' || event._type === 'unselect') {        return;      }    }    var $highlightedResults = this.getHighlightedResults();    // Only select highlighted results    if ($highlightedResults.length < 1) {      return;    }    var data = $highlightedResults.data('data');    // Don't re-select already selected resulte    if (      (data.element != null && data.element.selected) ||      (data.element == null && data.selected)    ) {      return;    }    this.trigger('select', {        data: data    });  };  return SelectOnClose;});S2.define('select2/dropdown/closeOnSelect',[], function () {  function CloseOnSelect () { }  CloseOnSelect.prototype.bind = function (decorated, container, $container) {    var self = this;    decorated.call(this, container, $container);    container.on('select', function (evt) {      self._selectTriggered(evt);    });    container.on('unselect', function (evt) {      self._selectTriggered(evt);    });  };  CloseOnSelect.prototype._selectTriggered = function (_, evt) {    var originalEvent = evt.originalEvent;    // Don't close if the control key is being held    if (originalEvent && originalEvent.ctrlKey) {      return;    }    this.trigger('close', {      originalEvent: originalEvent,      originalSelect2Event: evt    });  };  return CloseOnSelect;});S2.define('select2/i18n/en',[],function () {  // English  return {    errorLoading: function () {      return 'The results could not be loaded.';    },    inputTooLong: function (args) {      var overChars = args.input.length - args.maximum;      var message = 'Please delete ' + overChars + ' character';      if (overChars != 1) {        message += 's';      }      return message;    },    inputTooShort: function (args) {      var remainingChars = args.minimum - args.input.length;      var message = 'Please enter ' + remainingChars + ' or more characters';      return message;    },    loadingMore: function () {      return 'Loading more results…';    },    maximumSelected: function (args) {      var message = 'You can only select ' + args.maximum + ' item';      if (args.maximum != 1) {        message += 's';      }      return message;    },    noResults: function () {      return 'No results found';    },    searching: function () {      return 'Searching…';    }  };});S2.define('select2/defaults',[  'jquery',  'require',  './results',  './selection/single',  './selection/multiple',  './selection/placeholder',  './selection/allowClear',  './selection/search',  './selection/eventRelay',  './utils',  './translation',  './diacritics',  './data/select',  './data/array',  './data/ajax',  './data/tags',  './data/tokenizer',  './data/minimumInputLength',  './data/maximumInputLength',  './data/maximumSelectionLength',  './dropdown',  './dropdown/search',  './dropdown/hidePlaceholder',  './dropdown/infiniteScroll',  './dropdown/attachBody',  './dropdown/minimumResultsForSearch',  './dropdown/selectOnClose',  './dropdown/closeOnSelect',  './i18n/en'], function ($, require,             ResultsList,             SingleSelection, MultipleSelection, Placeholder, AllowClear,             SelectionSearch, EventRelay,             Utils, Translation, DIACRITICS,             SelectData, ArrayData, AjaxData, Tags, Tokenizer,             MinimumInputLength, MaximumInputLength, MaximumSelectionLength,             Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,             AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,             EnglishTranslation) {  function Defaults () {    this.reset();  }  Defaults.prototype.apply = function (options) {    options = $.extend(true, {}, this.defaults, options);    if (options.dataAdapter == null) {      if (options.ajax != null) {        options.dataAdapter = AjaxData;      } else if (options.data != null) {        options.dataAdapter = ArrayData;      } else {        options.dataAdapter = SelectData;      }      if (options.minimumInputLength > 0) {        options.dataAdapter = Utils.Decorate(          options.dataAdapter,          MinimumInputLength        );      }      if (options.maximumInputLength > 0) {        options.dataAdapter = Utils.Decorate(          options.dataAdapter,          MaximumInputLength        );      }      if (options.maximumSelectionLength > 0) {        options.dataAdapter = Utils.Decorate(          options.dataAdapter,          MaximumSelectionLength        );      }      if (options.tags) {        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);      }      if (options.tokenSeparators != null || options.tokenizer != null) {        options.dataAdapter = Utils.Decorate(          options.dataAdapter,          Tokenizer        );      }      if (options.query != null) {        var Query = require(options.amdBase + 'compat/query');        options.dataAdapter = Utils.Decorate(          options.dataAdapter,          Query        );      }      if (options.initSelection != null) {        var InitSelection = require(options.amdBase + 'compat/initSelection');        options.dataAdapter = Utils.Decorate(          options.dataAdapter,          InitSelection        );      }    }    if (options.resultsAdapter == null) {      options.resultsAdapter = ResultsList;      if (options.ajax != null) {        options.resultsAdapter = Utils.Decorate(          options.resultsAdapter,          InfiniteScroll        );      }      if (options.placeholder != null) {        options.resultsAdapter = Utils.Decorate(          options.resultsAdapter,          HidePlaceholder        );      }      if (options.selectOnClose) {        options.resultsAdapter = Utils.Decorate(          options.resultsAdapter,          SelectOnClose        );      }    }    if (options.dropdownAdapter == null) {      if (options.multiple) {        options.dropdownAdapter = Dropdown;      } else {        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);        options.dropdownAdapter = SearchableDropdown;      }      if (options.minimumResultsForSearch !== 0) {        options.dropdownAdapter = Utils.Decorate(          options.dropdownAdapter,          MinimumResultsForSearch        );      }      if (options.closeOnSelect) {        options.dropdownAdapter = Utils.Decorate(          options.dropdownAdapter,          CloseOnSelect        );      }      if (        options.dropdownCssClass != null ||        options.dropdownCss != null ||        options.adaptDropdownCssClass != null      ) {        var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');        options.dropdownAdapter = Utils.Decorate(          options.dropdownAdapter,          DropdownCSS        );      }      options.dropdownAdapter = Utils.Decorate(        options.dropdownAdapter,        AttachBody      );    }    if (options.selectionAdapter == null) {      if (options.multiple) {        options.selectionAdapter = MultipleSelection;      } else {        options.selectionAdapter = SingleSelection;      }      // Add the placeholder mixin if a placeholder was specified      if (options.placeholder != null) {        options.selectionAdapter = Utils.Decorate(          options.selectionAdapter,          Placeholder        );      }      if (options.allowClear) {        options.selectionAdapter = Utils.Decorate(          options.selectionAdapter,          AllowClear        );      }      if (options.multiple) {        options.selectionAdapter = Utils.Decorate(          options.selectionAdapter,          SelectionSearch        );      }      if (        options.containerCssClass != null ||        options.containerCss != null ||        options.adaptContainerCssClass != null      ) {        var ContainerCSS = require(options.amdBase + 'compat/containerCss');        options.selectionAdapter = Utils.Decorate(          options.selectionAdapter,          ContainerCSS        );      }      options.selectionAdapter = Utils.Decorate(        options.selectionAdapter,        EventRelay      );    }    if (typeof options.language === 'string') {      // Check if the language is specified with a region      if (options.language.indexOf('-') > 0) {        // Extract the region information if it is included        var languageParts = options.language.split('-');        var baseLanguage = languageParts[0];        options.language = [options.language, baseLanguage];      } else {        options.language = [options.language];      }    }    if ($.isArray(options.language)) {      var languages = new Translation();      options.language.push('en');      var languageNames = options.language;      for (var l = 0; l < languageNames.length; l++) {        var name = languageNames[l];        var language = {};        try {          // Try to load it with the original name          language = Translation.loadPath(name);        } catch (e) {          try {            // If we couldn't load it, check if it wasn't the full path            name = this.defaults.amdLanguageBase + name;            language = Translation.loadPath(name);          } catch (ex) {            // The translation could not be loaded at all. Sometimes this is            // because of a configuration problem, other times this can be            // because of how Select2 helps load all possible translation files.            if (options.debug && window.console && console.warn) {              console.warn(                'Select2: The language file for "' + name + '" could not be ' +                'automatically loaded. A fallback will be used instead.'              );            }            continue;          }        }        languages.extend(language);      }      options.translations = languages;    } else {      var baseTranslation = Translation.loadPath(        this.defaults.amdLanguageBase + 'en'      );      var customTranslation = new Translation(options.language);      customTranslation.extend(baseTranslation);      options.translations = customTranslation;    }    return options;  };  Defaults.prototype.reset = function () {    function stripDiacritics (text) {      // Used 'uni range + named function' from http://jsperf.com/diacritics/18      function match(a) {        return DIACRITICS[a] || a;      }      return text.replace(/[^\u0000-\u007E]/g, match);    }    function matcher (params, data) {      // Always return the object if there is nothing to compare      if ($.trim(params.term) === '') {        return data;      }      // Do a recursive check for options with children      if (data.children && data.children.length > 0) {        // Clone the data object if there are children        // This is required as we modify the object to remove any non-matches        var match = $.extend(true, {}, data);        // Check each child of the option        for (var c = data.children.length - 1; c >= 0; c--) {          var child = data.children[c];          var matches = matcher(params, child);          // If there wasn't a match, remove the object in the array          if (matches == null) {            match.children.splice(c, 1);          }        }        // If any children matched, return the new object        if (match.children.length > 0) {          return match;        }        // If there were no matching children, check just the plain object        return matcher(params, match);      }      var original = stripDiacritics(data.text).toUpperCase();      var term = stripDiacritics(params.term).toUpperCase();      // Check if the text contains the term      if (original.indexOf(term) > -1) {        return data;      }      // If it doesn't contain the term, don't return anything      return null;    }    this.defaults = {      amdBase: './',      amdLanguageBase: './i18n/',      closeOnSelect: true,      debug: false,      dropdownAutoWidth: false,      escapeMarkup: Utils.escapeMarkup,      language: EnglishTranslation,      matcher: matcher,      minimumInputLength: 0,      maximumInputLength: 0,      maximumSelectionLength: 0,      minimumResultsForSearch: 0,      selectOnClose: false,      sorter: function (data) {        return data;      },      templateResult: function (result) {        return result.text;      },      templateSelection: function (selection) {        return selection.text;      },      theme: 'default',      width: 'resolve'    };  };  Defaults.prototype.set = function (key, value) {    var camelKey = $.camelCase(key);    var data = {};    data[camelKey] = value;    var convertedData = Utils._convertData(data);    $.extend(this.defaults, convertedData);  };  var defaults = new Defaults();  return defaults;});S2.define('select2/options',[  'require',  'jquery',  './defaults',  './utils'], function (require, $, Defaults, Utils) {  function Options (options, $element) {    this.options = options;    if ($element != null) {      this.fromElement($element);    }    this.options = Defaults.apply(this.options);    if ($element && $element.is('input')) {      var InputCompat = require(this.get('amdBase') + 'compat/inputData');      this.options.dataAdapter = Utils.Decorate(        this.options.dataAdapter,        InputCompat      );    }  }  Options.prototype.fromElement = function ($e) {    var excludedData = ['select2'];    if (this.options.multiple == null) {      this.options.multiple = $e.prop('multiple');    }    if (this.options.disabled == null) {      this.options.disabled = $e.prop('disabled');    }    if (this.options.language == null) {      if ($e.prop('lang')) {        this.options.language = $e.prop('lang').toLowerCase();      } else if ($e.closest('[lang]').prop('lang')) {        this.options.language = $e.closest('[lang]').prop('lang');      }    }    if (this.options.dir == null) {      if ($e.prop('dir')) {        this.options.dir = $e.prop('dir');      } else if ($e.closest('[dir]').prop('dir')) {        this.options.dir = $e.closest('[dir]').prop('dir');      } else {        this.options.dir = 'ltr';      }    }    $e.prop('disabled', this.options.disabled);    $e.prop('multiple', this.options.multiple);    if ($e.data('select2Tags')) {      if (this.options.debug && window.console && console.warn) {        console.warn(          'Select2: The `data-select2-tags` attribute has been changed to ' +          'use the `data-data` and `data-tags="true"` attributes and will be ' +          'removed in future versions of Select2.'        );      }      $e.data('data', $e.data('select2Tags'));      $e.data('tags', true);    }    if ($e.data('ajaxUrl')) {      if (this.options.debug && window.console && console.warn) {        console.warn(          'Select2: The `data-ajax-url` attribute has been changed to ' +          '`data-ajax--url` and support for the old attribute will be removed' +          ' in future versions of Select2.'        );      }      $e.attr('ajax--url', $e.data('ajaxUrl'));      $e.data('ajax--url', $e.data('ajaxUrl'));    }    var dataset = {};    // Prefer the element's `dataset` attribute if it exists    // jQuery 1.x does not correctly handle data attributes with multiple dashes    if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {      dataset = $.extend(true, {}, $e[0].dataset, $e.data());    } else {      dataset = $e.data();    }    var data = $.extend(true, {}, dataset);    data = Utils._convertData(data);    for (var key in data) {      if ($.inArray(key, excludedData) > -1) {        continue;      }      if ($.isPlainObject(this.options[key])) {        $.extend(this.options[key], data[key]);      } else {        this.options[key] = data[key];      }    }    return this;  };  Options.prototype.get = function (key) {    return this.options[key];  };  Options.prototype.set = function (key, val) {    this.options[key] = val;  };  return Options;});S2.define('select2/core',[  'jquery',  './options',  './utils',  './keys'], function ($, Options, Utils, KEYS) {  var Select2 = function ($element, options) {    if ($element.data('select2') != null) {      $element.data('select2').destroy();    }    this.$element = $element;    this.id = this._generateId($element);    options = options || {};    this.options = new Options(options, $element);    Select2.__super__.constructor.call(this);    // Set up the tabindex    var tabindex = $element.attr('tabindex') || 0;    $element.data('old-tabindex', tabindex);    $element.attr('tabindex', '-1');    // Set up containers and adapters    var DataAdapter = this.options.get('dataAdapter');    this.dataAdapter = new DataAdapter($element, this.options);    var $container = this.render();    this._placeContainer($container);    var SelectionAdapter = this.options.get('selectionAdapter');    this.selection = new SelectionAdapter($element, this.options);    this.$selection = this.selection.render();    this.selection.position(this.$selection, $container);    var DropdownAdapter = this.options.get('dropdownAdapter');    this.dropdown = new DropdownAdapter($element, this.options);    this.$dropdown = this.dropdown.render();    this.dropdown.position(this.$dropdown, $container);    var ResultsAdapter = this.options.get('resultsAdapter');    this.results = new ResultsAdapter($element, this.options, this.dataAdapter);    this.$results = this.results.render();    this.results.position(this.$results, this.$dropdown);    // Bind events    var self = this;    // Bind the container to all of the adapters    this._bindAdapters();    // Register any DOM event handlers    this._registerDomEvents();    // Register any internal event handlers    this._registerDataEvents();    this._registerSelectionEvents();    this._registerDropdownEvents();    this._registerResultsEvents();    this._registerEvents();    // Set the initial state    this.dataAdapter.current(function (initialData) {      self.trigger('selection:update', {        data: initialData      });    });    // Hide the original select    $element.addClass('select2-hidden-accessible');    $element.attr('aria-hidden', 'true');    // Synchronize any monitored attributes    this._syncAttributes();    $element.data('select2', this);  };  Utils.Extend(Select2, Utils.Observable);  Select2.prototype._generateId = function ($element) {    var id = '';    if ($element.attr('id') != null) {      id = $element.attr('id');    } else if ($element.attr('name') != null) {      id = $element.attr('name') + '-' + Utils.generateChars(2);    } else {      id = Utils.generateChars(4);    }    id = id.replace(/(:|\.|\[|\]|,)/g, '');    id = 'select2-' + id;    return id;  };  Select2.prototype._placeContainer = function ($container) {    $container.insertAfter(this.$element);    var width = this._resolveWidth(this.$element, this.options.get('width'));    if (width != null) {      $container.css('width', width);    }  };  Select2.prototype._resolveWidth = function ($element, method) {    var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;    if (method == 'resolve') {      var styleWidth = this._resolveWidth($element, 'style');      if (styleWidth != null) {        return styleWidth;      }      return this._resolveWidth($element, 'element');    }    if (method == 'element') {      var elementWidth = $element.outerWidth(false);      if (elementWidth <= 0) {        return 'auto';      }      return elementWidth + 'px';    }    if (method == 'style') {      var style = $element.attr('style');      if (typeof(style) !== 'string') {        return null;      }      var attrs = style.split(';');      for (var i = 0, l = attrs.length; i < l; i = i + 1) {        var attr = attrs[i].replace(/\s/g, '');        var matches = attr.match(WIDTH);        if (matches !== null && matches.length >= 1) {          return matches[1];        }      }      return null;    }    return method;  };  Select2.prototype._bindAdapters = function () {    this.dataAdapter.bind(this, this.$container);    this.selection.bind(this, this.$container);    this.dropdown.bind(this, this.$container);    this.results.bind(this, this.$container);  };  Select2.prototype._registerDomEvents = function () {    var self = this;    this.$element.on('change.select2', function () {      self.dataAdapter.current(function (data) {        self.trigger('selection:update', {          data: data        });      });    });    this.$element.on('focus.select2', function (evt) {      self.trigger('focus', evt);    });    this._syncA = Utils.bind(this._syncAttributes, this);    this._syncS = Utils.bind(this._syncSubtree, this);    if (this.$element[0].attachEvent) {      this.$element[0].attachEvent('onpropertychange', this._syncA);    }    var observer = window.MutationObserver ||      window.WebKitMutationObserver ||      window.MozMutationObserver    ;    if (observer != null) {      this._observer = new observer(function (mutations) {        $.each(mutations, self._syncA);        $.each(mutations, self._syncS);      });      this._observer.observe(this.$element[0], {        attributes: true,        childList: true,        subtree: false      });    } else if (this.$element[0].addEventListener) {      this.$element[0].addEventListener(        'DOMAttrModified',        self._syncA,        false      );      this.$element[0].addEventListener(        'DOMNodeInserted',        self._syncS,        false      );      this.$element[0].addEventListener(        'DOMNodeRemoved',        self._syncS,        false      );    }  };  Select2.prototype._registerDataEvents = function () {    var self = this;    this.dataAdapter.on('*', function (name, params) {      self.trigger(name, params);    });  };  Select2.prototype._registerSelectionEvents = function () {    var self = this;    var nonRelayEvents = ['toggle', 'focus'];    this.selection.on('toggle', function () {      self.toggleDropdown();    });    this.selection.on('focus', function (params) {      self.focus(params);    });    this.selection.on('*', function (name, params) {      if ($.inArray(name, nonRelayEvents) !== -1) {        return;      }      self.trigger(name, params);    });  };  Select2.prototype._registerDropdownEvents = function () {    var self = this;    this.dropdown.on('*', function (name, params) {      self.trigger(name, params);    });  };  Select2.prototype._registerResultsEvents = function () {    var self = this;    this.results.on('*', function (name, params) {      self.trigger(name, params);    });  };  Select2.prototype._registerEvents = function () {    var self = this;    this.on('open', function () {      self.$container.addClass('select2-container--open');    });    this.on('close', function () {      self.$container.removeClass('select2-container--open');    });    this.on('enable', function () {      self.$container.removeClass('select2-container--disabled');    });    this.on('disable', function () {      self.$container.addClass('select2-container--disabled');    });    this.on('blur', function () {      self.$container.removeClass('select2-container--focus');    });    this.on('query', function (params) {      if (!self.isOpen()) {        self.trigger('open', {});      }      this.dataAdapter.query(params, function (data) {        self.trigger('results:all', {          data: data,          query: params        });      });    });    this.on('query:append', function (params) {      this.dataAdapter.query(params, function (data) {        self.trigger('results:append', {          data: data,          query: params        });      });    });    this.on('keypress', function (evt) {      var key = evt.which;      if (self.isOpen()) {        if (key === KEYS.ESC || key === KEYS.TAB ||            (key === KEYS.UP && evt.altKey)) {          self.close();          evt.preventDefault();        } else if (key === KEYS.ENTER) {          self.trigger('results:select', {});          evt.preventDefault();        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {          self.trigger('results:toggle', {});          evt.preventDefault();        } else if (key === KEYS.UP) {          self.trigger('results:previous', {});          evt.preventDefault();        } else if (key === KEYS.DOWN) {          self.trigger('results:next', {});          evt.preventDefault();        }      } else {        if (key === KEYS.ENTER || key === KEYS.SPACE ||            (key === KEYS.DOWN && evt.altKey)) {          self.open();          evt.preventDefault();        }      }    });  };  Select2.prototype._syncAttributes = function () {    this.options.set('disabled', this.$element.prop('disabled'));    if (this.options.get('disabled')) {      if (this.isOpen()) {        this.close();      }      this.trigger('disable', {});    } else {      this.trigger('enable', {});    }  };  Select2.prototype._syncSubtree = function (evt, mutations) {    var changed = false;    var self = this;    // Ignore any mutation events raised for elements that aren't options or    // optgroups. This handles the case when the select element is destroyed    if (      evt && evt.target && (        evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'      )    ) {      return;    }    if (!mutations) {      // If mutation events aren't supported, then we can only assume that the      // change affected the selections      changed = true;    } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {      for (var n = 0; n < mutations.addedNodes.length; n++) {        var node = mutations.addedNodes[n];        if (node.selected) {          changed = true;        }      }    } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {      changed = true;    }    // Only re-pull the data if we think there is a change    if (changed) {      this.dataAdapter.current(function (currentData) {        self.trigger('selection:update', {          data: currentData        });      });    }  };  /**   * Override the trigger method to automatically trigger pre-events when   * there are events that can be prevented.   */  Select2.prototype.trigger = function (name, args) {    var actualTrigger = Select2.__super__.trigger;    var preTriggerMap = {      'open': 'opening',      'close': 'closing',      'select': 'selecting',      'unselect': 'unselecting'    };    if (args === undefined) {      args = {};    }    if (name in preTriggerMap) {      var preTriggerName = preTriggerMap[name];      var preTriggerArgs = {        prevented: false,        name: name,        args: args      };      actualTrigger.call(this, preTriggerName, preTriggerArgs);      if (preTriggerArgs.prevented) {        args.prevented = true;        return;      }    }    actualTrigger.call(this, name, args);  };  Select2.prototype.toggleDropdown = function () {    if (this.options.get('disabled')) {      return;    }    if (this.isOpen()) {      this.close();    } else {      this.open();    }  };  Select2.prototype.open = function () {    if (this.isOpen()) {      return;    }    this.trigger('query', {});  };  Select2.prototype.close = function () {    if (!this.isOpen()) {      return;    }    this.trigger('close', {});  };  Select2.prototype.isOpen = function () {    return this.$container.hasClass('select2-container--open');  };  Select2.prototype.hasFocus = function () {    return this.$container.hasClass('select2-container--focus');  };  Select2.prototype.focus = function (data) {    // No need to re-trigger focus events if we are already focused    if (this.hasFocus()) {      return;    }    this.$container.addClass('select2-container--focus');    this.trigger('focus', {});  };  Select2.prototype.enable = function (args) {    if (this.options.get('debug') && window.console && console.warn) {      console.warn(        'Select2: The `select2("enable")` method has been deprecated and will' +        ' be removed in later Select2 versions. Use $element.prop("disabled")' +        ' instead.'      );    }    if (args == null || args.length === 0) {      args = [true];    }    var disabled = !args[0];    this.$element.prop('disabled', disabled);  };  Select2.prototype.data = function () {    if (this.options.get('debug') &&        arguments.length > 0 && window.console && console.warn) {      console.warn(        'Select2: Data can no longer be set using `select2("data")`. You ' +        'should consider setting the value instead using `$element.val()`.'      );    }    var data = [];    this.dataAdapter.current(function (currentData) {      data = currentData;    });    return data;  };  Select2.prototype.val = function (args) {    if (this.options.get('debug') && window.console && console.warn) {      console.warn(        'Select2: The `select2("val")` method has been deprecated and will be' +        ' removed in later Select2 versions. Use $element.val() instead.'      );    }    if (args == null || args.length === 0) {      return this.$element.val();    }    var newVal = args[0];    if ($.isArray(newVal)) {      newVal = $.map(newVal, function (obj) {        return obj.toString();      });    }    this.$element.val(newVal).trigger('change');  };  Select2.prototype.destroy = function () {    this.$container.remove();    if (this.$element[0].detachEvent) {      this.$element[0].detachEvent('onpropertychange', this._syncA);    }    if (this._observer != null) {      this._observer.disconnect();      this._observer = null;    } else if (this.$element[0].removeEventListener) {      this.$element[0]        .removeEventListener('DOMAttrModified', this._syncA, false);      this.$element[0]        .removeEventListener('DOMNodeInserted', this._syncS, false);      this.$element[0]        .removeEventListener('DOMNodeRemoved', this._syncS, false);    }    this._syncA = null;    this._syncS = null;    this.$element.off('.select2');    this.$element.attr('tabindex', this.$element.data('old-tabindex'));    this.$element.removeClass('select2-hidden-accessible');    this.$element.attr('aria-hidden', 'false');    this.$element.removeData('select2');    this.dataAdapter.destroy();    this.selection.destroy();    this.dropdown.destroy();    this.results.destroy();    this.dataAdapter = null;    this.selection = null;    this.dropdown = null;    this.results = null;  };  Select2.prototype.render = function () {    var $container = $(      '<span class="select2 select2-container">' +        '<span class="selection"></span>' +        '<span class="dropdown-wrapper" aria-hidden="true"></span>' +      '</span>'    );    $container.attr('dir', this.options.get('dir'));    this.$container = $container;    this.$container.addClass('select2-container--' + this.options.get('theme'));    $container.data('element', this.$element);    return $container;  };  return Select2;});S2.define('select2/compat/utils',[  'jquery'], function ($) {  function syncCssClasses ($dest, $src, adapter) {    var classes, replacements = [], adapted;    classes = $.trim($dest.attr('class'));    if (classes) {      classes = '' + classes; // for IE which returns object      $(classes.split(/\s+/)).each(function () {        // Save all Select2 classes        if (this.indexOf('select2-') === 0) {          replacements.push(this);        }      });    }    classes = $.trim($src.attr('class'));    if (classes) {      classes = '' + classes; // for IE which returns object      $(classes.split(/\s+/)).each(function () {        // Only adapt non-Select2 classes        if (this.indexOf('select2-') !== 0) {          adapted = adapter(this);          if (adapted != null) {            replacements.push(adapted);          }        }      });    }    $dest.attr('class', replacements.join(' '));  }  return {    syncCssClasses: syncCssClasses  };});S2.define('select2/compat/containerCss',[  'jquery',  './utils'], function ($, CompatUtils) {  // No-op CSS adapter that discards all classes by default  function _containerAdapter (clazz) {    return null;  }  function ContainerCSS () { }  ContainerCSS.prototype.render = function (decorated) {    var $container = decorated.call(this);    var containerCssClass = this.options.get('containerCssClass') || '';    if ($.isFunction(containerCssClass)) {      containerCssClass = containerCssClass(this.$element);    }    var containerCssAdapter = this.options.get('adaptContainerCssClass');    containerCssAdapter = containerCssAdapter || _containerAdapter;    if (containerCssClass.indexOf(':all:') !== -1) {      containerCssClass = containerCssClass.replace(':all:', '');      var _cssAdapter = containerCssAdapter;      containerCssAdapter = function (clazz) {        var adapted = _cssAdapter(clazz);        if (adapted != null) {          // Append the old one along with the adapted one          return adapted + ' ' + clazz;        }        return clazz;      };    }    var containerCss = this.options.get('containerCss') || {};    if ($.isFunction(containerCss)) {      containerCss = containerCss(this.$element);    }    CompatUtils.syncCssClasses($container, this.$element, containerCssAdapter);    $container.css(containerCss);    $container.addClass(containerCssClass);    return $container;  };  return ContainerCSS;});S2.define('select2/compat/dropdownCss',[  'jquery',  './utils'], function ($, CompatUtils) {  // No-op CSS adapter that discards all classes by default  function _dropdownAdapter (clazz) {    return null;  }  function DropdownCSS () { }  DropdownCSS.prototype.render = function (decorated) {    var $dropdown = decorated.call(this);    var dropdownCssClass = this.options.get('dropdownCssClass') || '';    if ($.isFunction(dropdownCssClass)) {      dropdownCssClass = dropdownCssClass(this.$element);    }    var dropdownCssAdapter = this.options.get('adaptDropdownCssClass');    dropdownCssAdapter = dropdownCssAdapter || _dropdownAdapter;    if (dropdownCssClass.indexOf(':all:') !== -1) {      dropdownCssClass = dropdownCssClass.replace(':all:', '');      var _cssAdapter = dropdownCssAdapter;      dropdownCssAdapter = function (clazz) {        var adapted = _cssAdapter(clazz);        if (adapted != null) {          // Append the old one along with the adapted one          return adapted + ' ' + clazz;        }        return clazz;      };    }    var dropdownCss = this.options.get('dropdownCss') || {};    if ($.isFunction(dropdownCss)) {      dropdownCss = dropdownCss(this.$element);    }    CompatUtils.syncCssClasses($dropdown, this.$element, dropdownCssAdapter);    $dropdown.css(dropdownCss);    $dropdown.addClass(dropdownCssClass);    return $dropdown;  };  return DropdownCSS;});S2.define('select2/compat/initSelection',[  'jquery'], function ($) {  function InitSelection (decorated, $element, options) {    if (options.get('debug') && window.console && console.warn) {      console.warn(        'Select2: The `initSelection` option has been deprecated in favor' +        ' of a custom data adapter that overrides the `current` method. ' +        'This method is now called multiple times instead of a single ' +        'time when the instance is initialized. Support will be removed ' +        'for the `initSelection` option in future versions of Select2'      );    }    this.initSelection = options.get('initSelection');    this._isInitialized = false;    decorated.call(this, $element, options);  }  InitSelection.prototype.current = function (decorated, callback) {    var self = this;    if (this._isInitialized) {      decorated.call(this, callback);      return;    }    this.initSelection.call(null, this.$element, function (data) {      self._isInitialized = true;      if (!$.isArray(data)) {        data = [data];      }      callback(data);    });  };  return InitSelection;});S2.define('select2/compat/inputData',[  'jquery'], function ($) {  function InputData (decorated, $element, options) {    this._currentData = [];    this._valueSeparator = options.get('valueSeparator') || ',';    if ($element.prop('type') === 'hidden') {      if (options.get('debug') && console && console.warn) {        console.warn(          'Select2: Using a hidden input with Select2 is no longer ' +          'supported and may stop working in the future. It is recommended ' +          'to use a `<select>` element instead.'        );      }    }    decorated.call(this, $element, options);  }  InputData.prototype.current = function (_, callback) {    function getSelected (data, selectedIds) {      var selected = [];      if (data.selected || $.inArray(data.id, selectedIds) !== -1) {        data.selected = true;        selected.push(data);      } else {        data.selected = false;      }      if (data.children) {        selected.push.apply(selected, getSelected(data.children, selectedIds));      }      return selected;    }    var selected = [];    for (var d = 0; d < this._currentData.length; d++) {      var data = this._currentData[d];      selected.push.apply(        selected,        getSelected(          data,          this.$element.val().split(            this._valueSeparator          )        )      );    }    callback(selected);  };  InputData.prototype.select = function (_, data) {    if (!this.options.get('multiple')) {      this.current(function (allData) {        $.map(allData, function (data) {          data.selected = false;        });      });      this.$element.val(data.id);      this.$element.trigger('change');    } else {      var value = this.$element.val();      value += this._valueSeparator + data.id;      this.$element.val(value);      this.$element.trigger('change');    }  };  InputData.prototype.unselect = function (_, data) {    var self = this;    data.selected = false;    this.current(function (allData) {      var values = [];      for (var d = 0; d < allData.length; d++) {        var item = allData[d];        if (data.id == item.id) {          continue;        }        values.push(item.id);      }      self.$element.val(values.join(self._valueSeparator));      self.$element.trigger('change');    });  };  InputData.prototype.query = function (_, params, callback) {    var results = [];    for (var d = 0; d < this._currentData.length; d++) {      var data = this._currentData[d];      var matches = this.matches(params, data);      if (matches !== null) {        results.push(matches);      }    }    callback({      results: results    });  };  InputData.prototype.addOptions = function (_, $options) {    var options = $.map($options, function ($option) {      return $.data($option[0], 'data');    });    this._currentData.push.apply(this._currentData, options);  };  return InputData;});S2.define('select2/compat/matcher',[  'jquery'], function ($) {  function oldMatcher (matcher) {    function wrappedMatcher (params, data) {      var match = $.extend(true, {}, data);      if (params.term == null || $.trim(params.term) === '') {        return match;      }      if (data.children) {        for (var c = data.children.length - 1; c >= 0; c--) {          var child = data.children[c];          // Check if the child object matches          // The old matcher returned a boolean true or false          var doesMatch = matcher(params.term, child.text, child);          // If the child didn't match, pop it off          if (!doesMatch) {            match.children.splice(c, 1);          }        }        if (match.children.length > 0) {          return match;        }      }      if (matcher(params.term, data.text, data)) {        return match;      }      return null;    }    return wrappedMatcher;  }  return oldMatcher;});S2.define('select2/compat/query',[], function () {  function Query (decorated, $element, options) {    if (options.get('debug') && window.console && console.warn) {      console.warn(        'Select2: The `query` option has been deprecated in favor of a ' +        'custom data adapter that overrides the `query` method. Support ' +        'will be removed for the `query` option in future versions of ' +        'Select2.'      );    }    decorated.call(this, $element, options);  }  Query.prototype.query = function (_, params, callback) {    params.callback = callback;    var query = this.options.get('query');    query.call(null, params);  };  return Query;});S2.define('select2/dropdown/attachContainer',[], function () {  function AttachContainer (decorated, $element, options) {    decorated.call(this, $element, options);  }  AttachContainer.prototype.position =    function (decorated, $dropdown, $container) {    var $dropdownContainer = $container.find('.dropdown-wrapper');    $dropdownContainer.append($dropdown);    $dropdown.addClass('select2-dropdown--below');    $container.addClass('select2-container--below');  };  return AttachContainer;});S2.define('select2/dropdown/stopPropagation',[], function () {  function StopPropagation () { }  StopPropagation.prototype.bind = function (decorated, container, $container) {    decorated.call(this, container, $container);    var stoppedEvents = [    'blur',    'change',    'click',    'dblclick',    'focus',    'focusin',    'focusout',    'input',    'keydown',    'keyup',    'keypress',    'mousedown',    'mouseenter',    'mouseleave',    'mousemove',    'mouseover',    'mouseup',    'search',    'touchend',    'touchstart'    ];    this.$dropdown.on(stoppedEvents.join(' '), function (evt) {      evt.stopPropagation();    });  };  return StopPropagation;});S2.define('select2/selection/stopPropagation',[], function () {  function StopPropagation () { }  StopPropagation.prototype.bind = function (decorated, container, $container) {    decorated.call(this, container, $container);    var stoppedEvents = [      'blur',      'change',      'click',      'dblclick',      'focus',      'focusin',      'focusout',      'input',      'keydown',      'keyup',      'keypress',      'mousedown',      'mouseenter',      'mouseleave',      'mousemove',      'mouseover',      'mouseup',      'search',      'touchend',      'touchstart'    ];    this.$selection.on(stoppedEvents.join(' '), function (evt) {      evt.stopPropagation();    });  };  return StopPropagation;});/*! * jQuery Mousewheel 3.1.13 * * Copyright jQuery Foundation and other contributors * Released under the MIT license * http://jquery.org/license */(function (factory) {    if ( typeof S2.define === 'function' && S2.define.amd ) {        // AMD. Register as an anonymous module.        S2.define('jquery-mousewheel',['jquery'], factory);    } else if (typeof exports === 'object') {        // Node/CommonJS style for Browserify        module.exports = factory;    } else {        // Browser globals        factory(jQuery);    }}(function ($) {    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],        slice  = Array.prototype.slice,        nullLowestDeltaTimeout, lowestDelta;    if ( $.event.fixHooks ) {        for ( var i = toFix.length; i; ) {            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;        }    }    var special = $.event.special.mousewheel = {        version: '3.1.12',        setup: function() {            if ( this.addEventListener ) {                for ( var i = toBind.length; i; ) {                    this.addEventListener( toBind[--i], handler, false );                }            } else {                this.onmousewheel = handler;            }            // Store the line height and page height for this particular element            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));        },        teardown: function() {            if ( this.removeEventListener ) {                for ( var i = toBind.length; i; ) {                    this.removeEventListener( toBind[--i], handler, false );                }            } else {                this.onmousewheel = null;            }            // Clean up the data we added to the element            $.removeData(this, 'mousewheel-line-height');            $.removeData(this, 'mousewheel-page-height');        },        getLineHeight: function(elem) {            var $elem = $(elem),                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();            if (!$parent.length) {                $parent = $('body');            }            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;        },        getPageHeight: function(elem) {            return $(elem).height();        },        settings: {            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below            normalizeOffset: true  // calls getBoundingClientRect for each event        }    };    $.fn.extend({        mousewheel: function(fn) {            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');        },        unmousewheel: function(fn) {            return this.unbind('mousewheel', fn);        }    });    function handler(event) {        var orgEvent   = event || window.event,            args       = slice.call(arguments, 1),            delta      = 0,            deltaX     = 0,            deltaY     = 0,            absDelta   = 0,            offsetX    = 0,            offsetY    = 0;        event = $.event.fix(orgEvent);        event.type = 'mousewheel';        // Old school scrollwheel delta        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {            deltaX = deltaY * -1;            deltaY = 0;        }        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy        delta = deltaY === 0 ? deltaX : deltaY;        // New school wheel delta (wheel event)        if ( 'deltaY' in orgEvent ) {            deltaY = orgEvent.deltaY * -1;            delta  = deltaY;        }        if ( 'deltaX' in orgEvent ) {            deltaX = orgEvent.deltaX;            if ( deltaY === 0 ) { delta  = deltaX * -1; }        }        // No change actually happened, no reason to go any further        if ( deltaY === 0 && deltaX === 0 ) { return; }        // Need to convert lines and pages to pixels if we aren't already in pixels        // There are three delta modes:        //   * deltaMode 0 is by pixels, nothing to do        //   * deltaMode 1 is by lines        //   * deltaMode 2 is by pages        if ( orgEvent.deltaMode === 1 ) {            var lineHeight = $.data(this, 'mousewheel-line-height');            delta  *= lineHeight;            deltaY *= lineHeight;            deltaX *= lineHeight;        } else if ( orgEvent.deltaMode === 2 ) {            var pageHeight = $.data(this, 'mousewheel-page-height');            delta  *= pageHeight;            deltaY *= pageHeight;            deltaX *= pageHeight;        }        // Store lowest absolute delta to normalize the delta values        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );        if ( !lowestDelta || absDelta < lowestDelta ) {            lowestDelta = absDelta;            // Adjust older deltas if necessary            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {                lowestDelta /= 40;            }        }        // Adjust older deltas if necessary        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {            // Divide all the things by 40!            delta  /= 40;            deltaX /= 40;            deltaY /= 40;        }        // Get a whole, normalized value for the deltas        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);        // Normalise offsetX and offsetY properties        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {            var boundingRect = this.getBoundingClientRect();            offsetX = event.clientX - boundingRect.left;            offsetY = event.clientY - boundingRect.top;        }        // Add information to the event object        event.deltaX = deltaX;        event.deltaY = deltaY;        event.deltaFactor = lowestDelta;        event.offsetX = offsetX;        event.offsetY = offsetY;        // Go ahead and set deltaMode to 0 since we converted to pixels        // Although this is a little odd since we overwrite the deltaX/Y        // properties with normalized deltas.        event.deltaMode = 0;        // Add event and delta to the front of the arguments        args.unshift(event, delta, deltaX, deltaY);        // Clearout lowestDelta after sometime to better        // handle multiple device types that give different        // a different lowestDelta        // Ex: trackpad = 3 and mouse wheel = 120        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);        return ($.event.dispatch || $.event.handle).apply(this, args);    }    function nullLowestDelta() {        lowestDelta = null;    }    function shouldAdjustOldDeltas(orgEvent, absDelta) {        // If this is an older event and the delta is divisable by 120,        // then we are assuming that the browser is treating this as an        // older mouse wheel event and that we should divide the deltas        // by 40 to try and get a more usable deltaFactor.        // Side note, this actually impacts the reported scroll distance        // in older browsers and can cause scrolling to be slower than native.        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;    }}));S2.define('jquery.select2',[  'jquery',  'jquery-mousewheel',  './select2/core',  './select2/defaults'], function ($, _, Select2, Defaults) {  if ($.fn.select2 == null) {    // All methods that should return the element    var thisMethods = ['open', 'close', 'destroy'];    $.fn.select2 = function (options) {      options = options || {};      if (typeof options === 'object') {        this.each(function () {          var instanceOptions = $.extend(true, {}, options);          var instance = new Select2($(this), instanceOptions);        });        return this;      } else if (typeof options === 'string') {        var ret;        var args = Array.prototype.slice.call(arguments, 1);        this.each(function () {          var instance = $(this).data('select2');          if (instance == null && window.console && console.error) {            console.error(              'The select2(\'' + options + '\') method was called on an ' +              'element that is not using Select2.'            );          }          ret = instance[options].apply(instance, args);        });        // Check if we should be returning `this`        if ($.inArray(options, thisMethods) > -1) {          return this;        }        return ret;      } else {        throw new Error('Invalid arguments for Select2: ' + options);      }    };  }  if ($.fn.select2.defaults == null) {    $.fn.select2.defaults = Defaults;  }  return Select2;});  // Return the AMD loader configuration so it can be used outside of this file  return {    define: S2.define,    require: S2.require  };}());  // Autoload the jQuery bindings  // We know that all of the modules exist above this, so we're safe  var select2 = S2.require('jquery.select2');  // Hold the AMD module references on the jQuery function that was just loaded  // This allows Select2 to use the internal loader outside of this file, such  // as in the language files.  jQuery.fn.select2.amd = S2;  // Return the Select2 instance for anyone who is importing it.  return select2;}));/*** jquery-match-height 0.7.2 by @liabru* http://brm.io/jquery-match-height/* License: MIT*/;(function(factory) { // eslint-disable-line no-extra-semi    'use strict';    if (typeof define === 'function' && define.amd) {        // AMD        define(['jquery'], factory);    } else if (typeof module !== 'undefined' && module.exports) {        // CommonJS        module.exports = factory(require('jquery'));    } else {        // Global        factory(jQuery);    }})(function($) {    /*    *  internal    */    var _previousResizeWidth = -1,        _updateTimeout = -1;    /*    *  _parse    *  value parse utility function    */    var _parse = function(value) {        // parse value and convert NaN to 0        return parseFloat(value) || 0;    };    /*    *  _rows    *  utility function returns array of jQuery selections representing each row    *  (as displayed after float wrapping applied by browser)    */    var _rows = function(elements) {        var tolerance = 1,            $elements = $(elements),            lastTop = null,            rows = [];        // group elements by their top position        $elements.each(function(){            var $that = $(this),                top = $that.offset().top - _parse($that.css('margin-top')),                lastRow = rows.length > 0 ? rows[rows.length - 1] : null;            if (lastRow === null) {                // first item on the row, so just push it                rows.push($that);            } else {                // if the row top is the same, add to the row group                if (Math.floor(Math.abs(lastTop - top)) <= tolerance) {                    rows[rows.length - 1] = lastRow.add($that);                } else {                    // otherwise start a new row group                    rows.push($that);                }            }            // keep track of the last row top            lastTop = top;        });        return rows;    };    /*    *  _parseOptions    *  handle plugin options    */    var _parseOptions = function(options) {        var opts = {            byRow: true,            property: 'height',            target: null,            remove: false        };        if (typeof options === 'object') {            return $.extend(opts, options);        }        if (typeof options === 'boolean') {            opts.byRow = options;        } else if (options === 'remove') {            opts.remove = true;        }        return opts;    };    /*    *  matchHeight    *  plugin definition    */    var matchHeight = $.fn.matchHeight = function(options) {        var opts = _parseOptions(options);        // handle remove        if (opts.remove) {            var that = this;            // remove fixed height from all selected elements            this.css(opts.property, '');            // remove selected elements from all groups            $.each(matchHeight._groups, function(key, group) {                group.elements = group.elements.not(that);            });            // TODO: cleanup empty groups            return this;        }        if (this.length <= 1 && !opts.target) {            return this;        }        // keep track of this group so we can re-apply later on load and resize events        matchHeight._groups.push({            elements: this,            options: opts        });        // match each element's height to the tallest element in the selection        matchHeight._apply(this, opts);        return this;    };    /*    *  plugin global options    */    matchHeight.version = '0.7.2';    matchHeight._groups = [];    matchHeight._throttle = 80;    matchHeight._maintainScroll = false;    matchHeight._beforeUpdate = null;    matchHeight._afterUpdate = null;    matchHeight._rows = _rows;    matchHeight._parse = _parse;    matchHeight._parseOptions = _parseOptions;    /*    *  matchHeight._apply    *  apply matchHeight to given elements    */    matchHeight._apply = function(elements, options) {        var opts = _parseOptions(options),            $elements = $(elements),            rows = [$elements];        // take note of scroll position        var scrollTop = $(window).scrollTop(),            htmlHeight = $('html').outerHeight(true);        // get hidden parents        var $hiddenParents = $elements.parents().filter(':hidden');        // cache the original inline style        $hiddenParents.each(function() {            var $that = $(this);            $that.data('style-cache', $that.attr('style'));        });        // temporarily must force hidden parents visible        $hiddenParents.css('display', 'block');        // get rows if using byRow, otherwise assume one row        if (opts.byRow && !opts.target) {            // must first force an arbitrary equal height so floating elements break evenly            $elements.each(function() {                var $that = $(this),                    display = $that.css('display');                // temporarily force a usable display value                if (display !== 'inline-block' && display !== 'flex' && display !== 'inline-flex') {                    display = 'block';                }                // cache the original inline style                $that.data('style-cache', $that.attr('style'));                $that.css({                    'display': display,                    'padding-top': '0',                    'padding-bottom': '0',                    'margin-top': '0',                    'margin-bottom': '0',                    'border-top-width': '0',                    'border-bottom-width': '0',                    'height': '100px',                    'overflow': 'hidden'                });            });            // get the array of rows (based on element top position)            rows = _rows($elements);            // revert original inline styles            $elements.each(function() {                var $that = $(this);                $that.attr('style', $that.data('style-cache') || '');            });        }        $.each(rows, function(key, row) {            var $row = $(row),                targetHeight = 0;            if (!opts.target) {                // skip apply to rows with only one item                if (opts.byRow && $row.length <= 1) {                    $row.css(opts.property, '');                    return;                }                // iterate the row and find the max height                $row.each(function(){                    var $that = $(this),                        style = $that.attr('style'),                        display = $that.css('display');                    // temporarily force a usable display value                    if (display !== 'inline-block' && display !== 'flex' && display !== 'inline-flex') {                        display = 'block';                    }                    // ensure we get the correct actual height (and not a previously set height value)                    var css = { 'display': display };                    css[opts.property] = '';                    $that.css(css);                    // find the max height (including padding, but not margin)                    if ($that.outerHeight(false) > targetHeight) {                        targetHeight = $that.outerHeight(false);                    }                    // revert styles                    if (style) {                        $that.attr('style', style);                    } else {                        $that.css('display', '');                    }                });            } else {                // if target set, use the height of the target element                targetHeight = opts.target.outerHeight(false);            }            // iterate the row and apply the height to all elements            $row.each(function(){                var $that = $(this),                    verticalPadding = 0;                // don't apply to a target                if (opts.target && $that.is(opts.target)) {                    return;                }                // handle padding and border correctly (required when not using border-box)                if ($that.css('box-sizing') !== 'border-box') {                    verticalPadding += _parse($that.css('border-top-width')) + _parse($that.css('border-bottom-width'));                    verticalPadding += _parse($that.css('padding-top')) + _parse($that.css('padding-bottom'));                }                // set the height (accounting for padding and border)                $that.css(opts.property, (targetHeight - verticalPadding) + 'px');            });        });        // revert hidden parents        $hiddenParents.each(function() {            var $that = $(this);            $that.attr('style', $that.data('style-cache') || null);        });        // restore scroll position if enabled        if (matchHeight._maintainScroll) {            $(window).scrollTop((scrollTop / htmlHeight) * $('html').outerHeight(true));        }        return this;    };    /*    *  matchHeight._applyDataApi    *  applies matchHeight to all elements with a data-match-height attribute    */    matchHeight._applyDataApi = function() {        var groups = {};        // generate groups by their groupId set by elements using data-match-height        $('[data-match-height], [data-mh]').each(function() {            var $this = $(this),                groupId = $this.attr('data-mh') || $this.attr('data-match-height');            if (groupId in groups) {                groups[groupId] = groups[groupId].add($this);            } else {                groups[groupId] = $this;            }        });        // apply matchHeight to each group        $.each(groups, function() {            this.matchHeight(true);        });    };    /*    *  matchHeight._update    *  updates matchHeight on all current groups with their correct options    */    var _update = function(event) {        if (matchHeight._beforeUpdate) {            matchHeight._beforeUpdate(event, matchHeight._groups);        }        $.each(matchHeight._groups, function() {            matchHeight._apply(this.elements, this.options);        });        if (matchHeight._afterUpdate) {            matchHeight._afterUpdate(event, matchHeight._groups);        }    };    matchHeight._update = function(throttle, event) {        // prevent update if fired from a resize event        // where the viewport width hasn't actually changed        // fixes an event looping bug in IE8        if (event && event.type === 'resize') {            var windowWidth = $(window).width();            if (windowWidth === _previousResizeWidth) {                return;            }            _previousResizeWidth = windowWidth;        }        // throttle updates        if (!throttle) {            _update(event);        } else if (_updateTimeout === -1) {            _updateTimeout = setTimeout(function() {                _update(event);                _updateTimeout = -1;            }, matchHeight._throttle);        }    };    /*    *  bind events    */    // apply on DOM ready event    $(matchHeight._applyDataApi);    // use on or bind where supported    var on = $.fn.on ? 'on' : 'bind';    // update heights on load and resize events    $(window)[on]('load', function(event) {        matchHeight._update(false, event);    });    // throttled update heights on resize events    $(window)[on]('resize orientationchange', function(event) {        matchHeight._update(true, event);    });});// ==================================================// fancyBox v3.1.20//// Licensed GPLv3 for open source use// or fancyBox Commercial License for commercial use//// http://fancyapps.com/fancybox/// Copyright 2017 fancyApps//// ==================================================;(function (window, document, $, undefined) {    'use strict';    // If there's no jQuery, fancyBox can't work    // =========================================    if ( !$ ) {        return;    }    // Check if fancyBox is already initialized    // ========================================    if ( $.fn.fancybox ) {        $.error('fancyBox already initialized');        return;    }    // Private default settings    // ========================    var defaults = {        // Enable infinite gallery navigation        loop : false,        // Space around image, ignored if zoomed-in or viewport smaller than 800px        margin : [44, 0],        // Horizontal space between slides        gutter : 50,        // Enable keyboard navigation        keyboard : true,        // Should display navigation arrows at the screen edges        arrows : true,        // Should display infobar (counter and arrows at the top)        infobar : false,        // Should display toolbar (buttons at the top)        toolbar : true,        // What buttons should appear in the top right corner.        // Buttons will be created using templates from `btnTpl` option        // and they will be placed into toolbar (class="fancybox-toolbar"` element)        buttons : [            'slideShow',            'fullScreen',            'thumbs',            'close'        ],        // Detect "idle" time in seconds        idleTime : 4,        // Should display buttons at top right corner of the content        // If 'auto' - they will be created for content having type 'html', 'inline' or 'ajax'        // Use template from `btnTpl.smallBtn` for customization        smallBtn : 'auto',        // Disable right-click and use simple image protection for images        protect : false,        // Shortcut to make content "modal" - disable keyboard navigtion, hide buttons, etc        modal : false,        image : {            // Wait for images to load before displaying            // Requires predefined image dimensions            // If 'auto' - will zoom in thumbnail if 'width' and 'height' attributes are found            preload : "auto",        },        ajax : {            // Object containing settings for ajax request            settings : {                // This helps to indicate that request comes from the modal                // Feel free to change naming                data : {                    fancybox : true                }            }        },        iframe : {            // Iframe template            tpl : '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',            // Preload iframe before displaying it            // This allows to calculate iframe content width and height            // (note: Due to "Same Origin Policy", you can't get cross domain data).            preload : true,            // Custom CSS styling for iframe wrapping element            // You can use this to set custom iframe dimensions            css : {},            // Iframe tag attributes            attr : {                scrolling : 'auto'            }        },        // Open/close animation type        // Possible values:        //   false            - disable        //   "zoom"           - zoom images from/to thumbnail        //   "fade"        //   "zoom-in-out"        //        animationEffect : "zoom",        // Duration in ms for open/close animation        animationDuration : 366,        // Should image change opacity while zooming        // If opacity is 'auto', then opacity will be changed if image and thumbnail have different aspect ratios        zoomOpacity : 'auto',        // Transition effect between slides        //        // Possible values:        //   false            - disable        //   "fade'        //   "slide'        //   "circular'        //   "tube'        //   "zoom-in-out'        //   "rotate'        //        transitionEffect : "fade",        // Duration in ms for transition animation        transitionDuration : 366,        // Custom CSS class for slide element        slideClass : '',        // Custom CSS class for layout        baseClass : '',        // Base template for layout        baseTpl	:            '<div class="fancybox-container" role="dialog" tabindex="-1">' +                '<div class="fancybox-bg"></div>' +                '<div class="fancybox-inner">' +                    '<div class="fancybox-infobar">' +                        '<button data-fancybox-prev title="{{PREV}}" class="fancybox-button fancybox-button--left"></button>' +                        '<div class="fancybox-infobar__body">' +                            '<span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span>' +                        '</div>' +                        '<button data-fancybox-next title="{{NEXT}}" class="fancybox-button fancybox-button--right"></button>' +                    '</div>' +                    '<div class="fancybox-toolbar">' +                        '{{BUTTONS}}' +                    '</div>' +                    '<div class="fancybox-navigation">' +                        '<button data-fancybox-prev title="{{PREV}}" class="fancybox-arrow fancybox-arrow--left" />' +                        '<button data-fancybox-next title="{{NEXT}}" class="fancybox-arrow fancybox-arrow--right" />' +                    '</div>' +                    '<div class="fancybox-stage"></div>' +                    '<div class="fancybox-caption-wrap">' +                        '<div class="fancybox-caption"></div>' +                    '</div>' +                '</div>' +            '</div>',        // Loading indicator template        spinnerTpl : '<div class="fancybox-loading"></div>',        // Error message template        errorTpl : '<div class="fancybox-error"><p>{{ERROR}}<p></div>',        btnTpl : {            slideShow  : '<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"></button>',            fullScreen : '<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="{{FULL_SCREEN}}"></button>',            thumbs     : '<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"></button>',            close      : '<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"></button>',            // This small close button will be appended to your html/inline/ajax content by default,            // if "smallBtn" option is not set to false            smallBtn   : '<button data-fancybox-close class="fancybox-close-small" title="{{CLOSE}}"></button>'        },        // Container is injected into this element        parentEl : 'body',        // Focus handling        // ==============        // Try to focus on the first focusable element after opening        autoFocus : true,        // Put focus back to active element after closing        backFocus : true,        // Do not let user to focus on element outside modal content        trapFocus : true,        // Module specific options        // =======================        fullScreen : {            autoStart : false,        },        touch : {            vertical : true,  // Allow to drag content vertically            momentum : true   // Continue movement after releasing mouse/touch when panning        },        // Hash value when initializing manually,        // set `false` to disable hash change        hash : null,        // Customize or add new media types        // Example:        /*        media : {            youtube : {                params : {                    autoplay : 0                }            }        }        */        media : {},        slideShow : {            autoStart : false,            speed     : 4000        },        thumbs : {            autoStart   : false,   // Display thumbnails on opening            hideOnClose : true     // Hide thumbnail grid when closing animation starts        },        // Callbacks        //==========        // See Documentation/API/Events for more information        // Example:        /*            afterShow: function( instance, current ) {                 console.info( 'Clicked element:' );                 console.info( current.opts.$orig );            }        */        onInit       : $.noop,  // When instance has been initialized        beforeLoad   : $.noop,  // Before the content of a slide is being loaded        afterLoad    : $.noop,  // When the content of a slide is done loading        beforeShow   : $.noop,  // Before open animation starts        afterShow    : $.noop,  // When content is done loading and animating        beforeClose  : $.noop,  // Before the instance attempts to close. Return false to cancel the close.        afterClose   : $.noop,  // After instance has been closed        onActivate   : $.noop,  // When instance is brought to front        onDeactivate : $.noop,  // When other instance has been activated        // Interaction        // ===========        // Use options below to customize taken action when user clicks or double clicks on the fancyBox area,        // each option can be string or method that returns value.        //        // Possible values:        //   "close"           - close instance        //   "next"            - move to next gallery item        //   "nextOrClose"     - move to next gallery item or close if gallery has only one item        //   "toggleControls"  - show/hide controls        //   "zoom"            - zoom image (if loaded)        //   false             - do nothing        // Clicked on the content        clickContent : function( current, event ) {            return current.type === 'image' ? 'zoom' : false;        },        // Clicked on the slide        clickSlide : 'close',        // Clicked on the background (backdrop) element        clickOutside : 'close',        // Same as previous two, but for double click        dblclickContent : false,        dblclickSlide   : false,        dblclickOutside : false,        // Custom options when mobile device is detected        // =============================================        mobile : {            clickContent : function( current, event ) {                return current.type === 'image' ? 'toggleControls' : false;            },            clickSlide : function( current, event ) {                return current.type === 'image' ? 'toggleControls' : "close";            },            dblclickContent : function( current, event ) {                return current.type === 'image' ? 'zoom' : false;            },            dblclickSlide : function( current, event ) {                return current.type === 'image' ? 'zoom' : false;            }        },        // Internationalization        // ============        lang : 'en',        i18n : {            'en' : {                CLOSE       : 'Close',                NEXT        : 'Next',                PREV        : 'Previous',                ERROR       : 'The requested content cannot be loaded. <br/> Please try again later.',                PLAY_START  : 'Start slideshow',                PLAY_STOP   : 'Pause slideshow',                FULL_SCREEN : 'Full screen',                THUMBS      : 'Thumbnails'            },            'de' : {                CLOSE       : 'Schliessen',                NEXT        : 'Weiter',                PREV        : 'Zurück',                ERROR       : 'Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.',                PLAY_START  : 'Diaschau starten',                PLAY_STOP   : 'Diaschau beenden',                FULL_SCREEN : 'Vollbild',                THUMBS      : 'Vorschaubilder'            }        }    };    // Few useful variables and methods    // ================================    var $W = $(window);    var $D = $(document);    var called = 0;    // Check if an object is a jQuery object and not a native JavaScript object    // ========================================================================    var isQuery = function ( obj ) {        return obj && obj.hasOwnProperty && obj instanceof $;    };    // Handle multiple browsers for "requestAnimationFrame" and "cancelAnimationFrame"    // ===============================================================================    var requestAFrame = (function () {        return window.requestAnimationFrame ||                window.webkitRequestAnimationFrame ||                window.mozRequestAnimationFrame ||                window.oRequestAnimationFrame ||                // if all else fails, use setTimeout                function (callback) {                    return window.setTimeout(callback, 1000 / 60);                };    })();    // Detect the supported transition-end event property name    // =======================================================    var transitionEnd = (function () {        var t, el = document.createElement("fakeelement");        var transitions = {            "transition"      : "transitionend",            "OTransition"     : "oTransitionEnd",            "MozTransition"   : "transitionend",            "WebkitTransition": "webkitTransitionEnd"        };        for (t in transitions) {            if (el.style[t] !== undefined){                return transitions[t];            }        }    })();    // Force redraw on an element.    // This helps in cases where the browser doesn't redraw an updated element properly.    // =================================================================================    var forceRedraw = function( $el ) {        return ( $el && $el.length && $el[0].offsetHeight );    };    // Class definition    // ================    var FancyBox = function( content, opts, index ) {        var self = this;        self.opts  = $.extend( true, { index : index }, defaults, opts || {} );        // Exclude buttons option from deep merging        if ( opts && $.isArray( opts.buttons ) ) {            self.opts.buttons = opts.buttons;        }        self.id    = self.opts.id || ++called;        self.group = [];        self.currIndex = parseInt( self.opts.index, 10 ) || 0;        self.prevIndex = null;        self.prevPos = null;        self.currPos = 0;        self.firstRun = null;        // Create group elements from original item collection        self.createGroup( content );        if ( !self.group.length ) {            return;        }        // Save last active element and current scroll position        self.$lastFocus = $(document.activeElement).blur();        // Collection of gallery objects        self.slides = {};        self.init( content );    };    $.extend(FancyBox.prototype, {        // Create DOM structure        // ====================        init : function() {            var self = this;            var testWidth, $container, buttonStr;            var firstItemOpts = self.group[ self.currIndex ].opts;            self.scrollTop  = $D.scrollTop();            self.scrollLeft = $D.scrollLeft();            // Hide scrollbars            // ===============            if ( !$.fancybox.getInstance() && !$.fancybox.isMobile && $( 'body' ).css('overflow') !== 'hidden' ) {                testWidth = $( 'body' ).width();                $( 'html' ).addClass( 'fancybox-enabled' );                // Compare body width after applying "overflow: hidden"                testWidth = $( 'body' ).width() - testWidth;                // If width has changed - compensate missing scrollbars by adding right margin                if ( testWidth > 1 ) {                    $( 'head' ).append( '<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar, .fancybox-enabled body { margin-right: ' + testWidth + 'px; }</style>' );                }            }            // Build html markup and set references            // ====================================            // Build html code for buttons and insert into main template            buttonStr = '';            $.each( firstItemOpts.buttons, function( index, value ) {                buttonStr += ( firstItemOpts.btnTpl[ value ] || '' );            });            // Create markup from base template, it will be initially hidden to            // avoid unnecessary work like painting while initializing is not complete            $container = $( self.translate( self, firstItemOpts.baseTpl.replace( '\{\{BUTTONS\}\}', buttonStr ) ) )                .addClass( 'fancybox-is-hidden' )                .attr('id', 'fancybox-container-' + self.id)                .addClass( firstItemOpts.baseClass )                .data( 'FancyBox', self )                .prependTo( firstItemOpts.parentEl );            // Create object holding references to jQuery wrapped nodes            self.$refs = {                container : $container            };            [ 'bg', 'inner', 'infobar', 'toolbar', 'stage', 'caption' ].forEach(function(item) {                self.$refs[ item ] = $container.find( '.fancybox-' + item );            });            // Check for redundant elements            if ( !firstItemOpts.arrows || self.group.length < 2 ) {                $container.find('.fancybox-navigation').remove();            }            if ( !firstItemOpts.infobar ) {                self.$refs.infobar.remove();            }            if ( !firstItemOpts.toolbar ) {                self.$refs.toolbar.remove();            }            self.trigger( 'onInit' );            // Bring to front and enable events            self.activate();            // Build slides, load and reveal content            self.jumpTo( self.currIndex );        },        // Simple i18n support - replaces object keys found in template        // with corresponding values        // ============================================================        translate : function( obj, str ) {            var arr = obj.opts.i18n[ obj.opts.lang ];            return str.replace(/\{\{(\w+)\}\}/g, function(match, n) {                var value = arr[n];                if ( value === undefined ) {                    return match;                }                return value;            });        },        // Create array of gally item objects        // Check if each object has valid type and content        // ===============================================        createGroup : function ( content ) {            var self  = this;            var items = $.makeArray( content );            $.each(items, function( i, item ) {                var obj  = {},                    opts = {},                    data = [],                    $item,                    type,                    src,                    srcParts;                // Step 1 - Make sure we have an object                // ====================================                if ( $.isPlainObject( item ) ) {                    // We probably have manual usage here, something like                    // $.fancybox.open( [ { src : "image.jpg", type : "image" } ] )                    obj  = item;                    opts = item.opts || item;                } else if ( $.type( item ) === 'object' && $( item ).length ) {                    // Here we propbably have jQuery collection returned by some selector                    $item = $( item );                    data  = $item.data();                    opts = 'options' in data ? data.options : {};                    opts = $.type( opts ) === 'object' ? opts : {};                    obj.src  = 'src' in data ? data.src : ( opts.src || $item.attr( 'href' ) );                    [ 'width', 'height', 'thumb', 'type', 'filter' ].forEach(function(item) {                        if ( item in data ) {                            opts[ item ] = data[ item ];                        }                    });                    if ( 'srcset' in data ) {                        opts.image = { srcset : data.srcset };                    }                    opts.$orig = $item;                    if ( !obj.type && !obj.src ) {                        obj.type = 'inline';                        obj.src  = item;                    }                } else {                    // Assume we have a simple html code, for example:                    // $.fancybox.open( '<div><h1>Hi!</h1></div>' );                    obj = {                        type : 'html',                        src  : item + ''                    };                }                // Each gallery object has full collection of options                obj.opts = $.extend( true, {}, self.opts, opts );                if ( $.fancybox.isMobile ) {                    obj.opts = $.extend( true, {}, obj.opts, obj.opts.mobile );                }                // Step 2 - Make sure we have content type, if not - try to guess                // ==============================================================                type = obj.type || obj.opts.type;                src  = obj.src || '';                if ( !type && src ) {                    if ( src.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i) ) {                        type = 'image';                    } else if ( src.match(/\.(pdf)((\?|#).*)?$/i) ) {                        type = 'pdf';                    } else if ( src.charAt(0) === '#' ) {                        type = 'inline';                    }                }                obj.type = type;                // Step 3 - Some adjustments                // =========================                obj.index = self.group.length;                // Check if $orig and $thumb objects exist                if ( obj.opts.$orig && !obj.opts.$orig.length ) {                    delete obj.opts.$orig;                }                if ( !obj.opts.$thumb && obj.opts.$orig ) {                    obj.opts.$thumb = obj.opts.$orig.find( 'img:first' );                }                if ( obj.opts.$thumb && !obj.opts.$thumb.length ) {                    delete obj.opts.$thumb;                }                // Caption is a "special" option, it can be passed as a method                if ( $.type( obj.opts.caption ) === 'function' ) {                    obj.opts.caption = obj.opts.caption.apply( item, [ self, obj ] );                } else if ( 'caption' in data ) {                    obj.opts.caption = data.caption;                }                // Make sure we have caption as a string                obj.opts.caption = obj.opts.caption === undefined ? '' : obj.opts.caption + '';                // Check if url contains "filter" used to filter the content                // Example: "ajax.html #something"                if ( type === 'ajax' ) {                    srcParts = src.split(/\s+/, 2);                    if ( srcParts.length > 1 ) {                        obj.src = srcParts.shift();                        obj.opts.filter = srcParts.shift();                    }                }                if ( obj.opts.smallBtn == 'auto' ) {                    if ( $.inArray( type, ['html', 'inline', 'ajax'] ) > -1 ) {                        obj.opts.toolbar  = false;                        obj.opts.smallBtn = true;                    } else {                        obj.opts.smallBtn = false;                    }                }                // If the type is "pdf", then simply load file into iframe                if ( type === 'pdf' ) {                    obj.type = 'iframe';                    obj.opts.iframe.preload = false;                }                // Hide all buttons and disable interactivity for modal items                if ( obj.opts.modal ) {                    obj.opts = $.extend(true, obj.opts, {                        // Remove buttons                        infobar : 0,                        toolbar : 0,                        smallBtn : 0,                        // Disable keyboard navigation                        keyboard : 0,                        // Disable some modules                        slideShow  : 0,                        fullScreen : 0,                        thumbs     : 0,                        touch      : 0,                        // Disable click event handlers                        clickContent    : false,                        clickSlide      : false,                        clickOutside    : false,                        dblclickContent : false,                        dblclickSlide   : false,                        dblclickOutside : false                    });                }                // Step 4 - Add processed object to group                // ======================================                self.group.push( obj );            });        },        // Attach an event handler functions for:        //   - navigation buttons        //   - browser scrolling, resizing;        //   - focusing        //   - keyboard        //   - detect idle        // ======================================        addEvents : function() {            var self = this;            self.removeEvents();            // Make navigation elements clickable            self.$refs.container.on('click.fb-close', '[data-fancybox-close]', function(e) {                e.stopPropagation();                e.preventDefault();                self.close( e );            }).on( 'click.fb-prev touchend.fb-prev', '[data-fancybox-prev]', function(e) {                e.stopPropagation();                e.preventDefault();                self.previous();            }).on( 'click.fb-next touchend.fb-next', '[data-fancybox-next]', function(e) {                e.stopPropagation();                e.preventDefault();                self.next();            });            // Handle page scrolling and browser resizing            $W.on('orientationchange.fb resize.fb', function(e) {                if ( e && e.originalEvent && e.originalEvent.type === "resize" ) {                    requestAFrame(function() {                        self.update();                    });                } else {                    self.$refs.stage.hide();                    setTimeout(function() {                        self.$refs.stage.show();                        self.update();                    }, 500);                }            });            // Trap keyboard focus inside of the modal, so the user does not accidentally tab outside of the modal            // (a.k.a. "escaping the modal")            $D.on('focusin.fb', function(e) {                var instance = $.fancybox ? $.fancybox.getInstance() : null;                if ( instance.isClosing || !instance.current || !instance.current.opts.trapFocus || $( e.target ).hasClass( 'fancybox-container' ) || $( e.target ).is( document ) ) {                    return;                }                if ( instance && $( e.target ).css( 'position' ) !== 'fixed' && !instance.$refs.container.has( e.target ).length ) {                    e.stopPropagation();                    instance.focus();                    // Sometimes page gets scrolled, set it back                    $W.scrollTop( self.scrollTop ).scrollLeft( self.scrollLeft );                }            });            // Enable keyboard navigation            $D.on('keydown.fb', function (e) {                var current = self.current,                    keycode = e.keyCode || e.which;                if ( !current || !current.opts.keyboard ) {                    return;                }                if ( $(e.target).is('input') || $(e.target).is('textarea') ) {                    return;                }                // Backspace and Esc keys                if ( keycode === 8 || keycode === 27 ) {                    e.preventDefault();                    self.close( e );                    return;                }                // Left arrow and Up arrow                if ( keycode === 37 || keycode === 38 ) {                    e.preventDefault();                    self.previous();                    return;                }                // Righ arrow and Down arrow                if ( keycode === 39 || keycode === 40 ) {                    e.preventDefault();                    self.next();                    return;                }                self.trigger('afterKeydown', e, keycode);            });            // Hide controls after some inactivity period            if ( self.group[ self.currIndex ].opts.idleTime ) {                self.idleSecondsCounter = 0;                $D.on('mousemove.fb-idle mouseenter.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle', function() {                    self.idleSecondsCounter = 0;                    if ( self.isIdle ) {                        self.showControls();                    }                    self.isIdle = false;                });                self.idleInterval = window.setInterval(function() {                    self.idleSecondsCounter++;                    if ( self.idleSecondsCounter >= self.group[ self.currIndex ].opts.idleTime ) {                        self.isIdle = true;                        self.idleSecondsCounter = 0;                        self.hideControls();                    }                }, 1000);            }        },        // Remove events added by the core        // ===============================        removeEvents : function () {            var self = this;            $W.off( 'orientationchange.fb resize.fb' );            $D.off( 'focusin.fb keydown.fb .fb-idle' );            this.$refs.container.off( '.fb-close .fb-prev .fb-next' );            if ( self.idleInterval ) {                window.clearInterval( self.idleInterval );                self.idleInterval = null;            }        },        // Change to previous gallery item        // ===============================        previous : function( duration ) {            return this.jumpTo( this.currPos - 1, duration );        },        // Change to next gallery item        // ===========================        next : function( duration ) {            return this.jumpTo( this.currPos + 1, duration );        },        // Switch to selected gallery item        // ===============================        jumpTo : function ( pos, duration, slide ) {            var self = this,                firstRun,                loop,                current,                previous,                canvasWidth,                currentPos,                transitionProps;            var groupLen = self.group.length;            if ( self.isSliding || self.isClosing || ( self.isAnimating && self.firstRun ) ) {                return;            }            pos  = parseInt( pos, 10 );            loop = self.current ? self.current.opts.loop : self.opts.loop;            if ( !loop && ( pos < 0 || pos >= groupLen ) ) {                return false;            }            firstRun = self.firstRun = ( self.firstRun === null );            if ( groupLen < 2 && !firstRun && !!self.isSliding ) {                return;            }            previous = self.current;            self.prevIndex = self.currIndex;            self.prevPos   = self.currPos;            // Create slides            current = self.createSlide( pos );            if ( groupLen > 1 ) {                if ( loop || current.index > 0 ) {                    self.createSlide( pos - 1 );                }                if ( loop || current.index < groupLen - 1 ) {                    self.createSlide( pos + 1 );                }            }            self.current   = current;            self.currIndex = current.index;            self.currPos   = current.pos;            self.trigger( 'beforeShow', firstRun );            self.updateControls();            currentPos = $.fancybox.getTranslate( current.$slide );            current.isMoved        = ( currentPos.left !== 0 || currentPos.top !== 0 ) && !current.$slide.hasClass( 'fancybox-animated' );            current.forcedDuration = undefined;            if ( $.isNumeric( duration ) ) {                current.forcedDuration = duration;            } else {                duration = current.opts[ firstRun ? 'animationDuration' : 'transitionDuration' ];            }            duration = parseInt( duration, 10 );            // Fresh start - reveal container, current slide and start loading content            if ( firstRun ) {                if ( current.opts.animationEffect && duration ) {                    self.$refs.container.css( 'transition-duration', duration + 'ms' );                }                self.$refs.container.removeClass( 'fancybox-is-hidden' );                forceRedraw( self.$refs.container );                self.$refs.container.addClass( 'fancybox-is-open' );                // Make first slide visible (to display loading icon, if needed)                current.$slide.addClass( 'fancybox-slide--current' );                self.loadSlide( current );                self.preload();                return;            }            // Clean up            $.each(self.slides, function( index, slide ) {                $.fancybox.stop( slide.$slide );            });            // Make current that slide is visible even if content is still loading            current.$slide.removeClass( 'fancybox-slide--next fancybox-slide--previous' ).addClass( 'fancybox-slide--current' );            // If slides have been dragged, animate them to correct position            if ( current.isMoved ) {                canvasWidth = Math.round( current.$slide.width() );                $.each(self.slides, function( index, slide ) {                    var pos = slide.pos - current.pos;                    $.fancybox.animate( slide.$slide, {                        top  : 0,                        left : ( pos * canvasWidth ) + ( pos * slide.opts.gutter )                    }, duration, function() {                        slide.$slide.removeAttr('style').removeClass( 'fancybox-slide--next fancybox-slide--previous' );                        if ( slide.pos === self.currPos ) {                            current.isMoved = false;                            self.complete();                        }                    });                });            } else {                self.$refs.stage.children().removeAttr( 'style' );            }            // Start transition that reveals current content            // or wait when it will be loaded            if ( current.isLoaded ) {                self.revealContent( current );            } else {                self.loadSlide( current );            }            self.preload();            if ( previous.pos === current.pos ) {                return;            }            // Handle previous slide            // =====================            transitionProps = 'fancybox-slide--' + ( previous.pos > current.pos ? 'next' : 'previous' );            previous.$slide.removeClass( 'fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous' );            previous.isComplete = false;            if ( !duration || ( !current.isMoved && !current.opts.transitionEffect ) ) {                return;            }            if ( current.isMoved ) {                previous.$slide.addClass( transitionProps );            } else {                transitionProps = 'fancybox-animated ' + transitionProps + ' fancybox-fx-' + current.opts.transitionEffect;                $.fancybox.animate( previous.$slide, transitionProps, duration, function() {                    previous.$slide.removeClass( transitionProps ).removeAttr( 'style' );                });            }        },        // Create new "slide" element        // These are gallery items  that are actually added to DOM        // =======================================================        createSlide : function( pos ) {            var self = this;            var $slide;            var index;            index = pos % self.group.length;            index = index < 0 ? self.group.length + index : index;            if ( !self.slides[ pos ] && self.group[ index ] ) {                $slide = $('<div class="fancybox-slide"></div>').appendTo( self.$refs.stage );                self.slides[ pos ] = $.extend( true, {}, self.group[ index ], {                    pos      : pos,                    $slide   : $slide,                    isLoaded : false,                });                self.updateSlide( self.slides[ pos ] );            }            return self.slides[ pos ];        },        // Scale image to the actual size of the image        // ===========================================        scaleToActual : function( x, y, duration ) {            var self = this;            var current = self.current;            var $what   = current.$content;            var imgPos, posX, posY, scaleX, scaleY;            var canvasWidth  = parseInt( current.$slide.width(), 10 );            var canvasHeight = parseInt( current.$slide.height(), 10 );            var newImgWidth  = current.width;            var newImgHeight = current.height;            if ( !( current.type == 'image' && !current.hasError) || !$what || self.isAnimating) {                return;            }            $.fancybox.stop( $what );            self.isAnimating = true;            x = x === undefined ? canvasWidth  * 0.5  : x;            y = y === undefined ? canvasHeight * 0.5  : y;            imgPos = $.fancybox.getTranslate( $what );            scaleX  = newImgWidth  / imgPos.width;            scaleY  = newImgHeight / imgPos.height;            // Get center position for original image            posX = ( canvasWidth * 0.5  - newImgWidth * 0.5 );            posY = ( canvasHeight * 0.5 - newImgHeight * 0.5 );            // Make sure image does not move away from edges            if ( newImgWidth > canvasWidth ) {                posX = imgPos.left * scaleX - ( ( x * scaleX ) - x );                if ( posX > 0 ) {                    posX = 0;                }                if ( posX <  canvasWidth - newImgWidth ) {                    posX = canvasWidth - newImgWidth;                }            }            if ( newImgHeight > canvasHeight) {                posY = imgPos.top  * scaleY - ( ( y * scaleY ) - y );                if ( posY > 0 ) {                    posY = 0;                }                if ( posY <  canvasHeight - newImgHeight ) {                    posY = canvasHeight - newImgHeight;                }            }            self.updateCursor( newImgWidth, newImgHeight );            $.fancybox.animate( $what, {                top    : posY,                left   : posX,                scaleX : scaleX,                scaleY : scaleY            }, duration || 330, function() {                self.isAnimating = false;            });            // Stop slideshow            if ( self.SlideShow && self.SlideShow.isActive ) {                self.SlideShow.stop();            }        },        // Scale image to fit inside parent element        // ========================================        scaleToFit : function( duration ) {            var self = this;            var current = self.current;            var $what   = current.$content;            var end;            if ( !( current.type == 'image' && !current.hasError) || !$what || self.isAnimating ) {                return;            }            $.fancybox.stop( $what );            self.isAnimating = true;            end = self.getFitPos( current );            self.updateCursor( end.width, end.height );            $.fancybox.animate( $what, {                top    : end.top,                left   : end.left,                scaleX : end.width  / $what.width(),                scaleY : end.height / $what.height()            }, duration || 330, function() {                self.isAnimating = false;            });        },        // Calculate image size to fit inside viewport        // ===========================================        getFitPos : function( slide ) {            var self  = this;            var $what = slide.$content;            var imgWidth  = slide.width;            var imgHeight = slide.height;            var margin = slide.opts.margin;            var canvasWidth, canvasHeight, minRatio, width, height;            if ( !$what || !$what.length || ( !imgWidth && !imgHeight) ) {                return false;            }            // Convert "margin to CSS style: [ top, right, bottom, left ]            if ( $.type( margin ) === "number" ) {                margin = [ margin, margin ];            }            if ( margin.length == 2 ) {                margin = [ margin[0], margin[1], margin[0], margin[1] ];            }            if ( $W.width() < 800 ) {                margin = [ 0, 0, 0, 0 ];            }            // We can not use $slide width here, because it can have different diemensions while in transiton            canvasWidth  = parseInt( self.$refs.stage.width(), 10 )  - ( margin[ 1 ] + margin[ 3 ] );            canvasHeight = parseInt( self.$refs.stage.height(), 10 ) - ( margin[ 0 ] + margin[ 2 ] );            minRatio = Math.min(1, canvasWidth / imgWidth, canvasHeight / imgHeight );            width  = Math.floor( minRatio * imgWidth );            height = Math.floor( minRatio * imgHeight );            // Use floor rounding to make sure it really fits            return {                top    : Math.floor( ( canvasHeight - height ) * 0.5 ) + margin[ 0 ],                left   : Math.floor( ( canvasWidth  - width )  * 0.5 ) + margin[ 3 ],                width  : width,                height : height            };        },        // Update position and content of all slides        // =========================================        update : function() {            var self = this;            $.each( self.slides, function( key, slide ) {                self.updateSlide( slide );            });        },        // Update slide position and scale content to fit        // ==============================================        updateSlide : function( slide ) {            var self  = this;            var $what = slide.$content;            if ( $what && ( slide.width || slide.height ) ) {                $.fancybox.stop( $what );                $.fancybox.setTranslate( $what, self.getFitPos( slide ) );                if ( slide.pos === self.currPos ) {                    self.updateCursor();                }            }            slide.$slide.trigger( 'refresh' );            self.trigger( 'onUpdate', slide );        },        // Update cursor style depending if content can be zoomed        // ======================================================        updateCursor : function( nextWidth, nextHeight ) {            var self = this;            var isScaledDown;            var $container = self.$refs.container.removeClass('fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-drag fancybox-can-zoomOut');            if ( !self.current || self.isClosing ) {                return;            }            if ( self.isZoomable() ) {                $container.addClass( 'fancybox-is-zoomable' );                if ( nextWidth !== undefined && nextHeight !== undefined ) {                    isScaledDown = nextWidth < self.current.width && nextHeight < self.current.height;                } else {                    isScaledDown = self.isScaledDown();                }                if ( isScaledDown ) {                    // If image is scaled down, then, obviously, it can be zoomed to full size                    $container.addClass('fancybox-can-zoomIn');                } else {                    if ( self.current.opts.touch ) {                        // If image size ir largen than available available and touch module is not disable,                        // then user can do panning                        $container.addClass('fancybox-can-drag');                    } else {                        $container.addClass('fancybox-can-zoomOut');                    }                }            } else if ( self.current.opts.touch ) {                $container.addClass('fancybox-can-drag');            }        },        // Check if current slide is zoomable        // ==================================        isZoomable : function() {            var self = this;            var current = self.current;            var fitPos;            if ( !current || self.isClosing ) {                return;            }            // Assume that slide is zoomable if            //   - image is loaded successfuly            //   - click action is "zoom"            //   - actual size of the image is smaller than available area            if ( current.type === 'image' && current.isLoaded && !current.hasError &&                ( current.opts.clickContent === 'zoom' || ( $.isFunction( current.opts.clickContent ) && current.opts.clickContent( current ) ===  "zoom" ) )            ) {                fitPos = self.getFitPos( current );                if ( current.width > fitPos.width || current.height > fitPos.height ) {                    return true;                }            }            return false;        },        // Check if current image dimensions are smaller than actual        // =========================================================        isScaledDown : function() {            var self = this;            var current = self.current;            var $what   = current.$content;            var rez = false;            if ( $what ) {                rez = $.fancybox.getTranslate( $what );                rez = rez.width < current.width || rez.height < current.height;            }            return rez;        },        // Check if image dimensions exceed parent element        // ===============================================        canPan : function() {            var self = this;            var current = self.current;            var $what   = current.$content;            var rez = false;            if ( $what ) {                rez = self.getFitPos( current );                rez = Math.abs( $what.width() - rez.width ) > 1  || Math.abs( $what.height() - rez.height ) > 1;            }            return rez;        },        // Load content into the slide        // ===========================        loadSlide : function( slide ) {            var self = this, type, $slide;            var ajaxLoad;            if ( slide.isLoading ) {                return;            }            if ( slide.isLoaded ) {                return;            }            slide.isLoading = true;            self.trigger( 'beforeLoad', slide );            type   = slide.type;            $slide = slide.$slide;            $slide                .off( 'refresh' )                .trigger( 'onReset' )                .addClass( 'fancybox-slide--' + ( type || 'unknown' ) )                .addClass( slide.opts.slideClass );            // Create content depending on the type            switch ( type ) {                case 'image':                    self.setImage( slide );                break;                case 'iframe':                    self.setIframe( slide );                break;                case 'html':                    self.setContent( slide, slide.src || slide.content );                break;                case 'inline':                    if ( $( slide.src ).length ) {                        self.setContent( slide, $( slide.src ) );                    } else {                        self.setError( slide );                    }                break;                case 'ajax':                    self.showLoading( slide );                    ajaxLoad = $.ajax( $.extend( {}, slide.opts.ajax.settings, {                        url : slide.src,                        success : function ( data, textStatus ) {                            if ( textStatus === 'success' ) {                                self.setContent( slide, data );                            }                        },                        error : function ( jqXHR, textStatus ) {                            if ( jqXHR && textStatus !== 'abort' ) {                                self.setError( slide );                            }                        }                    }));                    $slide.one( 'onReset', function () {                        ajaxLoad.abort();                    });                break;                default:                    self.setError( slide );                break;            }            return true;        },        // Use thumbnail image, if possible        // ================================        setImage : function( slide ) {            var self   = this;            var srcset = slide.opts.image.srcset;            var found, temp, pxRatio, windowWidth;            // If we have "srcset", then we need to find matching "src" value.            // This is necessary, because when you set an src attribute, the browser will preload the image            // before any javascript or even CSS is applied.            if ( srcset ) {                pxRatio     = window.devicePixelRatio || 1;                windowWidth = window.innerWidth  * pxRatio;                temp = srcset.split(',').map(function ( el ) {            		var ret = {};            		el.trim().split(/\s+/).forEach(function ( el, i ) {                        var value = parseInt( el.substring(0, el.length - 1), 10 );            			if ( i === 0 ) {            				return ( ret.url = el );            			}                        if ( value ) {                            ret.value   = value;                            ret.postfix = el[ el.length - 1 ];                        }            		});            		return ret;            	});                // Sort by value                temp.sort(function (a, b) {                  return a.value - b.value;                });                // Ok, now we have an array of all srcset values                for ( var j = 0; j < temp.length; j++ ) {                    var el = temp[ j ];                    if ( ( el.postfix === 'w' && el.value >= windowWidth ) || ( el.postfix === 'x' && el.value >= pxRatio ) ) {                        found = el;                        break;                    }                }                // If not found, take the last one                if ( !found && temp.length ) {                    found = temp[ temp.length - 1 ];                }                if ( found ) {                    slide.src = found.url;                    // If we have default width/height values, we can calculate height for matching source                    if ( slide.width && slide.height && found.postfix == 'w' ) {                        slide.height = ( slide.width / slide.height ) * found.value;                        slide.width  = found.value;                    }                }            }            // This will be wrapper containing both ghost and actual image            slide.$content = $('<div class="fancybox-image-wrap"></div>')                .addClass( 'fancybox-is-hidden' )                .appendTo( slide.$slide );            // If we have a thumbnail, we can display it while actual image is loading            // Users will not stare at black screen and actual image will appear gradually            if ( slide.opts.preload !== false && slide.opts.width && slide.opts.height && ( slide.opts.thumb || slide.opts.$thumb ) ) {                slide.width  = slide.opts.width;                slide.height = slide.opts.height;                slide.$ghost = $('<img />')                    .one('error', function() {                        $(this).remove();                        slide.$ghost = null;                        self.setBigImage( slide );                    })                    .one('load', function() {                        self.afterLoad( slide );                        self.setBigImage( slide );                    })                    .addClass( 'fancybox-image' )                    .appendTo( slide.$content )                    .attr( 'src', slide.opts.thumb || slide.opts.$thumb.attr( 'src' ) );            } else {                self.setBigImage( slide );            }        },        // Create full-size image        // ======================        setBigImage : function ( slide ) {            var self = this;            var $img = $('<img />');            slide.$image = $img                .one('error', function() {                    self.setError( slide );                })                .one('load', function() {                    // Clear timeout that checks if loading icon needs to be displayed                    clearTimeout( slide.timouts );                    slide.timouts = null;                    if ( self.isClosing ) {                        return;                    }                    slide.width  = this.naturalWidth;                    slide.height = this.naturalHeight;                    if ( slide.opts.image.srcset ) {                        $img.attr( 'sizes', '100vw' ).attr( 'srcset', slide.opts.image.srcset );                    }                    self.hideLoading( slide );                    if ( slide.$ghost ) {                        slide.timouts = setTimeout(function() {                            slide.timouts = null;                            slide.$ghost.hide();                        }, Math.min( 300, Math.max( 1000, slide.height / 1600 ) ) );                    } else {                        self.afterLoad( slide );                    }                })                .addClass( 'fancybox-image' )                .attr('src', slide.src)                .appendTo( slide.$content );            if ( $img[0].complete ) {                  $img.trigger( 'load' );            } else if( $img[0].error ) {                 $img.trigger( 'error' );            } else {                slide.timouts = setTimeout(function() {                    if ( !$img[0].complete && !slide.hasError ) {                        self.showLoading( slide );                    }                }, 100);            }        },        // Create iframe wrapper, iframe and bindings        // ==========================================        setIframe : function( slide ) {            var self	= this,                opts    = slide.opts.iframe,                $slide	= slide.$slide,                $iframe;            slide.$content = $('<div class="fancybox-content' + ( opts.preload ? ' fancybox-is-hidden' : '' ) + '"></div>')                .css( opts.css )                .appendTo( $slide );            $iframe = $( opts.tpl.replace(/\{rnd\}/g, new Date().getTime()) )                .attr( opts.attr )                .appendTo( slide.$content );            if ( opts.preload ) {                self.showLoading( slide );                // Unfortunately, it is not always possible to determine if iframe is successfully loaded                // (due to browser security policy)                $iframe.on('load.fb error.fb', function(e) {                    this.isReady = 1;                    slide.$slide.trigger( 'refresh' );                    self.afterLoad( slide );                });                // Recalculate iframe content size                // ===============================                $slide.on('refresh.fb', function() {                    var $wrap = slide.$content,                        $contents,                        $body,                        scrollWidth,                        frameWidth,                        frameHeight;                    if ( $iframe[0].isReady !== 1 ) {                        return;                    }                    // Check if content is accessible,                    // it will fail if frame is not with the same origin                    try {                        $contents = $iframe.contents();                        $body     = $contents.find('body');                    } catch (ignore) {}                    // Calculate dimensions for the wrapper                    if ( $body && $body.length && !( opts.css.width !== undefined && opts.css.height !== undefined ) ) {                        scrollWidth = $iframe[0].contentWindow.document.documentElement.scrollWidth;                        frameWidth	= Math.ceil( $body.outerWidth(true) + ( $wrap.width() - scrollWidth ) );                        frameHeight	= Math.ceil( $body.outerHeight(true) );                        // Resize wrapper to fit iframe content                        $wrap.css({                            'width'  : opts.css.width  === undefined ? frameWidth  + ( $wrap.outerWidth()  - $wrap.innerWidth() )  : opts.css.width,                            'height' : opts.css.height === undefined ? frameHeight + ( $wrap.outerHeight() - $wrap.innerHeight() ) : opts.css.height                        });                    }                    $wrap.removeClass( 'fancybox-is-hidden' );                });            } else {                this.afterLoad( slide );            }            $iframe.attr( 'src', slide.src );            if ( slide.opts.smallBtn === true ) {                slide.$content.prepend( self.translate( slide, slide.opts.btnTpl.smallBtn ) );            }            // Remove iframe if closing or changing gallery item            $slide.one( 'onReset', function () {                // This helps IE not to throw errors when closing                try {                    $( this ).find( 'iframe' ).hide().attr( 'src', '//about:blank' );                } catch ( ignore ) {}                $( this ).empty();                slide.isLoaded = false;            });        },        // Wrap and append content to the slide        // ======================================        setContent : function ( slide, content ) {            var self = this;            if ( self.isClosing ) {                return;            }            self.hideLoading( slide );            slide.$slide.empty();            if ( isQuery( content ) && content.parent().length ) {                // If content is a jQuery object, then it will be moved to the slide.                // The placeholder is created so we will know where to put it back.                // If user is navigating gallery fast, then the content might be already inside fancyBox                // =====================================================================================                // Make sure content is not already moved to fancyBox                content.parent( '.fancybox-slide--inline' ).trigger( 'onReset' );                // Create temporary element marking original place of the content                slide.$placeholder = $( '<div></div>' ).hide().insertAfter( content );                // Make sure content is visible                content.css('display', 'inline-block');            } else if ( !slide.hasError ) {                // If content is just a plain text, try to convert it to html                if ( $.type( content ) === 'string' ) {                    content = $('<div>').append( $.trim( content ) ).contents();                    // If we have text node, then add wrapping element to make vertical alignment work                    if ( content[0].nodeType === 3 ) {                        content = $('<div>').html( content );                    }                }                // If "filter" option is provided, then filter content                if ( slide.opts.filter ) {                    content = $('<div>').html( content ).find( slide.opts.filter );                }            }            slide.$slide.one('onReset', function () {                // Put content back                if ( slide.$placeholder ) {                    slide.$placeholder.after( content.hide() ).remove();                    slide.$placeholder = null;                }                // Remove custom close button                if ( slide.$smallBtn ) {                    slide.$smallBtn.remove();                    slide.$smallBtn = null;                }                // Remove content and mark slide as not loaded                if ( !slide.hasError ) {                    $(this).empty();                    slide.isLoaded = false;                }            });            slide.$content = $( content ).appendTo( slide.$slide );            if ( slide.opts.smallBtn && !slide.$smallBtn ) {                slide.$smallBtn = $( self.translate( slide, slide.opts.btnTpl.smallBtn ) ).appendTo( slide.$content );            }            this.afterLoad( slide );        },        // Display error message        // =====================        setError : function ( slide ) {            slide.hasError = true;            slide.$slide.removeClass( 'fancybox-slide--' + slide.type );            this.setContent( slide, this.translate( slide, slide.opts.errorTpl ) );        },        // Show loading icon inside the slide        // ==================================        showLoading : function( slide ) {            var self = this;            slide = slide || self.current;            if ( slide && !slide.$spinner ) {                slide.$spinner = $( self.opts.spinnerTpl ).appendTo( slide.$slide );            }        },        // Remove loading icon from the slide        // ==================================        hideLoading : function( slide ) {            var self = this;            slide = slide || self.current;            if ( slide && slide.$spinner ) {                slide.$spinner.remove();                delete slide.$spinner;            }        },        // Adjustments after slide content has been loaded        // ===============================================        afterLoad : function( slide ) {            var self = this;            if ( self.isClosing ) {                return;            }            slide.isLoading = false;            slide.isLoaded  = true;            self.trigger( 'afterLoad', slide );            self.hideLoading( slide );            if ( slide.opts.protect && slide.$content && !slide.hasError ) {                // Disable right click                slide.$content.on( 'contextmenu.fb', function( e ) {                     if ( e.button == 2 ) {                         e.preventDefault();                     }                    return true;                });                // Add fake element on top of the image                // This makes a bit harder for user to select image                if ( slide.type === 'image' ) {                    $( '<div class="fancybox-spaceball"></div>' ).appendTo( slide.$content );                }            }            self.revealContent( slide );        },        // Make content visible        // This method is called right after content has been loaded or        // user navigates gallery and transition should start        // ============================================================        revealContent : function( slide ) {            var self   = this;            var $slide = slide.$slide;            var effect, effectClassName, duration, opacity, end, start = false;            effect   = slide.opts[ self.firstRun ? 'animationEffect'   : 'transitionEffect' ];            duration = slide.opts[ self.firstRun ? 'animationDuration' : 'transitionDuration' ];            duration = parseInt( slide.forcedDuration === undefined ? duration : slide.forcedDuration, 10 );            if ( slide.isMoved || slide.pos !== self.currPos || !duration ) {                effect = false;            }            // Check if can zoom            if ( effect === 'zoom' && !( slide.pos === self.currPos && duration && slide.type === 'image' && !slide.hasError && ( start = self.getThumbPos( slide ) ) ) ) {                effect = 'fade';            }            // Zoom animation            // ==============            if ( effect === 'zoom' ) {                end = self.getFitPos( slide );                end.scaleX = Math.round( (end.width  / start.width)  * 100 ) / 100;                end.scaleY = Math.round( (end.height / start.height) * 100 ) / 100;                delete end.width;                delete end.height;                // Check if we need to animate opacity                opacity = slide.opts.zoomOpacity;                if ( opacity == 'auto' ) {                    opacity = Math.abs( slide.width / slide.height - start.width / start.height ) > 0.1;                }                if ( opacity ) {                    start.opacity = 0.1;                    end.opacity   = 1;                }                // Draw image at start position                $.fancybox.setTranslate( slide.$content.removeClass( 'fancybox-is-hidden' ), start );                forceRedraw( slide.$content );                // Start animation                $.fancybox.animate( slide.$content, end, duration, function() {                    self.complete();                });                return;            }            self.updateSlide( slide );            // Simply show content            // ===================            if ( !effect ) {                forceRedraw( $slide );                slide.$content.removeClass( 'fancybox-is-hidden' );                if ( slide.pos === self.currPos ) {                    self.complete();                }                return;            }            $.fancybox.stop( $slide );            effectClassName = 'fancybox-animated fancybox-slide--' + ( slide.pos > self.prevPos ? 'next' : 'previous' ) + ' fancybox-fx-' + effect;            $slide.removeAttr( 'style' ).removeClass( 'fancybox-slide--current fancybox-slide--next fancybox-slide--previous' ).addClass( effectClassName );            slide.$content.removeClass( 'fancybox-is-hidden' );            //Force reflow for CSS3 transitions            forceRedraw( $slide );            $.fancybox.animate( $slide, 'fancybox-slide--current', duration, function(e) {                $slide.removeClass( effectClassName ).removeAttr( 'style' );                if ( slide.pos === self.currPos ) {                    self.complete();                }            }, true);        },        // Check if we can and have to zoom from thumbnail        //================================================        getThumbPos : function( slide ) {            var self = this;            var rez  = false;            // Check if element is inside the viewport by at least 1 pixel            var isElementVisible = function( $el ) {                var element = $el[0];                var elementRect = element.getBoundingClientRect();                var parentRects = [];                var visibleInAllParents;                while ( element.parentElement !== null ) {                    if ( $(element.parentElement).css('overflow') === 'hidden'  || $(element.parentElement).css('overflow') === 'auto' ) {                        parentRects.push(element.parentElement.getBoundingClientRect());                    }                    element = element.parentElement;                }                visibleInAllParents = parentRects.every(function(parentRect){                    var visiblePixelX = Math.min(elementRect.right, parentRect.right) - Math.max(elementRect.left, parentRect.left);                    var visiblePixelY = Math.min(elementRect.bottom, parentRect.bottom) - Math.max(elementRect.top, parentRect.top);                    return visiblePixelX > 0 && visiblePixelY > 0;                });                return visibleInAllParents &&                    elementRect.bottom > 0 && elementRect.right > 0 &&                    elementRect.left < $(window).width() && elementRect.top < $(window).height();            };            var $thumb   = slide.opts.$thumb;            var thumbPos = $thumb ? $thumb.offset() : 0;            var slidePos;            if ( thumbPos && $thumb[0].ownerDocument === document && isElementVisible( $thumb ) ) {                slidePos = self.$refs.stage.offset();                rez = {                    top    : thumbPos.top  - slidePos.top  + parseFloat( $thumb.css( "border-top-width" ) || 0 ),                    left   : thumbPos.left - slidePos.left + parseFloat( $thumb.css( "border-left-width" ) || 0 ),                    width  : $thumb.width(),                    height : $thumb.height(),                    scaleX : 1,                    scaleY : 1                };            }            return rez;        },        // Final adjustments after current gallery item is moved to position        // and it`s content is loaded        // ==================================================================        complete : function() {            var self = this;            var current = self.current;            var slides  = {};            if ( current.isMoved || !current.isLoaded || current.isComplete ) {                return;            }            current.isComplete = true;            current.$slide.siblings().trigger( 'onReset' );            // Trigger any CSS3 transiton inside the slide            forceRedraw( current.$slide );            current.$slide.addClass( 'fancybox-slide--complete' );            // Remove unnecessary slides            $.each( self.slides, function( key, slide ) {                if ( slide.pos >= self.currPos - 1 && slide.pos <= self.currPos + 1 ) {                    slides[ slide.pos ] = slide;                } else if ( slide ) {                    $.fancybox.stop( slide.$slide );                    slide.$slide.unbind().remove();                }            });            self.slides = slides;            self.updateCursor();            self.trigger( 'afterShow' );            // Try to focus on the first focusable element            if ( $( document.activeElement ).is( '[disabled]' ) || ( current.opts.autoFocus && !( current.type == 'image' || current.type === 'iframe' ) ) ) {                self.focus();            }        },        // Preload next and previous slides        // ================================        preload : function() {            var self = this;            var next, prev;            if ( self.group.length < 2 ) {                return;            }            next  = self.slides[ self.currPos + 1 ];            prev  = self.slides[ self.currPos - 1 ];            if ( next && next.type === 'image' ) {                self.loadSlide( next );            }            if ( prev && prev.type === 'image' ) {                self.loadSlide( prev );            }        },        // Try to find and focus on the first focusable element        // ====================================================        focus : function() {            var current = this.current;            var $el;            if ( this.isClosing ) {                return;            }            // Skip for images and iframes            $el = current && current.isComplete ? current.$slide.find('button,:input,[tabindex],a').filter(':not([disabled]):visible:first') : null;            $el = $el && $el.length ? $el : this.$refs.container;            $el.focus();        },        // Activates current instance - brings container to the front and enables keyboard,        // notifies other instances about deactivating        // =================================================================================        activate : function () {            var self = this;            // Deactivate all instances            $( '.fancybox-container' ).each(function () {                var instance = $(this).data( 'FancyBox' );                // Skip self and closing instances                if (instance && instance.uid !== self.uid && !instance.isClosing) {                    instance.trigger( 'onDeactivate' );                }            });            if ( self.current ) {                if ( self.$refs.container.index() > 0 ) {                    self.$refs.container.prependTo( document.body );                }                self.updateControls();            }            self.trigger( 'onActivate' );            self.addEvents();        },        // Start closing procedure        // This will start "zoom-out" animation if needed and clean everything up afterwards        // =================================================================================        close : function( e, d ) {            var self    = this;            var current = self.current;            var effect, duration;            var $what, opacity, start, end;            var done = function() {                self.cleanUp( e );            };            if ( self.isClosing ) {                return false;            }            self.isClosing = true;            // If beforeClose callback prevents closing, make sure content is centered            if ( self.trigger( 'beforeClose', e ) === false ) {                self.isClosing = false;                requestAFrame(function() {                    self.update();                });                return false;            }            // Remove all events            // If there are multiple instances, they will be set again by "activate" method            self.removeEvents();            if ( current.timouts ) {                clearTimeout( current.timouts );            }            $what    = current.$content;            effect   = current.opts.animationEffect;            duration = $.isNumeric( d ) ? d : ( effect ? current.opts.animationDuration : 0 );            // Remove other slides            current.$slide.off( transitionEnd ).removeClass( 'fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated' );            current.$slide.siblings().trigger( 'onReset' ).remove();            // Trigger animations            if ( duration ) {                self.$refs.container.removeClass( 'fancybox-is-open' ).addClass( 'fancybox-is-closing' );            }            // Clean up            self.hideLoading( current );            self.hideControls();            self.updateCursor();            // Check if possible to zoom-out            if ( effect === 'zoom' && !( e !== true && $what && duration && current.type === 'image' && !current.hasError && ( end = self.getThumbPos( current ) ) ) ) {                effect = 'fade';            }            if ( effect === 'zoom' ) {                $.fancybox.stop( $what );                start = $.fancybox.getTranslate( $what );                start.width  = start.width  * start.scaleX;                start.height = start.height * start.scaleY;                // Check if we need to animate opacity                opacity = current.opts.zoomOpacity;                if ( opacity == 'auto' ) {                    opacity = Math.abs( current.width / current.height - end.width / end.height ) > 0.1;                }                if ( opacity ) {                    end.opacity = 0;                }                start.scaleX = start.width  / end.width;                start.scaleY = start.height / end.height;                start.width  = end.width;                start.height = end.height;                $.fancybox.setTranslate( current.$content, start );                $.fancybox.animate( current.$content, end, duration, done );                return true;            }            if ( effect && duration ) {                // If skip animation                if ( e === true ) {                    setTimeout( done, duration );                } else {                    $.fancybox.animate( current.$slide.removeClass( 'fancybox-slide--current' ), 'fancybox-animated fancybox-slide--previous fancybox-fx-' + effect, duration, done );                }            } else {                done();            }            return true;        },        // Final adjustments after removing the instance        // =============================================        cleanUp : function( e ) {            var self = this,                instance;            self.current.$slide.trigger( 'onReset' );            self.$refs.container.empty().remove();            self.trigger( 'afterClose', e );            // Place back focus            if ( self.$lastFocus && !!!self.current.focusBack ) {                self.$lastFocus.focus();            }            self.current = null;            // Check if there are other instances            instance = $.fancybox.getInstance();            if ( instance ) {                instance.activate();            } else {                $W.scrollTop( self.scrollTop ).scrollLeft( self.scrollLeft );                $( 'html' ).removeClass( 'fancybox-enabled' );                $( '#fancybox-style-noscroll' ).remove();            }        },        // Call callback and trigger an event        // ==================================        trigger : function( name, slide ) {            var args  = Array.prototype.slice.call(arguments, 1),                self  = this,                obj   = slide && slide.opts ? slide : self.current,                rez;            if ( obj ) {                args.unshift( obj );            } else {                obj = self;            }            args.unshift( self );            if ( $.isFunction( obj.opts[ name ] ) ) {                rez = obj.opts[ name ].apply( obj, args );            }            if ( rez === false ) {                return rez;            }            if ( name === 'afterClose' ) {                $D.trigger( name + '.fb', args );            } else {                self.$refs.container.trigger( name + '.fb', args );            }        },        // Update infobar values, navigation button states and reveal caption        // ==================================================================        updateControls : function ( force ) {            var self = this;            var current  = self.current;            var index    = current.index;            var opts     = current.opts;            var caption  = opts.caption;            var $caption = self.$refs.caption;            // Recalculate content dimensions            current.$slide.trigger( 'refresh' );            self.$caption = caption && caption.length ? $caption.html( caption ) : null;            if ( !self.isHiddenControls ) {                self.showControls();            }            // Update info and navigation elements            $('[data-fancybox-count]').html( self.group.length );            $('[data-fancybox-index]').html( index + 1 );            $('[data-fancybox-prev]').prop('disabled', ( !opts.loop && index <= 0 ) );            $('[data-fancybox-next]').prop('disabled', ( !opts.loop && index >= self.group.length - 1 ) );        },        // Hide toolbar and caption        // ========================        hideControls : function () {            this.isHiddenControls = true;            this.$refs.container.removeClass('fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav');        },        showControls : function() {            var self = this;            var opts = self.current ? self.current.opts : self.opts;            var $container = self.$refs.container;            self.isHiddenControls   = false;            self.idleSecondsCounter = 0;            $container                .toggleClass('fancybox-show-toolbar', !!( opts.toolbar && opts.buttons ) )                .toggleClass('fancybox-show-infobar', !!( opts.infobar && self.group.length > 1 ) )                .toggleClass('fancybox-show-nav',     !!( opts.arrows && self.group.length > 1 ) )                .toggleClass('fancybox-is-modal',     !!opts.modal );            if ( self.$caption ) {                $container.addClass( 'fancybox-show-caption ');            } else {               $container.removeClass( 'fancybox-show-caption' );           }       },       // Toggle toolbar and caption       // ==========================       toggleControls : function() {           if ( this.isHiddenControls ) {               this.showControls();           } else {               this.hideControls();           }       },    });    $.fancybox = {        version  : "3.1.20",        defaults : defaults,        // Get current instance and execute a command.        //        // Examples of usage:        //        //   $instance = $.fancybox.getInstance();        //   $.fancybox.getInstance().jumpTo( 1 );        //   $.fancybox.getInstance( 'jumpTo', 1 );        //   $.fancybox.getInstance( function() {        //       console.info( this.currIndex );        //   });        // ======================================================        getInstance : function ( command ) {            var instance = $('.fancybox-container:not(".fancybox-is-closing"):first').data( 'FancyBox' );            var args     = Array.prototype.slice.call(arguments, 1);            if ( instance instanceof FancyBox ) {                if ( $.type( command ) === 'string' ) {                    instance[ command ].apply( instance, args );                } else if ( $.type( command ) === 'function' ) {                    command.apply( instance, args );                }                return instance;            }            return false;        },        // Create new instance        // ===================        open : function ( items, opts, index ) {            return new FancyBox( items, opts, index );        },        // Close current or all instances        // ==============================        close : function ( all ) {            var instance = this.getInstance();            if ( instance ) {                instance.close();                // Try to find and close next instance                if ( all === true ) {                    this.close();                }            }        },        // Close instances and unbind all events        // ==============================        destroy : function() {            this.close( true );            $D.off( 'click.fb-start' );        },        // Try to detect mobile devices        // ============================        isMobile : document.createTouch !== undefined && /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),        // Detect if 'translate3d' support is available        // ============================================        use3d : (function() {            var div = document.createElement('div');            return window.getComputedStyle && window.getComputedStyle( div ).getPropertyValue('transform') && !(document.documentMode && document.documentMode < 11);        }()),        // Helper function to get current visual state of an element        // returns array[ top, left, horizontal-scale, vertical-scale, opacity ]        // =====================================================================        getTranslate : function( $el ) {            var matrix;            if ( !$el || !$el.length ) {                return false;            }            matrix  = $el.eq( 0 ).css('transform');            if ( matrix && matrix.indexOf( 'matrix' ) !== -1 ) {                matrix = matrix.split('(')[1];                matrix = matrix.split(')')[0];                matrix = matrix.split(',');            } else {                matrix = [];            }            if ( matrix.length ) {                // If IE                if ( matrix.length > 10 ) {                    matrix = [ matrix[13], matrix[12], matrix[0], matrix[5] ];                } else {                    matrix = [ matrix[5], matrix[4], matrix[0], matrix[3]];                }                matrix = matrix.map(parseFloat);            } else {                matrix = [ 0, 0, 1, 1 ];                var transRegex = /\.*translate\((.*)px,(.*)px\)/i;                var transRez = transRegex.exec( $el.eq( 0 ).attr('style') );                if ( transRez ) {                    matrix[ 0 ] = parseFloat( transRez[2] );                    matrix[ 1 ] = parseFloat( transRez[1] );                }            }            return {                top     : matrix[ 0 ],                left    : matrix[ 1 ],                scaleX  : matrix[ 2 ],                scaleY  : matrix[ 3 ],                opacity : parseFloat( $el.css('opacity') ),                width   : $el.width(),                height  : $el.height()            };        },        // Shortcut for setting "translate3d" properties for element        // Can set be used to set opacity, too        // ========================================================        setTranslate : function( $el, props ) {            var str  = '';            var css  = {};            if ( !$el || !props ) {                return;            }            if ( props.left !== undefined || props.top !== undefined ) {                str = ( props.left === undefined ? $el.position().left : props.left )  + 'px, ' + ( props.top === undefined ? $el.position().top : props.top ) + 'px';                if ( this.use3d ) {                    str = 'translate3d(' + str + ', 0px)';                } else {                    str = 'translate(' + str + ')';                }            }            if ( props.scaleX !== undefined && props.scaleY !== undefined ) {                str = (str.length ? str + ' ' : '') + 'scale(' + props.scaleX + ', ' + props.scaleY + ')';            }            if ( str.length ) {                css.transform = str;            }            if ( props.opacity !== undefined ) {                css.opacity = props.opacity;            }            if ( props.width !== undefined ) {                css.width = props.width;            }            if ( props.height !== undefined ) {                css.height = props.height;            }            return $el.css( css );        },        // Simple CSS transition handler        // =============================        animate : function ( $el, to, duration, callback, leaveAnimationName ) {            var event = transitionEnd || 'transitionend';            if ( $.isFunction( duration ) ) {                callback = duration;                duration = null;            }            if ( !$.isPlainObject( to ) ) {                $el.removeAttr('style');            }            $el.on( event, function(e) {                // Skip events from child elements and z-index change                if ( e && e.originalEvent && ( !$el.is( e.originalEvent.target ) || e.originalEvent.propertyName == 'z-index' ) ) {                    return;                }                $el.off( event );                if ( $.isPlainObject( to ) ) {                    if ( to.scaleX !== undefined && to.scaleY !== undefined ) {                        $el.css( 'transition-duration', '0ms' );                        to.width  = $el.width()  * to.scaleX;                        to.height = $el.height() * to.scaleY;                        to.scaleX = 1;                        to.scaleY = 1;                        $.fancybox.setTranslate( $el, to );                    }                } else if ( leaveAnimationName !== true ) {                    $el.removeClass( to );                }                if ( $.isFunction( callback ) ) {                    callback( e );                }            });            if ( $.isNumeric( duration ) ) {                $el.css( 'transition-duration', duration + 'ms' );            }            if ( $.isPlainObject( to ) ) {                $.fancybox.setTranslate( $el, to );            } else {                $el.addClass( to );            }            $el.data("timer", setTimeout(function() {                $el.trigger( 'transitionend' );            }, duration + 16));        },        stop : function( $el ) {            clearTimeout( $el.data("timer") );            $el.off( transitionEnd );        }    };    // Default click handler for "fancyboxed" links    // ============================================    function _run( e ) {        var target	= e.currentTarget,            opts	= e.data ? e.data.options : {},            items	= e.data ? e.data.items : [],            value	= $(target).attr( 'data-fancybox' ) || '',            index	= 0;        e.preventDefault();        e.stopPropagation();        // Get all related items and find index for clicked one        if ( value ) {            items = items.length ? items.filter( '[data-fancybox="' + value + '"]' ) : $( '[data-fancybox="' + value + '"]' );            index = items.index( target );            // Sometimes current item can not be found            // (for example, when slider clones items)            if ( index < 0 ) {                index = 0;            }        } else {            items = [ target ];        }        $.fancybox.open( items, opts, index );    }    // Create a jQuery plugin    // ======================    $.fn.fancybox = function (options) {        var selector;        options  = options || {};        selector = options.selector || false;        if ( selector ) {            $( 'body' ).off( 'click.fb-start', selector ).on( 'click.fb-start', selector, {                items   : $( selector ),                options : options            }, _run );        } else {            this.off( 'click.fb-start' ).on( 'click.fb-start', {                items   : this,                options : options            }, _run);        }        return this;    };    // Self initializing plugin    // ========================    $D.on( 'click.fb-start', '[data-fancybox]', _run );}( window, document, window.jQuery ));// ==========================================================================//// Media// Adds additional media type support//// ==========================================================================;(function ($) {	'use strict';	// Formats matching url to final form	var format = function (url, rez, params) {		if ( !url ) {			return;		}		params = params || '';		if ( $.type(params) === "object" ) {			params = $.param(params, true);		}		$.each(rez, function (key, value) {			url = url.replace('$' + key, value || '');		});		if (params.length) {			url += (url.indexOf('?') > 0 ? '&' : '?') + params;		}		return url;	};	// Object containing properties for each media type	var defaults = {		youtube : {			matcher : /(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,			params  : {				autoplay : 1,				autohide : 1,				fs  : 1,				rel : 0,				hd  : 1,				wmode : 'transparent',				enablejsapi : 1,				html5 : 1			},			paramPlace : 8,			type  : 'iframe',			url   : '//www.youtube.com/embed/$4',			thumb : '//img.youtube.com/vi/$4/hqdefault.jpg'		},		vimeo : {			matcher : /^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,			params  : {				autoplay : 1,				hd : 1,				show_title    : 1,				show_byline   : 1,				show_portrait : 0,				fullscreen    : 1,				api : 1			},			paramPlace : 3,			type : 'iframe',			url : '//player.vimeo.com/video/$2'		},		metacafe : {			matcher : /metacafe.com\/watch\/(\d+)\/(.*)?/,			type    : 'iframe',			url     : '//www.metacafe.com/embed/$1/?ap=1'		},		dailymotion : {			matcher : /dailymotion.com\/video\/(.*)\/?(.*)/,			params : {				additionalInfos : 0,				autoStart : 1			},			type : 'iframe',			url  : '//www.dailymotion.com/embed/video/$1'		},		vine : {			matcher : /vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,			type    : 'iframe',			url     : '//vine.co/v/$1/embed/simple'		},		instagram : {			matcher : /(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,			type    : 'image',			url     : '//$1/p/$2/media/?size=l'		},		// Examples:		// http://maps.google.com/?ll=48.857995,2.294297&spn=0.007666,0.021136&t=m&z=16		// http://maps.google.com/?ll=48.857995,2.294297&spn=0.007666,0.021136&t=m&z=16		// https://www.google.lv/maps/place/Googleplex/@37.4220041,-122.0833494,17z/data=!4m5!3m4!1s0x0:0x6c296c66619367e0!8m2!3d37.4219998!4d-122.0840572		google_maps : {			matcher : /(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,			type    : 'iframe',			url     : function (rez) {				return '//maps.google.' + rez[2] + '/?ll=' + ( rez[9] ? rez[9] + '&z=' + Math.floor(  rez[10]  ) + ( rez[12] ? rez[12].replace(/^\//, "&") : '' )  : rez[12] ) + '&output=' + ( rez[12] && rez[12].indexOf('layer=c') > 0 ? 'svembed' : 'embed' );			}		}	};	$(document).on('onInit.fb', function (e, instance) {		$.each(instance.group, function( i, item ) {			var url	 = item.src || '',				type = false,				media,				thumb,				rez,				params,				urlParams,				o,				provider;			// Skip items that already have content type			if ( item.type ) {				return;			}			media = $.extend( true, {}, defaults, item.opts.media );			// Look for any matching media type			$.each(media, function ( n, el ) {				rez = url.match(el.matcher);				o   = {};				provider = n;				if (!rez) {					return;				}				type = el.type;				if ( el.paramPlace && rez[ el.paramPlace ] ) {					urlParams = rez[ el.paramPlace ];					if ( urlParams[ 0 ] == '?' ) {						urlParams = urlParams.substring(1);					}					urlParams = urlParams.split('&');					for ( var m = 0; m < urlParams.length; ++m ) {						var p = urlParams[ m ].split('=', 2);						if ( p.length == 2 ) {							o[ p[0] ] = decodeURIComponent( p[1].replace(/\+/g, " ") );						}					}				}				params = $.extend( true, {}, el.params, item.opts[ n ], o );				url   = $.type(el.url) === "function" ? el.url.call(this, rez, params, item) : format(el.url, rez, params);				thumb = $.type(el.thumb) === "function" ? el.thumb.call(this, rez, params, item) : format(el.thumb, rez);				if ( provider === 'vimeo' ) {					url = url.replace('&%23', '#');				}				return false;			});			// If it is found, then change content type and update the url			if ( type ) {				item.src  = url;				item.type = type;				if ( !item.opts.thumb && !( item.opts.$thumb && item.opts.$thumb.length ) ) {					item.opts.thumb = thumb;				}				if ( type === 'iframe' ) {					$.extend(true, item.opts, {						iframe : {							preload : false,							attr : {								scrolling : "no"							}						}					});					item.contentProvider = provider;					item.opts.slideClass += ' fancybox-slide--' + ( provider == 'google_maps' ? 'map' : 'video' );				}			} else {				// If no content type is found, then set it to `image` as fallback				item.type = 'image';			}		});	});}(window.jQuery));// ==========================================================================//// Guestures// Adds touch guestures, handles click and tap events//// ==========================================================================;(function (window, document, $) {	'use strict';	var requestAFrame = (function () {        return window.requestAnimationFrame ||                window.webkitRequestAnimationFrame ||                window.mozRequestAnimationFrame ||                window.oRequestAnimationFrame ||                // if all else fails, use setTimeout                function (callback) {                    return window.setTimeout(callback, 1000 / 60);                };    })();    var cancelAFrame = (function () {        return window.cancelAnimationFrame ||                window.webkitCancelAnimationFrame ||                window.mozCancelAnimationFrame ||                window.oCancelAnimationFrame ||                function (id) {                    window.clearTimeout(id);                };    })();	var pointers = function( e ) {		var result = [];		e = e.originalEvent || e || window.e;		e = e.touches && e.touches.length ? e.touches : ( e.changedTouches && e.changedTouches.length ? e.changedTouches : [ e ] );		for ( var key in e ) {			if ( e[ key ].pageX ) {				result.push( { x : e[ key ].pageX, y : e[ key ].pageY } );			} else if ( e[ key ].clientX ) {				result.push( { x : e[ key ].clientX, y : e[ key ].clientY } );			}		}		return result;	};	var distance = function( point2, point1, what ) {		if ( !point1 || !point2 ) {			return 0;		}		if ( what === 'x' ) {			return point2.x - point1.x;		} else if ( what === 'y' ) {			return point2.y - point1.y;		}		return Math.sqrt( Math.pow( point2.x - point1.x, 2 ) + Math.pow( point2.y - point1.y, 2 ) );	};	var isClickable = function( $el ) {		if ( $el.is('a,button,input,select,textarea') || $.isFunction( $el.get(0).onclick ) ) {			return true;		}		// Check for attributes like data-fancybox-next or data-fancybox-close		for ( var i = 0, atts = $el[0].attributes, n = atts.length; i < n; i++ ) {            if ( atts[i].nodeName.substr(0, 14) === 'data-fancybox-' ) {                return true;            }        }	 	return false;	};	var hasScrollbars = function( el ) {		var overflowY = window.getComputedStyle( el )['overflow-y'];		var overflowX = window.getComputedStyle( el )['overflow-x'];		var vertical   = (overflowY === 'scroll' || overflowY === 'auto') && el.scrollHeight > el.clientHeight;		var horizontal = (overflowX === 'scroll' || overflowX === 'auto') && el.scrollWidth > el.clientWidth;		return vertical || horizontal;	};	var isScrollable = function ( $el ) {		var rez = false;		while ( true ) {			rez	= hasScrollbars( $el.get(0) );			if ( rez ) {				break;			}			$el = $el.parent();			if ( !$el.length || $el.hasClass( 'fancybox-stage' ) || $el.is( 'body' ) ) {				break;			}		}		return rez;	};	var Guestures = function ( instance ) {		var self = this;		self.instance = instance;		self.$bg        = instance.$refs.bg;		self.$stage     = instance.$refs.stage;		self.$container = instance.$refs.container;		self.destroy();		self.$container.on( 'touchstart.fb.touch mousedown.fb.touch', $.proxy(self, 'ontouchstart') );	};	Guestures.prototype.destroy = function() {		this.$container.off( '.fb.touch' );	};	Guestures.prototype.ontouchstart = function( e ) {		var self = this;		var $target  = $( e.target );		var instance = self.instance;		var current  = instance.current;		var $content = current.$content;		var isTouchDevice = ( e.type == 'touchstart' );		// Do not respond to both events		if ( isTouchDevice ) {	        self.$container.off( 'mousedown.fb.touch' );	    }		// Ignore clicks while zooming or closing		if ( !current || self.instance.isAnimating || self.instance.isClosing ) {			e.stopPropagation();			e.preventDefault();			return;		}		// Ignore right click		if ( e.originalEvent && e.originalEvent.button == 2 ) {			return;		}		// Ignore taping on links, buttons, input elements		if ( !$target.length || isClickable( $target ) || isClickable( $target.parent() ) ) {			return;		}		// Ignore clicks on the scrollbar		if ( e.originalEvent.clientX > $target[0].clientWidth + $target.offset().left ) {			return;		}		self.startPoints = pointers( e );		// Prevent zooming if already swiping		if ( !self.startPoints || ( self.startPoints.length > 1 && instance.isSliding ) ) {			return;		}		self.$target  = $target;		self.$content = $content;		self.canTap   = true;		$(document).off( '.fb.touch' );		$(document).on( isTouchDevice ? 'touchend.fb.touch touchcancel.fb.touch' : 'mouseup.fb.touch mouseleave.fb.touch',  $.proxy(self, "ontouchend"));		$(document).on( isTouchDevice ? 'touchmove.fb.touch' : 'mousemove.fb.touch',  $.proxy(self, "ontouchmove"));		e.stopPropagation();		if ( !(instance.current.opts.touch || instance.canPan() ) || !( $target.is( self.$stage ) || self.$stage.find( $target ).length ) ) {			// Prevent ghosting			if ( $target.is('img') ) {				e.preventDefault();			}			return;		}		if ( !( $.fancybox.isMobile && ( isScrollable( self.$target ) || isScrollable( self.$target.parent() ) ) ) ) {			e.preventDefault();		}		self.canvasWidth  = Math.round( current.$slide[0].clientWidth );		self.canvasHeight = Math.round( current.$slide[0].clientHeight );		self.startTime = new Date().getTime();		self.distanceX = self.distanceY = self.distance = 0;		self.isPanning = false;		self.isSwiping = false;		self.isZooming = false;		self.sliderStartPos  = self.sliderLastPos || { top: 0, left: 0 };		self.contentStartPos = $.fancybox.getTranslate( self.$content );		self.contentLastPos  = null;		if ( self.startPoints.length === 1 && !self.isZooming ) {			self.canTap = !instance.isSliding;			if ( current.type === 'image' && ( self.contentStartPos.width > self.canvasWidth + 1 || self.contentStartPos.height > self.canvasHeight + 1 ) ) {				$.fancybox.stop( self.$content );				self.$content.css( 'transition-duration', '0ms' );				self.isPanning = true;			} else {				self.isSwiping = true;			}			self.$container.addClass('fancybox-controls--isGrabbing');		}		if ( self.startPoints.length === 2 && !instance.isAnimating && !current.hasError && current.type === 'image' && ( current.isLoaded || current.$ghost ) ) {			self.isZooming = true;			self.isSwiping = false;			self.isPanning = false;			$.fancybox.stop( self.$content );			self.$content.css( 'transition-duration', '0ms' );			self.centerPointStartX = ( ( self.startPoints[0].x + self.startPoints[1].x ) * 0.5 ) - $(window).scrollLeft();			self.centerPointStartY = ( ( self.startPoints[0].y + self.startPoints[1].y ) * 0.5 ) - $(window).scrollTop();			self.percentageOfImageAtPinchPointX = ( self.centerPointStartX - self.contentStartPos.left ) / self.contentStartPos.width;			self.percentageOfImageAtPinchPointY = ( self.centerPointStartY - self.contentStartPos.top  ) / self.contentStartPos.height;			self.startDistanceBetweenFingers = distance( self.startPoints[0], self.startPoints[1] );		}	};	Guestures.prototype.ontouchmove = function( e ) {		var self = this;		self.newPoints = pointers( e );		if ( $.fancybox.isMobile && ( isScrollable( self.$target ) || isScrollable( self.$target.parent() ) ) ) {			e.stopPropagation();			self.canTap = false;			return;		}		if ( !( self.instance.current.opts.touch || self.instance.canPan() ) || !self.newPoints || !self.newPoints.length ) {			return;		}		self.distanceX = distance( self.newPoints[0], self.startPoints[0], 'x' );		self.distanceY = distance( self.newPoints[0], self.startPoints[0], 'y' );		self.distance = distance( self.newPoints[0], self.startPoints[0] );		// Skip false ontouchmove events (Chrome)		if ( self.distance > 0 ) {			if ( !( self.$target.is( self.$stage ) || self.$stage.find( self.$target ).length ) ) {				return;			}			e.stopPropagation();			e.preventDefault();			if ( self.isSwiping ) {				self.onSwipe();			} else if ( self.isPanning ) {				self.onPan();			} else if ( self.isZooming ) {				self.onZoom();			}		}	};	Guestures.prototype.onSwipe = function() {		var self = this;		var swiping = self.isSwiping;		var left    = self.sliderStartPos.left || 0;		var angle;		if ( swiping === true ) {			if ( Math.abs( self.distance ) > 10 )  {				self.canTap = false;				if ( self.instance.group.length < 2 && self.instance.opts.touch.vertical ) {					self.isSwiping  = 'y';				} else if ( self.instance.isSliding || self.instance.opts.touch.vertical === false || ( self.instance.opts.touch.vertical === 'auto' && $( window ).width() > 800 ) ) {					self.isSwiping  = 'x';				} else {					angle = Math.abs( Math.atan2( self.distanceY, self.distanceX ) * 180 / Math.PI );					self.isSwiping = ( angle > 45 && angle < 135 ) ? 'y' : 'x';				}				self.instance.isSliding = self.isSwiping;				// Reset points to avoid jumping, because we dropped first swipes to calculate the angle				self.startPoints = self.newPoints;				$.each(self.instance.slides, function( index, slide ) {					$.fancybox.stop( slide.$slide );					slide.$slide.css( 'transition-duration', '0ms' );					slide.inTransition = false;					if ( slide.pos === self.instance.current.pos ) {						self.sliderStartPos.left = $.fancybox.getTranslate( slide.$slide ).left;					}				});				//self.instance.current.isMoved = true;				// Stop slideshow				if ( self.instance.SlideShow && self.instance.SlideShow.isActive ) {					self.instance.SlideShow.stop();				}			}		} else {			if ( swiping == 'x' ) {				// Sticky edges				if ( self.distanceX > 0 && ( self.instance.group.length < 2 || ( self.instance.current.index === 0 && !self.instance.current.opts.loop ) ) ) {					left = left + Math.pow( self.distanceX, 0.8 );				} else if ( self.distanceX < 0 && ( self.instance.group.length < 2 || ( self.instance.current.index === self.instance.group.length - 1 && !self.instance.current.opts.loop ) ) ) {					left = left - Math.pow( -self.distanceX, 0.8 );				} else {					left = left + self.distanceX;				}			}			self.sliderLastPos = {				top  : swiping == 'x' ? 0 : self.sliderStartPos.top + self.distanceY,				left : left			};			if ( self.requestId ) {				cancelAFrame( self.requestId );				self.requestId = null;			}			self.requestId = requestAFrame(function() {				if ( self.sliderLastPos ) {					$.each(self.instance.slides, function( index, slide ) {						var pos = slide.pos - self.instance.currPos;						$.fancybox.setTranslate( slide.$slide, {							top  : self.sliderLastPos.top,							left : self.sliderLastPos.left + ( pos * self.canvasWidth ) + ( pos * slide.opts.gutter )						});					});					self.$container.addClass( 'fancybox-is-sliding' );				}			});		}	};	Guestures.prototype.onPan = function() {		var self = this;		var newOffsetX, newOffsetY, newPos;		self.canTap = false;		if ( self.contentStartPos.width > self.canvasWidth ) {			newOffsetX = self.contentStartPos.left + self.distanceX;		} else {			newOffsetX = self.contentStartPos.left;		}		newOffsetY = self.contentStartPos.top + self.distanceY;		newPos = self.limitMovement( newOffsetX, newOffsetY, self.contentStartPos.width, self.contentStartPos.height );		newPos.scaleX = self.contentStartPos.scaleX;		newPos.scaleY = self.contentStartPos.scaleY;		self.contentLastPos = newPos;		if ( self.requestId ) {			cancelAFrame( self.requestId );			self.requestId = null;		}		self.requestId = requestAFrame(function() {			$.fancybox.setTranslate( self.$content, self.contentLastPos );		});	};	// Make panning sticky to the edges	Guestures.prototype.limitMovement = function( newOffsetX, newOffsetY, newWidth, newHeight ) {		var self = this;		var minTranslateX, minTranslateY, maxTranslateX, maxTranslateY;		var canvasWidth  = self.canvasWidth;		var canvasHeight = self.canvasHeight;		var currentOffsetX = self.contentStartPos.left;		var currentOffsetY = self.contentStartPos.top;		var distanceX = self.distanceX;		var distanceY = self.distanceY;		// Slow down proportionally to traveled distance		minTranslateX = Math.max(0, canvasWidth  * 0.5 - newWidth  * 0.5 );		minTranslateY = Math.max(0, canvasHeight * 0.5 - newHeight * 0.5 );		maxTranslateX = Math.min( canvasWidth  - newWidth,  canvasWidth  * 0.5 - newWidth  * 0.5 );		maxTranslateY = Math.min( canvasHeight - newHeight, canvasHeight * 0.5 - newHeight * 0.5 );		if ( newWidth > canvasWidth ) {			//   ->			if ( distanceX > 0 && newOffsetX > minTranslateX ) {				newOffsetX = minTranslateX - 1 + Math.pow( -minTranslateX + currentOffsetX + distanceX, 0.8 ) || 0;			}			//    <-			if ( distanceX  < 0 && newOffsetX < maxTranslateX ) {				newOffsetX = maxTranslateX + 1 - Math.pow( maxTranslateX - currentOffsetX - distanceX, 0.8 ) || 0;			}		}		if ( newHeight > canvasHeight ) {			//   \/			if ( distanceY > 0 && newOffsetY > minTranslateY ) {				newOffsetY = minTranslateY - 1 + Math.pow(-minTranslateY + currentOffsetY + distanceY, 0.8 ) || 0;			}			//   /\			if ( distanceY < 0 && newOffsetY < maxTranslateY ) {				newOffsetY = maxTranslateY + 1 - Math.pow ( maxTranslateY - currentOffsetY - distanceY, 0.8 ) || 0;			}		}		return {			top  : newOffsetY,			left : newOffsetX		};	};	Guestures.prototype.limitPosition = function( newOffsetX, newOffsetY, newWidth, newHeight ) {		var self = this;		var canvasWidth  = self.canvasWidth;		var canvasHeight = self.canvasHeight;		if ( newWidth > canvasWidth ) {			newOffsetX = newOffsetX > 0 ? 0 : newOffsetX;			newOffsetX = newOffsetX < canvasWidth - newWidth ? canvasWidth - newWidth : newOffsetX;		} else {			// Center horizontally			newOffsetX = Math.max( 0, canvasWidth / 2 - newWidth / 2 );		}		if ( newHeight > canvasHeight ) {			newOffsetY = newOffsetY > 0 ? 0 : newOffsetY;			newOffsetY = newOffsetY < canvasHeight - newHeight ? canvasHeight - newHeight : newOffsetY;		} else {			// Center vertically			newOffsetY = Math.max( 0, canvasHeight / 2 - newHeight / 2 );		}		return {			top  : newOffsetY,			left : newOffsetX		};	};	Guestures.prototype.onZoom = function() {		var self = this;		// Calculate current distance between points to get pinch ratio and new width and height		var currentWidth  = self.contentStartPos.width;		var currentHeight = self.contentStartPos.height;		var currentOffsetX = self.contentStartPos.left;		var currentOffsetY = self.contentStartPos.top;		var endDistanceBetweenFingers = distance( self.newPoints[0], self.newPoints[1] );		var pinchRatio = endDistanceBetweenFingers / self.startDistanceBetweenFingers;		var newWidth  = Math.floor( currentWidth  * pinchRatio );		var newHeight = Math.floor( currentHeight * pinchRatio );		// This is the translation due to pinch-zooming		var translateFromZoomingX = (currentWidth  - newWidth)  * self.percentageOfImageAtPinchPointX;		var translateFromZoomingY = (currentHeight - newHeight) * self.percentageOfImageAtPinchPointY;		//Point between the two touches		var centerPointEndX = ((self.newPoints[0].x + self.newPoints[1].x) / 2) - $(window).scrollLeft();		var centerPointEndY = ((self.newPoints[0].y + self.newPoints[1].y) / 2) - $(window).scrollTop();		// And this is the translation due to translation of the centerpoint		// between the two fingers		var translateFromTranslatingX = centerPointEndX - self.centerPointStartX;		var translateFromTranslatingY = centerPointEndY - self.centerPointStartY;		// The new offset is the old/current one plus the total translation		var newOffsetX = currentOffsetX + ( translateFromZoomingX + translateFromTranslatingX );		var newOffsetY = currentOffsetY + ( translateFromZoomingY + translateFromTranslatingY );		var newPos = {			top    : newOffsetY,			left   : newOffsetX,			scaleX : self.contentStartPos.scaleX * pinchRatio,			scaleY : self.contentStartPos.scaleY * pinchRatio		};		self.canTap = false;		self.newWidth  = newWidth;		self.newHeight = newHeight;		self.contentLastPos = newPos;		if ( self.requestId ) {			cancelAFrame( self.requestId );			self.requestId = null;		}		self.requestId = requestAFrame(function() {			$.fancybox.setTranslate( self.$content, self.contentLastPos );		});	};	Guestures.prototype.ontouchend = function( e ) {		var self = this;		var dMs  = Math.max( (new Date().getTime() ) - self.startTime, 1);		var swiping = self.isSwiping;		var panning = self.isPanning;		var zooming = self.isZooming;		self.endPoints = pointers( e );		self.$container.removeClass( 'fancybox-controls--isGrabbing' );		$(document).off( '.fb.touch' );		if ( self.requestId ) {			cancelAFrame( self.requestId );			self.requestId = null;		}		self.isSwiping = false;		self.isPanning = false;		self.isZooming = false;		if ( self.canTap )  {			return self.onTap( e );		}		self.speed = 366;		// Speed in px/ms		self.velocityX = self.distanceX / dMs * 0.5;		self.velocityY = self.distanceY / dMs * 0.5;		self.speedX = Math.max( self.speed * 0.5, Math.min( self.speed * 1.5, ( 1 / Math.abs( self.velocityX ) ) * self.speed ) );		if ( panning ) {			self.endPanning();		} else if ( zooming ) {			self.endZooming();		} else {			self.endSwiping( swiping );		}		return;	};	Guestures.prototype.endSwiping = function( swiping ) {		var self = this;		var ret = false;		self.instance.isSliding = false;		self.sliderLastPos      = null;		// Close if swiped vertically / navigate if horizontally		if ( swiping == 'y' && Math.abs( self.distanceY ) > 50 ) {			// Continue vertical movement			$.fancybox.animate( self.instance.current.$slide, {				top     : self.sliderStartPos.top + self.distanceY + ( self.velocityY * 150 ),				opacity : 0			}, 150 );			ret = self.instance.close( true, 300 );		} else if ( swiping == 'x' && self.distanceX > 50 && self.instance.group.length > 1 ) {			ret = self.instance.previous( self.speedX );		} else if ( swiping == 'x' && self.distanceX < -50  && self.instance.group.length > 1 ) {			ret = self.instance.next( self.speedX );		}		if ( ret === false && ( swiping == 'x' || swiping == 'y' ) ) {			self.instance.jumpTo( self.instance.current.index, 150 );		}		self.$container.removeClass( 'fancybox-is-sliding' );	};	// Limit panning from edges	// ========================	Guestures.prototype.endPanning = function() {		var self = this;		var newOffsetX, newOffsetY, newPos;		if ( !self.contentLastPos ) {			return;		}		if ( self.instance.current.opts.touch.momentum === false ) {			newOffsetX = self.contentLastPos.left;			newOffsetY = self.contentLastPos.top;		} else {			// Continue movement			newOffsetX = self.contentLastPos.left + ( self.velocityX * self.speed );			newOffsetY = self.contentLastPos.top  + ( self.velocityY * self.speed );		}		newPos = self.limitPosition( newOffsetX, newOffsetY, self.contentStartPos.width, self.contentStartPos.height );		 newPos.width  = self.contentStartPos.width;		 newPos.height = self.contentStartPos.height;		$.fancybox.animate( self.$content, newPos, 330 );	};	Guestures.prototype.endZooming = function() {		var self = this;		var current = self.instance.current;		var newOffsetX, newOffsetY, newPos, reset;		var newWidth  = self.newWidth;		var newHeight = self.newHeight;		if ( !self.contentLastPos ) {			return;		}		newOffsetX = self.contentLastPos.left;		newOffsetY = self.contentLastPos.top;		reset = {		   	top    : newOffsetY,		   	left   : newOffsetX,		   	width  : newWidth,		   	height : newHeight,			scaleX : 1,			scaleY : 1	   };	   // Reset scalex/scaleY values; this helps for perfomance and does not break animation	   $.fancybox.setTranslate( self.$content, reset );		if ( newWidth < self.canvasWidth && newHeight < self.canvasHeight ) {			self.instance.scaleToFit( 150 );		} else if ( newWidth > current.width || newHeight > current.height ) {			self.instance.scaleToActual( self.centerPointStartX, self.centerPointStartY, 150 );		} else {			newPos = self.limitPosition( newOffsetX, newOffsetY, newWidth, newHeight );			// Switch from scale() to width/height or animation will not work correctly			$.fancybox.setTranslate( self.content, $.fancybox.getTranslate( self.$content ) );			$.fancybox.animate( self.$content, newPos, 150 );		}	};	Guestures.prototype.onTap = function(e) {		var self    = this;		var $target = $( e.target );		var instance = self.instance;		var current  = instance.current;		var endPoints = ( e && pointers( e ) ) || self.startPoints;		var tapX = endPoints[0] ? endPoints[0].x - self.$stage.offset().left : 0;		var tapY = endPoints[0] ? endPoints[0].y - self.$stage.offset().top  : 0;		var where;		var process = function ( prefix ) {			var action = current.opts[ prefix ];			if ( $.isFunction( action ) ) {				action = action.apply( instance, [ current, e ] );			}			if ( !action) {				return;			}			switch ( action ) {				case "close" :					instance.close( self.startEvent );				break;				case "toggleControls" :					instance.toggleControls( true );				break;				case "next" :					instance.next();				break;				case "nextOrClose" :					if ( instance.group.length > 1 ) {						instance.next();					} else {						instance.close( self.startEvent );					}				break;				case "zoom" :					if ( current.type == 'image' && ( current.isLoaded || current.$ghost ) ) {						if ( instance.canPan() ) {							instance.scaleToFit();						} else if ( instance.isScaledDown() ) {							instance.scaleToActual( tapX, tapY );						} else if ( instance.group.length < 2 ) {							instance.close( self.startEvent );						}					}				break;			}		};		// Ignore right click		if ( e.originalEvent && e.originalEvent.button == 2 ) {			return;		}		// Skip if current slide is not in the center		if ( instance.isSliding ) {			return;		}		// Skip if clicked on the scrollbar		if ( tapX > $target[0].clientWidth + $target.offset().left ) {			return;		}		// Check where is clicked		if ( $target.is( '.fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container' ) ) {			where = 'Outside';		} else if ( $target.is( '.fancybox-slide' ) ) {			where = 'Slide';		} else if  ( instance.current.$content && instance.current.$content.has( e.target ).length ) {		 	where = 'Content';		} else {			return;		}		// Check if this is a double tap		if ( self.tapped ) {			// Stop previously created single tap			clearTimeout( self.tapped );			self.tapped = null;			// Skip if distance between taps is too big			if ( Math.abs( tapX - self.tapX ) > 50 || Math.abs( tapY - self.tapY ) > 50 || instance.isSliding ) {				return this;			}			// OK, now we assume that this is a double-tap			process( 'dblclick' + where );		} else {			// Single tap will be processed if user has not clicked second time within 300ms			// or there is no need to wait for double-tap			self.tapX = tapX;			self.tapY = tapY;			if ( current.opts[ 'dblclick' + where ] && current.opts[ 'dblclick' + where ] !== current.opts[ 'click' + where ] ) {				self.tapped = setTimeout(function() {					self.tapped = null;					process( 'click' + where );				}, 300);			} else {				process( 'click' + where );			}		}		return this;	};	$(document).on('onActivate.fb', function (e, instance) {		if ( instance && !instance.Guestures ) {			instance.Guestures = new Guestures( instance );		}	});	$(document).on('beforeClose.fb', function (e, instance) {		if ( instance && instance.Guestures ) {			instance.Guestures.destroy();		}	});}(window, document, window.jQuery));// ==========================================================================//// SlideShow// Enables slideshow functionality//// Example of usage:// $.fancybox.getInstance().SlideShow.start()//// ==========================================================================;(function (document, $) {	'use strict';	var SlideShow = function( instance ) {		this.instance = instance;		this.init();	};	$.extend( SlideShow.prototype, {		timer    : null,		isActive : false,		$button  : null,		speed    : 3000,		init : function() {			var self = this;			self.$button = self.instance.$refs.toolbar.find('[data-fancybox-play]').on('click', function() {				self.toggle();			});			if ( self.instance.group.length < 2 || !self.instance.group[ self.instance.currIndex ].opts.slideShow ) {				self.$button.hide();			}		},		set : function() {			var self = this;			// Check if reached last element			if ( self.instance && self.instance.current && (self.instance.current.opts.loop || self.instance.currIndex < self.instance.group.length - 1 )) {				self.timer = setTimeout(function() {					self.instance.next();				}, self.instance.current.opts.slideShow.speed || self.speed);			} else {				self.stop();				self.instance.idleSecondsCounter = 0;				self.instance.showControls();			}		},		clear : function() {			var self = this;			clearTimeout( self.timer );			self.timer = null;		},		start : function() {			var self = this;			var current = self.instance.current;			if ( self.instance && current && ( current.opts.loop || current.index < self.instance.group.length - 1 )) {				self.isActive = true;				self.$button					.attr( 'title', current.opts.i18n[ current.opts.lang ].PLAY_STOP )					.addClass( 'fancybox-button--pause' );				if ( current.isComplete ) {					self.set();				}			}		},		stop : function() {			var self = this;			var current = self.instance.current;			self.clear();			self.$button				.attr( 'title', current.opts.i18n[ current.opts.lang ].PLAY_START )				.removeClass( 'fancybox-button--pause' );			self.isActive = false;		},		toggle : function() {			var self = this;			if ( self.isActive ) {				self.stop();			} else {				self.start();			}		}	});	$(document).on({		'onInit.fb' : function(e, instance) {			if ( instance && !instance.SlideShow ) {				instance.SlideShow = new SlideShow( instance );			}		},		'beforeShow.fb' : function(e, instance, current, firstRun) {			var SlideShow = instance && instance.SlideShow;			if ( firstRun ) {				if ( SlideShow && current.opts.slideShow.autoStart ) {					SlideShow.start();				}			} else if ( SlideShow && SlideShow.isActive )  {				SlideShow.clear();			}		},		'afterShow.fb' : function(e, instance, current) {			var SlideShow = instance && instance.SlideShow;			if ( SlideShow && SlideShow.isActive ) {				SlideShow.set();			}		},		'afterKeydown.fb' : function(e, instance, current, keypress, keycode) {			var SlideShow = instance && instance.SlideShow;			// "P" or Spacebar			if ( SlideShow && current.opts.slideShow && ( keycode === 80 || keycode === 32 ) && !$(document.activeElement).is( 'button,a,input' ) ) {				keypress.preventDefault();				SlideShow.toggle();			}		},		'beforeClose.fb onDeactivate.fb' : function(e, instance) {			var SlideShow = instance && instance.SlideShow;			if ( SlideShow ) {				SlideShow.stop();			}		}	});	// Page Visibility API to pause slideshow when window is not active	$(document).on("visibilitychange", function() {		var instance  = $.fancybox.getInstance();		var SlideShow = instance && instance.SlideShow;		if ( SlideShow && SlideShow.isActive ) {			if ( document.hidden ) {				SlideShow.clear();			} else {				SlideShow.set();			}		}	});}(document, window.jQuery));// ==========================================================================//// FullScreen// Adds fullscreen functionality//// ==========================================================================;(function (document, $) {	'use strict';	// Collection of methods supported by user browser	var fn = (function () {		var fnMap = [			[				'requestFullscreen',				'exitFullscreen',				'fullscreenElement',				'fullscreenEnabled',				'fullscreenchange',				'fullscreenerror'			],			// new WebKit			[				'webkitRequestFullscreen',				'webkitExitFullscreen',				'webkitFullscreenElement',				'webkitFullscreenEnabled',				'webkitfullscreenchange',				'webkitfullscreenerror'			],			// old WebKit (Safari 5.1)			[				'webkitRequestFullScreen',				'webkitCancelFullScreen',				'webkitCurrentFullScreenElement',				'webkitCancelFullScreen',				'webkitfullscreenchange',				'webkitfullscreenerror'			],			[				'mozRequestFullScreen',				'mozCancelFullScreen',				'mozFullScreenElement',				'mozFullScreenEnabled',				'mozfullscreenchange',				'mozfullscreenerror'			],			[				'msRequestFullscreen',				'msExitFullscreen',				'msFullscreenElement',				'msFullscreenEnabled',				'MSFullscreenChange',				'MSFullscreenError'			]		];		var val;		var ret = {};		var i, j;		for ( i = 0; i < fnMap.length; i++ ) {			val = fnMap[ i ];			if ( val && val[ 1 ] in document ) {				for ( j = 0; j < val.length; j++ ) {					ret[ fnMap[ 0 ][ j ] ] = val[ j ];				}				return ret;			}		}		return false;	})();	// If browser does not have Full Screen API, then simply unset default button template and stop	if ( !fn ) {		$.fancybox.defaults.btnTpl.fullScreen = false;		return;	}	var FullScreen = {		request : function ( elem ) {			elem = elem || document.documentElement;			elem[ fn.requestFullscreen ]( elem.ALLOW_KEYBOARD_INPUT );		},		exit : function () {			document[ fn.exitFullscreen ]();		},		toggle : function ( elem ) {			elem = elem || document.documentElement;			if ( this.isFullscreen() ) {				this.exit();			} else {				this.request( elem );			}		},		isFullscreen : function()  {			return Boolean( document[ fn.fullscreenElement ] );		},		enabled : function()  {			return Boolean( document[ fn.fullscreenEnabled ] );		}	};	$(document).on({		'onInit.fb' : function(e, instance) {			var $container;			var $button = instance.$refs.toolbar.find('[data-fancybox-fullscreen]');			if ( instance && !instance.FullScreen && instance.group[ instance.currIndex ].opts.fullScreen ) {				$container = instance.$refs.container;				$container.on('click.fb-fullscreen', '[data-fancybox-fullscreen]', function(e) {					e.stopPropagation();					e.preventDefault();					FullScreen.toggle( $container[ 0 ] );				});				if ( instance.opts.fullScreen && instance.opts.fullScreen.autoStart === true ) {					FullScreen.request( $container[ 0 ] );				}				// Expose API				instance.FullScreen = FullScreen;			} else {				$button.hide();			}		},		'afterKeydown.fb' : function(e, instance, current, keypress, keycode) {			// "P" or Spacebar			if ( instance && instance.FullScreen && keycode === 70 ) {				keypress.preventDefault();				instance.FullScreen.toggle( instance.$refs.container[ 0 ] );			}		},		'beforeClose.fb' : function( instance ) {			if ( instance && instance.FullScreen ) {				FullScreen.exit();			}		}	});	$(document).on(fn.fullscreenchange, function() {		var instance = $.fancybox.getInstance();		// If image is zooming, then force to stop and reposition properly		if ( instance.current && instance.current.type === 'image' && instance.isAnimating ) {			instance.current.$content.css( 'transition', 'none' );			instance.isAnimating = false;			instance.update( true, true, 0 );		}	});}(document, window.jQuery));// ==========================================================================//// Thumbs// Displays thumbnails in a grid//// ==========================================================================;(function (document, $) {	'use strict';	var FancyThumbs = function( instance ) {		this.instance = instance;		this.init();	};	$.extend( FancyThumbs.prototype, {		$button		: null,		$grid		: null,		$list		: null,		isVisible	: false,		init : function() {			var self = this;			var first  = self.instance.group[0],				second = self.instance.group[1];			self.$button = self.instance.$refs.toolbar.find( '[data-fancybox-thumbs]' );			if ( self.instance.group.length > 1 && self.instance.group[ self.instance.currIndex ].opts.thumbs && (		    		( first.type == 'image'  || first.opts.thumb  || first.opts.$thumb ) &&		    		( second.type == 'image' || second.opts.thumb || second.opts.$thumb )			)) {				self.$button.on('click', function() {					self.toggle();				});				self.isActive = true;			} else {				self.$button.hide();				self.isActive = false;			}		},		create : function() {			var instance = this.instance,				list,				src;			this.$grid = $('<div class="fancybox-thumbs"></div>').appendTo( instance.$refs.container );			list = '<ul>';			$.each(instance.group, function( i, item ) {				src = item.opts.thumb || ( item.opts.$thumb ? item.opts.$thumb.attr('src') : null );				if ( !src && item.type === 'image' ) {					src = item.src;				}				if ( src && src.length ) {					list += '<li data-index="' + i + '"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="' + src + '" /></li>';				}			});			list += '</ul>';			this.$list = $( list ).appendTo( this.$grid ).on('click', 'li', function() {				instance.jumpTo( $(this).data('index') );			});			this.$list.find('img').hide().one('load', function() {				var $parent		= $(this).parent().removeClass('fancybox-thumbs-loading'),					thumbWidth	= $parent.outerWidth(),					thumbHeight	= $parent.outerHeight(),					width,					height,					widthRatio,					heightRatio;				width  = this.naturalWidth	|| this.width;				height = this.naturalHeight	|| this.height;				//Calculate thumbnail width/height and center it				widthRatio  = width  / thumbWidth;				heightRatio = height / thumbHeight;				if (widthRatio >= 1 && heightRatio >= 1) {					if (widthRatio > heightRatio) {						width  = width / heightRatio;						height = thumbHeight;					} else {						width  = thumbWidth;						height = height / widthRatio;					}				}				$(this).css({					width         : Math.floor(width),					height        : Math.floor(height),					'margin-top'  : Math.min( 0, Math.floor(thumbHeight * 0.3 - height * 0.3 ) ),					'margin-left' : Math.min( 0, Math.floor(thumbWidth  * 0.5 - width  * 0.5 ) )				}).show();			})			.each(function() {				this.src = $( this ).data( 'src' );			});		},		focus : function() {			if ( this.instance.current ) {				this.$list					.children()					.removeClass('fancybox-thumbs-active')					.filter('[data-index="' + this.instance.current.index  + '"]')					.addClass('fancybox-thumbs-active')					.focus();			}		},		close : function() {			this.$grid.hide();		},		update : function() {			this.instance.$refs.container.toggleClass( 'fancybox-show-thumbs', this.isVisible );			if ( this.isVisible ) {				if ( !this.$grid ) {					this.create();				}				this.instance.trigger( 'onThumbsShow' );				this.focus();			} else if ( this.$grid ) {				this.instance.trigger( 'onThumbsHide' );			}			// Update content position			this.instance.update();		},		hide : function() {			this.isVisible = false;			this.update();		},		show : function() {			this.isVisible = true;			this.update();		},		toggle : function() {			this.isVisible = !this.isVisible;			this.update();		}	});	$(document).on({		'onInit.fb' : function(e, instance) {			if ( instance && !instance.Thumbs ) {				instance.Thumbs = new FancyThumbs( instance );			}		},		'beforeShow.fb' : function(e, instance, item, firstRun) {			var Thumbs = instance && instance.Thumbs;			if ( !Thumbs || !Thumbs.isActive ) {				return;			}			if ( item.modal ) {				Thumbs.$button.hide();				Thumbs.hide();				return;			}			if ( firstRun && instance.opts.thumbs.autoStart === true ) {				Thumbs.show();			}			if ( Thumbs.isVisible ) {				Thumbs.focus();			}		},		'afterKeydown.fb' : function(e, instance, current, keypress, keycode) {			var Thumbs = instance && instance.Thumbs;			// "G"			if ( Thumbs && Thumbs.isActive && keycode === 71 ) {				keypress.preventDefault();				Thumbs.toggle();			}		},		'beforeClose.fb' : function( e, instance ) {			var Thumbs = instance && instance.Thumbs;			if ( Thumbs && Thumbs.isVisible && instance.opts.thumbs.hideOnClose !== false ) {				Thumbs.close();			}		}	});}(document, window.jQuery));// ==========================================================================//// Hash// Enables linking to each modal//// ==========================================================================;(function (document, window, $) {	'use strict';	// Simple $.escapeSelector polyfill (for jQuery prior v3)	if ( !$.escapeSelector ) {		$.escapeSelector = function( sel ) {			var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;			var fcssescape = function( ch, asCodePoint ) {				if ( asCodePoint ) {					// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER					if ( ch === "\0" ) {						return "\uFFFD";					}					// Control characters and (dependent upon position) numbers get escaped as code points					return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";				}				// Other potentially-special ASCII characters get backslash-escaped				return "\\" + ch;			};			return ( sel + "" ).replace( rcssescape, fcssescape );		};	}	// Variable containing last hash value set by fancyBox	// It will be used to determine if fancyBox needs to close after hash change is detected    var currentHash = null;	// Throtlling the history change	var timerID = null;	// Get info about gallery name and current index from url    function parseUrl() {        var hash    = window.location.hash.substr( 1 );        var rez     = hash.split( '-' );        var index   = rez.length > 1 && /^\+?\d+$/.test( rez[ rez.length - 1 ] ) ? parseInt( rez.pop( -1 ), 10 ) || 1 : 1;        var gallery = rez.join( '-' );		// Index is starting from 1		if ( index < 1 ) {			index = 1;		}        return {            hash    : hash,            index   : index,            gallery : gallery        };    }	// Trigger click evnt on links to open new fancyBox instance	function triggerFromUrl( url ) {		var $el;        if ( url.gallery !== '' ) {			// If we can find element matching 'data-fancybox' atribute, then trigger click event for that ..			$el = $( "[data-fancybox='" + $.escapeSelector( url.gallery ) + "']" ).eq( url.index - 1 );            if ( $el.length ) {				$el.trigger( 'click' );			} else {				// .. if not, try finding element by ID				$( "#" + $.escapeSelector( url.gallery ) + "" ).trigger( 'click' );			}        }	}	// Get gallery name from current instance	function getGallery( instance ) {		var opts;		if ( !instance ) {			return false;		}		opts = instance.current ? instance.current.opts : instance.opts;		return opts.$orig ? opts.$orig.data( 'fancybox' ) : ( opts.hash || '' );	}	// Star when DOM becomes ready    $(function() {		// Small delay is used to allow other scripts to process "dom ready" event		setTimeout(function() {			// Check if this module is not disabled			if ( $.fancybox.defaults.hash === false ) {				return;			}			// Update hash when opening/closing fancyBox		    $(document).on({				'onInit.fb' : function( e, instance ) {					var url, gallery;					if ( instance.group[ instance.currIndex ].opts.hash === false ) {						return;					}					url     = parseUrl();					gallery = getGallery( instance );					// Make sure gallery start index matches index from hash					if ( gallery && url.gallery && gallery == url.gallery ) {						instance.currIndex = url.index - 1;					}				},				'beforeShow.fb' : function( e, instance, current, firstRun ) {					var gallery;					if ( current.opts.hash === false ) {						return;					}		            gallery = getGallery( instance );		            // Update window hash		            if ( gallery && gallery !== '' ) {						if ( window.location.hash.indexOf( gallery ) < 0 ) {			                instance.opts.origHash = window.location.hash;			            }						currentHash = gallery + ( instance.group.length > 1 ? '-' + ( current.index + 1 ) : '' );						if ( 'replaceState' in window.history ) {							if ( timerID ) {								clearTimeout( timerID );							}							timerID = setTimeout(function() {								window.history[ firstRun ? 'pushState' : 'replaceState' ]( {} , document.title, window.location.pathname + window.location.search + '#' +  currentHash );								timerID = null;							}, 300);						} else {							window.location.hash = currentHash;						}		            }		        },				'beforeClose.fb' : function( e, instance, current ) {					var gallery, origHash;					if ( timerID ) {						clearTimeout( timerID );					}					if ( current.opts.hash === false ) {						return;					}					gallery  = getGallery( instance );					origHash = instance && instance.opts.origHash ? instance.opts.origHash : '';		            // Remove hash from location bar		            if ( gallery && gallery !== '' ) {		                if ( 'replaceState' in history ) {							window.history.replaceState( {} , document.title, window.location.pathname + window.location.search + origHash );		                } else {							window.location.hash = origHash;							// Keep original scroll position							$( window ).scrollTop( instance.scrollTop ).scrollLeft( instance.scrollLeft );		                }		            }					currentHash = null;		        }		    });			// Check if need to close after url has changed			$(window).on('hashchange.fb', function() {				var url = parseUrl();				if ( $.fancybox.getInstance() ) {					if ( currentHash && currentHash !== url.gallery + '-' + url.index && !( url.index === 1 && currentHash == url.gallery ) ) {						currentHash = null;						$.fancybox.close();					}				} else if ( url.gallery !== '' ) {					triggerFromUrl( url );				}			});			// If navigating away from current page			$(window).one('unload.fb popstate.fb', function() {				$.fancybox.getInstance( 'close', true, 0 );			});			// Check current hash and trigger click event on matching element to start fancyBox, if needed			triggerFromUrl( parseUrl() );		}, 50);    });}(document, window, window.jQuery));/*! * Masonry PACKAGED v4.2.0 * Cascading grid layout library * http://masonry.desandro.com * MIT License * by David DeSandro *//** * Bridget makes jQuery widgets * v2.0.1 * MIT license *//* jshint browser: true, strict: true, undef: true, unused: true */( function( window, factory ) {  // universal module definition  /*jshint strict: false */ /* globals define, module, require */  if ( typeof define == 'function' && define.amd ) {    // AMD    define( 'jquery-bridget/jquery-bridget',[ 'jquery' ], function( jQuery ) {      return factory( window, jQuery );    });  } else if ( typeof module == 'object' && module.exports ) {    // CommonJS    module.exports = factory(      window,      require('jquery')    );  } else {    // browser global    window.jQueryBridget = factory(      window,      window.jQuery    );  }}( window, function factory( window, jQuery ) {'use strict';// ----- utils ----- //var arraySlice = Array.prototype.slice;// helper function for logging errors// $.error breaks jQuery chainingvar console = window.console;var logError = typeof console == 'undefined' ? function() {} :  function( message ) {    console.error( message );  };// ----- jQueryBridget ----- //function jQueryBridget( namespace, PluginClass, $ ) {  $ = $ || jQuery || window.jQuery;  if ( !$ ) {    return;  }  // add option method -> $().plugin('option', {...})  if ( !PluginClass.prototype.option ) {    // option setter    PluginClass.prototype.option = function( opts ) {      // bail out if not an object      if ( !$.isPlainObject( opts ) ){        return;      }      this.options = $.extend( true, this.options, opts );    };  }  // make jQuery plugin  $.fn[ namespace ] = function( arg0 /*, arg1 */ ) {    if ( typeof arg0 == 'string' ) {      // method call $().plugin( 'methodName', { options } )      // shift arguments by 1      var args = arraySlice.call( arguments, 1 );      return methodCall( this, arg0, args );    }    // just $().plugin({ options })    plainCall( this, arg0 );    return this;  };  // $().plugin('methodName')  function methodCall( $elems, methodName, args ) {    var returnValue;    var pluginMethodStr = '$().' + namespace + '("' + methodName + '")';    $elems.each( function( i, elem ) {      // get instance      var instance = $.data( elem, namespace );      if ( !instance ) {        logError( namespace + ' not initialized. Cannot call methods, i.e. ' +          pluginMethodStr );        return;      }      var method = instance[ methodName ];      if ( !method || methodName.charAt(0) == '_' ) {        logError( pluginMethodStr + ' is not a valid method' );        return;      }      // apply method, get return value      var value = method.apply( instance, args );      // set return value if value is returned, use only first value      returnValue = returnValue === undefined ? value : returnValue;    });    return returnValue !== undefined ? returnValue : $elems;  }  function plainCall( $elems, options ) {    $elems.each( function( i, elem ) {      var instance = $.data( elem, namespace );      if ( instance ) {        // set options & init        instance.option( options );        instance._init();      } else {        // initialize new instance        instance = new PluginClass( elem, options );        $.data( elem, namespace, instance );      }    });  }  updateJQuery( $ );}// ----- updateJQuery ----- //// set $.bridget for v1 backwards compatibilityfunction updateJQuery( $ ) {  if ( !$ || ( $ && $.bridget ) ) {    return;  }  $.bridget = jQueryBridget;}updateJQuery( jQuery || window.jQuery );// -----  ----- //return jQueryBridget;}));/** * EvEmitter v1.0.3 * Lil' event emitter * MIT License *//* jshint unused: true, undef: true, strict: true */( function( global, factory ) {  // universal module definition  /* jshint strict: false */ /* globals define, module, window */  if ( typeof define == 'function' && define.amd ) {    // AMD - RequireJS    define( 'ev-emitter/ev-emitter',factory );  } else if ( typeof module == 'object' && module.exports ) {    // CommonJS - Browserify, Webpack    module.exports = factory();  } else {    // Browser globals    global.EvEmitter = factory();  }}( typeof window != 'undefined' ? window : this, function() {function EvEmitter() {}var proto = EvEmitter.prototype;proto.on = function( eventName, listener ) {  if ( !eventName || !listener ) {    return;  }  // set events hash  var events = this._events = this._events || {};  // set listeners array  var listeners = events[ eventName ] = events[ eventName ] || [];  // only add once  if ( listeners.indexOf( listener ) == -1 ) {    listeners.push( listener );  }  return this;};proto.once = function( eventName, listener ) {  if ( !eventName || !listener ) {    return;  }  // add event  this.on( eventName, listener );  // set once flag  // set onceEvents hash  var onceEvents = this._onceEvents = this._onceEvents || {};  // set onceListeners object  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};  // set flag  onceListeners[ listener ] = true;  return this;};proto.off = function( eventName, listener ) {  var listeners = this._events && this._events[ eventName ];  if ( !listeners || !listeners.length ) {    return;  }  var index = listeners.indexOf( listener );  if ( index != -1 ) {    listeners.splice( index, 1 );  }  return this;};proto.emitEvent = function( eventName, args ) {  var listeners = this._events && this._events[ eventName ];  if ( !listeners || !listeners.length ) {    return;  }  var i = 0;  var listener = listeners[i];  args = args || [];  // once stuff  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];  while ( listener ) {    var isOnce = onceListeners && onceListeners[ listener ];    if ( isOnce ) {      // remove listener      // remove before trigger to prevent recursion      this.off( eventName, listener );      // unset once flag      delete onceListeners[ listener ];    }    // trigger listener    listener.apply( this, args );    // get next listener    i += isOnce ? 0 : 1;    listener = listeners[i];  }  return this;};return EvEmitter;}));/*! * getSize v2.0.2 * measure size of elements * MIT license *//*jshint browser: true, strict: true, undef: true, unused: true *//*global define: false, module: false, console: false */( function( window, factory ) {  'use strict';  if ( typeof define == 'function' && define.amd ) {    // AMD    define( 'get-size/get-size',[],function() {      return factory();    });  } else if ( typeof module == 'object' && module.exports ) {    // CommonJS    module.exports = factory();  } else {    // browser global    window.getSize = factory();  }})( window, function factory() {'use strict';// -------------------------- helpers -------------------------- //// get a number from a string, not a percentagefunction getStyleSize( value ) {  var num = parseFloat( value );  // not a percent like '100%', and a number  var isValid = value.indexOf('%') == -1 && !isNaN( num );  return isValid && num;}function noop() {}var logError = typeof console == 'undefined' ? noop :  function( message ) {    console.error( message );  };// -------------------------- measurements -------------------------- //var measurements = [  'paddingLeft',  'paddingRight',  'paddingTop',  'paddingBottom',  'marginLeft',  'marginRight',  'marginTop',  'marginBottom',  'borderLeftWidth',  'borderRightWidth',  'borderTopWidth',  'borderBottomWidth'];var measurementsLength = measurements.length;function getZeroSize() {  var size = {    width: 0,    height: 0,    innerWidth: 0,    innerHeight: 0,    outerWidth: 0,    outerHeight: 0  };  for ( var i=0; i < measurementsLength; i++ ) {    var measurement = measurements[i];    size[ measurement ] = 0;  }  return size;}// -------------------------- getStyle -------------------------- ///** * getStyle, get style of element, check for Firefox bug * https://bugzilla.mozilla.org/show_bug.cgi?id=548397 */function getStyle( elem ) {  var style = getComputedStyle( elem );  if ( !style ) {    logError( 'Style returned ' + style +      '. Are you running this code in a hidden iframe on Firefox? ' +      'See http://bit.ly/getsizebug1' );  }  return style;}// -------------------------- setup -------------------------- //var isSetup = false;var isBoxSizeOuter;/** * setup * check isBoxSizerOuter * do on first getSize() rather than on page load for Firefox bug */function setup() {  // setup once  if ( isSetup ) {    return;  }  isSetup = true;  // -------------------------- box sizing -------------------------- //  /**   * WebKit measures the outer-width on style.width on border-box elems   * IE & Firefox<29 measures the inner-width   */  var div = document.createElement('div');  div.style.width = '200px';  div.style.padding = '1px 2px 3px 4px';  div.style.borderStyle = 'solid';  div.style.borderWidth = '1px 2px 3px 4px';  div.style.boxSizing = 'border-box';  var body = document.body || document.documentElement;  body.appendChild( div );  var style = getStyle( div );  getSize.isBoxSizeOuter = isBoxSizeOuter = getStyleSize( style.width ) == 200;  body.removeChild( div );}// -------------------------- getSize -------------------------- //function getSize( elem ) {  setup();  // use querySeletor if elem is string  if ( typeof elem == 'string' ) {    elem = document.querySelector( elem );  }  // do not proceed on non-objects  if ( !elem || typeof elem != 'object' || !elem.nodeType ) {    return;  }  var style = getStyle( elem );  // if hidden, everything is 0  if ( style.display == 'none' ) {    return getZeroSize();  }  var size = {};  size.width = elem.offsetWidth;  size.height = elem.offsetHeight;  var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';  // get all measurements  for ( var i=0; i < measurementsLength; i++ ) {    var measurement = measurements[i];    var value = style[ measurement ];    var num = parseFloat( value );    // any 'auto', 'medium' value will be 0    size[ measurement ] = !isNaN( num ) ? num : 0;  }  var paddingWidth = size.paddingLeft + size.paddingRight;  var paddingHeight = size.paddingTop + size.paddingBottom;  var marginWidth = size.marginLeft + size.marginRight;  var marginHeight = size.marginTop + size.marginBottom;  var borderWidth = size.borderLeftWidth + size.borderRightWidth;  var borderHeight = size.borderTopWidth + size.borderBottomWidth;  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;  // overwrite width and height if we can get it from style  var styleWidth = getStyleSize( style.width );  if ( styleWidth !== false ) {    size.width = styleWidth +      // add padding and border unless it's already including it      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );  }  var styleHeight = getStyleSize( style.height );  if ( styleHeight !== false ) {    size.height = styleHeight +      // add padding and border unless it's already including it      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );  }  size.innerWidth = size.width - ( paddingWidth + borderWidth );  size.innerHeight = size.height - ( paddingHeight + borderHeight );  size.outerWidth = size.width + marginWidth;  size.outerHeight = size.height + marginHeight;  return size;}return getSize;});/** * matchesSelector v2.0.2 * matchesSelector( element, '.selector' ) * MIT license *//*jshint browser: true, strict: true, undef: true, unused: true */( function( window, factory ) {  /*global define: false, module: false */  'use strict';  // universal module definition  if ( typeof define == 'function' && define.amd ) {    // AMD    define( 'desandro-matches-selector/matches-selector',factory );  } else if ( typeof module == 'object' && module.exports ) {    // CommonJS    module.exports = factory();  } else {    // browser global    window.matchesSelector = factory();  }}( window, function factory() {  'use strict';  var matchesMethod = ( function() {    var ElemProto = window.Element.prototype;    // check for the standard method name first    if ( ElemProto.matches ) {      return 'matches';    }    // check un-prefixed    if ( ElemProto.matchesSelector ) {      return 'matchesSelector';    }    // check vendor prefixes    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];    for ( var i=0; i < prefixes.length; i++ ) {      var prefix = prefixes[i];      var method = prefix + 'MatchesSelector';      if ( ElemProto[ method ] ) {        return method;      }    }  })();  return function matchesSelector( elem, selector ) {    return elem[ matchesMethod ]( selector );  };}));/** * Fizzy UI utils v2.0.4 * MIT license *//*jshint browser: true, undef: true, unused: true, strict: true */( function( window, factory ) {  // universal module definition  /*jshint strict: false */ /*globals define, module, require */  if ( typeof define == 'function' && define.amd ) {    // AMD    define( 'fizzy-ui-utils/utils',[      'desandro-matches-selector/matches-selector'    ], function( matchesSelector ) {      return factory( window, matchesSelector );    });  } else if ( typeof module == 'object' && module.exports ) {    // CommonJS    module.exports = factory(      window,      require('desandro-matches-selector')    );  } else {    // browser global    window.fizzyUIUtils = factory(      window,      window.matchesSelector    );  }}( window, function factory( window, matchesSelector ) {var utils = {};// ----- extend ----- //// extends objectsutils.extend = function( a, b ) {  for ( var prop in b ) {    a[ prop ] = b[ prop ];  }  return a;};// ----- modulo ----- //utils.modulo = function( num, div ) {  return ( ( num % div ) + div ) % div;};// ----- makeArray ----- //// turn element or nodeList into an arrayutils.makeArray = function( obj ) {  var ary = [];  if ( Array.isArray( obj ) ) {    // use object if already an array    ary = obj;  } else if ( obj && typeof obj == 'object' &&    typeof obj.length == 'number' ) {    // convert nodeList to array    for ( var i=0; i < obj.length; i++ ) {      ary.push( obj[i] );    }  } else {    // array of single index    ary.push( obj );  }  return ary;};// ----- removeFrom ----- //utils.removeFrom = function( ary, obj ) {  var index = ary.indexOf( obj );  if ( index != -1 ) {    ary.splice( index, 1 );  }};// ----- getParent ----- //utils.getParent = function( elem, selector ) {  while ( elem != document.body ) {    elem = elem.parentNode;    if ( matchesSelector( elem, selector ) ) {      return elem;    }  }};// ----- getQueryElement ----- //// use element as selector stringutils.getQueryElement = function( elem ) {  if ( typeof elem == 'string' ) {    return document.querySelector( elem );  }  return elem;};// ----- handleEvent ----- //// enable .ontype to trigger from .addEventListener( elem, 'type' )utils.handleEvent = function( event ) {  var method = 'on' + event.type;  if ( this[ method ] ) {    this[ method ]( event );  }};// ----- filterFindElements ----- //utils.filterFindElements = function( elems, selector ) {  // make array of elems  elems = utils.makeArray( elems );  var ffElems = [];  elems.forEach( function( elem ) {    // check that elem is an actual element    if ( !( elem instanceof HTMLElement ) ) {      return;    }    // add elem if no selector    if ( !selector ) {      ffElems.push( elem );      return;    }    // filter & find items if we have a selector    // filter    if ( matchesSelector( elem, selector ) ) {      ffElems.push( elem );    }    // find children    var childElems = elem.querySelectorAll( selector );    // concat childElems to filterFound array    for ( var i=0; i < childElems.length; i++ ) {      ffElems.push( childElems[i] );    }  });  return ffElems;};// ----- debounceMethod ----- //utils.debounceMethod = function( _class, methodName, threshold ) {  // original method  var method = _class.prototype[ methodName ];  var timeoutName = methodName + 'Timeout';  _class.prototype[ methodName ] = function() {    var timeout = this[ timeoutName ];    if ( timeout ) {      clearTimeout( timeout );    }    var args = arguments;    var _this = this;    this[ timeoutName ] = setTimeout( function() {      method.apply( _this, args );      delete _this[ timeoutName ];    }, threshold || 100 );  };};// ----- docReady ----- //utils.docReady = function( callback ) {  var readyState = document.readyState;  if ( readyState == 'complete' || readyState == 'interactive' ) {    // do async to allow for other scripts to run. metafizzy/flickity#441    setTimeout( callback );  } else {    document.addEventListener( 'DOMContentLoaded', callback );  }};// ----- htmlInit ----- //// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/utils.toDashed = function( str ) {  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {    return $1 + '-' + $2;  }).toLowerCase();};var console = window.console;/** * allow user to initialize classes via [data-namespace] or .js-namespace class * htmlInit( Widget, 'widgetName' ) * options are parsed from data-namespace-options */utils.htmlInit = function( WidgetClass, namespace ) {  utils.docReady( function() {    var dashedNamespace = utils.toDashed( namespace );    var dataAttr = 'data-' + dashedNamespace;    var dataAttrElems = document.querySelectorAll( '[' + dataAttr + ']' );    var jsDashElems = document.querySelectorAll( '.js-' + dashedNamespace );    var elems = utils.makeArray( dataAttrElems )      .concat( utils.makeArray( jsDashElems ) );    var dataOptionsAttr = dataAttr + '-options';    var jQuery = window.jQuery;    elems.forEach( function( elem ) {      var attr = elem.getAttribute( dataAttr ) ||        elem.getAttribute( dataOptionsAttr );      var options;      try {        options = attr && JSON.parse( attr );      } catch ( error ) {        // log error, do not initialize        if ( console ) {          console.error( 'Error parsing ' + dataAttr + ' on ' + elem.className +          ': ' + error );        }        return;      }      // initialize      var instance = new WidgetClass( elem, options );      // make available via $().data('namespace')      if ( jQuery ) {        jQuery.data( elem, namespace, instance );      }    });  });};// -----  ----- //return utils;}));/** * Outlayer Item */( function( window, factory ) {  // universal module definition  /* jshint strict: false */ /* globals define, module, require */  if ( typeof define == 'function' && define.amd ) {    // AMD - RequireJS    define( 'outlayer/item',[        'ev-emitter/ev-emitter',        'get-size/get-size'      ],      factory    );  } else if ( typeof module == 'object' && module.exports ) {    // CommonJS - Browserify, Webpack    module.exports = factory(      require('ev-emitter'),      require('get-size')    );  } else {    // browser global    window.Outlayer = {};    window.Outlayer.Item = factory(      window.EvEmitter,      window.getSize    );  }}( window, function factory( EvEmitter, getSize ) {'use strict';// ----- helpers ----- //function isEmptyObj( obj ) {  for ( var prop in obj ) {    return false;  }  prop = null;  return true;}// -------------------------- CSS3 support -------------------------- //var docElemStyle = document.documentElement.style;var transitionProperty = typeof docElemStyle.transition == 'string' ?  'transition' : 'WebkitTransition';var transformProperty = typeof docElemStyle.transform == 'string' ?  'transform' : 'WebkitTransform';var transitionEndEvent = {  WebkitTransition: 'webkitTransitionEnd',  transition: 'transitionend'}[ transitionProperty ];// cache all vendor properties that could have vendor prefixvar vendorProperties = {  transform: transformProperty,  transition: transitionProperty,  transitionDuration: transitionProperty + 'Duration',  transitionProperty: transitionProperty + 'Property',  transitionDelay: transitionProperty + 'Delay'};// -------------------------- Item -------------------------- //function Item( element, layout ) {  if ( !element ) {    return;  }  this.element = element;  // parent layout class, i.e. Masonry, Isotope, or Packery  this.layout = layout;  this.position = {    x: 0,    y: 0  };  this._create();}// inherit EvEmittervar proto = Item.prototype = Object.create( EvEmitter.prototype );proto.constructor = Item;proto._create = function() {  // transition objects  this._transn = {    ingProperties: {},    clean: {},    onEnd: {}  };  this.css({    position: 'absolute'  });};// trigger specified handler for event typeproto.handleEvent = function( event ) {  var method = 'on' + event.type;  if ( this[ method ] ) {    this[ method ]( event );  }};proto.getSize = function() {  this.size = getSize( this.element );};/** * apply CSS styles to element * @param {Object} style */proto.css = function( style ) {  var elemStyle = this.element.style;  for ( var prop in style ) {    // use vendor property if available    var supportedProp = vendorProperties[ prop ] || prop;    elemStyle[ supportedProp ] = style[ prop ];  }}; // measure position, and sets itproto.getPosition = function() {  var style = getComputedStyle( this.element );  var isOriginLeft = this.layout._getOption('originLeft');  var isOriginTop = this.layout._getOption('originTop');  var xValue = style[ isOriginLeft ? 'left' : 'right' ];  var yValue = style[ isOriginTop ? 'top' : 'bottom' ];  // convert percent to pixels  var layoutSize = this.layout.size;  var x = xValue.indexOf('%') != -1 ?    ( parseFloat( xValue ) / 100 ) * layoutSize.width : parseInt( xValue, 10 );  var y = yValue.indexOf('%') != -1 ?    ( parseFloat( yValue ) / 100 ) * layoutSize.height : parseInt( yValue, 10 );  // clean up 'auto' or other non-integer values  x = isNaN( x ) ? 0 : x;  y = isNaN( y ) ? 0 : y;  // remove padding from measurement  x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;  y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;  this.position.x = x;  this.position.y = y;};// set settled position, apply paddingproto.layoutPosition = function() {  var layoutSize = this.layout.size;  var style = {};  var isOriginLeft = this.layout._getOption('originLeft');  var isOriginTop = this.layout._getOption('originTop');  // x  var xPadding = isOriginLeft ? 'paddingLeft' : 'paddingRight';  var xProperty = isOriginLeft ? 'left' : 'right';  var xResetProperty = isOriginLeft ? 'right' : 'left';  var x = this.position.x + layoutSize[ xPadding ];  // set in percentage or pixels  style[ xProperty ] = this.getXValue( x );  // reset other property  style[ xResetProperty ] = '';  // y  var yPadding = isOriginTop ? 'paddingTop' : 'paddingBottom';  var yProperty = isOriginTop ? 'top' : 'bottom';  var yResetProperty = isOriginTop ? 'bottom' : 'top';  var y = this.position.y + layoutSize[ yPadding ];  // set in percentage or pixels  style[ yProperty ] = this.getYValue( y );  // reset other property  style[ yResetProperty ] = '';  this.css( style );  this.emitEvent( 'layout', [ this ] );};proto.getXValue = function( x ) {  var isHorizontal = this.layout._getOption('horizontal');  return this.layout.options.percentPosition && !isHorizontal ?    ( ( x / this.layout.size.width ) * 100 ) + '%' : x + 'px';};proto.getYValue = function( y ) {  var isHorizontal = this.layout._getOption('horizontal');  return this.layout.options.percentPosition && isHorizontal ?    ( ( y / this.layout.size.height ) * 100 ) + '%' : y + 'px';};proto._transitionTo = function( x, y ) {  this.getPosition();  // get current x & y from top/left  var curX = this.position.x;  var curY = this.position.y;  var compareX = parseInt( x, 10 );  var compareY = parseInt( y, 10 );  var didNotMove = compareX === this.position.x && compareY === this.position.y;  // save end position  this.setPosition( x, y );  // if did not move and not transitioning, just go to layout  if ( didNotMove && !this.isTransitioning ) {    this.layoutPosition();    return;  }  var transX = x - curX;  var transY = y - curY;  var transitionStyle = {};  transitionStyle.transform = this.getTranslate( transX, transY );  this.transition({    to: transitionStyle,    onTransitionEnd: {      transform: this.layoutPosition    },    isCleaning: true  });};proto.getTranslate = function( x, y ) {  // flip cooridinates if origin on right or bottom  var isOriginLeft = this.layout._getOption('originLeft');  var isOriginTop = this.layout._getOption('originTop');  x = isOriginLeft ? x : -x;  y = isOriginTop ? y : -y;  return 'translate3d(' + x + 'px, ' + y + 'px, 0)';};// non transition + transform supportproto.goTo = function( x, y ) {  this.setPosition( x, y );  this.layoutPosition();};proto.moveTo = proto._transitionTo;proto.setPosition = function( x, y ) {  this.position.x = parseInt( x, 10 );  this.position.y = parseInt( y, 10 );};// ----- transition ----- ///** * @param {Object} style - CSS * @param {Function} onTransitionEnd */// non transition, just trigger callbackproto._nonTransition = function( args ) {  this.css( args.to );  if ( args.isCleaning ) {    this._removeStyles( args.to );  }  for ( var prop in args.onTransitionEnd ) {    args.onTransitionEnd[ prop ].call( this );  }};/** * proper transition * @param {Object} args - arguments *   @param {Object} to - style to transition to *   @param {Object} from - style to start transition from *   @param {Boolean} isCleaning - removes transition styles after transition *   @param {Function} onTransitionEnd - callback */proto.transition = function( args ) {  // redirect to nonTransition if no transition duration  if ( !parseFloat( this.layout.options.transitionDuration ) ) {    this._nonTransition( args );    return;  }  var _transition = this._transn;  // keep track of onTransitionEnd callback by css property  for ( var prop in args.onTransitionEnd ) {    _transition.onEnd[ prop ] = args.onTransitionEnd[ prop ];  }  // keep track of properties that are transitioning  for ( prop in args.to ) {    _transition.ingProperties[ prop ] = true;    // keep track of properties to clean up when transition is done    if ( args.isCleaning ) {      _transition.clean[ prop ] = true;    }  }  // set from styles  if ( args.from ) {    this.css( args.from );    // force redraw. http://blog.alexmaccaw.com/css-transitions    var h = this.element.offsetHeight;    // hack for JSHint to hush about unused var    h = null;  }  // enable transition  this.enableTransition( args.to );  // set styles that are transitioning  this.css( args.to );  this.isTransitioning = true;};// dash before all cap letters, including first for// WebkitTransform => -webkit-transformfunction toDashedAll( str ) {  return str.replace( /([A-Z])/g, function( $1 ) {    return '-' + $1.toLowerCase();  });}var transitionProps = 'opacity,' + toDashedAll( transformProperty );proto.enableTransition = function(/* style */) {  // HACK changing transitionProperty during a transition  // will cause transition to jump  if ( this.isTransitioning ) {    return;  }  // make `transition: foo, bar, baz` from style object  // HACK un-comment this when enableTransition can work  // while a transition is happening  // var transitionValues = [];  // for ( var prop in style ) {  //   // dash-ify camelCased properties like WebkitTransition  //   prop = vendorProperties[ prop ] || prop;  //   transitionValues.push( toDashedAll( prop ) );  // }  // munge number to millisecond, to match stagger  var duration = this.layout.options.transitionDuration;  duration = typeof duration == 'number' ? duration + 'ms' : duration;  // enable transition styles  this.css({    transitionProperty: transitionProps,    transitionDuration: duration,    transitionDelay: this.staggerDelay || 0  });  // listen for transition end event  this.element.addEventListener( transitionEndEvent, this, false );};// ----- events ----- //proto.onwebkitTransitionEnd = function( event ) {  this.ontransitionend( event );};proto.onotransitionend = function( event ) {  this.ontransitionend( event );};// properties that I munge to make my life easiervar dashedVendorProperties = {  '-webkit-transform': 'transform'};proto.ontransitionend = function( event ) {  // disregard bubbled events from children  if ( event.target !== this.element ) {    return;  }  var _transition = this._transn;  // get property name of transitioned property, convert to prefix-free  var propertyName = dashedVendorProperties[ event.propertyName ] || event.propertyName;  // remove property that has completed transitioning  delete _transition.ingProperties[ propertyName ];  // check if any properties are still transitioning  if ( isEmptyObj( _transition.ingProperties ) ) {    // all properties have completed transitioning    this.disableTransition();  }  // clean style  if ( propertyName in _transition.clean ) {    // clean up style    this.element.style[ event.propertyName ] = '';    delete _transition.clean[ propertyName ];  }  // trigger onTransitionEnd callback  if ( propertyName in _transition.onEnd ) {    var onTransitionEnd = _transition.onEnd[ propertyName ];    onTransitionEnd.call( this );    delete _transition.onEnd[ propertyName ];  }  this.emitEvent( 'transitionEnd', [ this ] );};proto.disableTransition = function() {  this.removeTransitionStyles();  this.element.removeEventListener( transitionEndEvent, this, false );  this.isTransitioning = false;};/** * removes style property from element * @param {Object} style**/proto._removeStyles = function( style ) {  // clean up transition styles  var cleanStyle = {};  for ( var prop in style ) {    cleanStyle[ prop ] = '';  }  this.css( cleanStyle );};var cleanTransitionStyle = {  transitionProperty: '',  transitionDuration: '',  transitionDelay: ''};proto.removeTransitionStyles = function() {  // remove transition  this.css( cleanTransitionStyle );};// ----- stagger ----- //proto.stagger = function( delay ) {  delay = isNaN( delay ) ? 0 : delay;  this.staggerDelay = delay + 'ms';};// ----- show/hide/remove ----- //// remove element from DOMproto.removeElem = function() {  this.element.parentNode.removeChild( this.element );  // remove display: none  this.css({ display: '' });  this.emitEvent( 'remove', [ this ] );};proto.remove = function() {  // just remove element if no transition support or no transition  if ( !transitionProperty || !parseFloat( this.layout.options.transitionDuration ) ) {    this.removeElem();    return;  }  // start transition  this.once( 'transitionEnd', function() {    this.removeElem();  });  this.hide();};proto.reveal = function() {  delete this.isHidden;  // remove display: none  this.css({ display: '' });  var options = this.layout.options;  var onTransitionEnd = {};  var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');  onTransitionEnd[ transitionEndProperty ] = this.onRevealTransitionEnd;  this.transition({    from: options.hiddenStyle,    to: options.visibleStyle,    isCleaning: true,    onTransitionEnd: onTransitionEnd  });};proto.onRevealTransitionEnd = function() {  // check if still visible  // during transition, item may have been hidden  if ( !this.isHidden ) {    this.emitEvent('reveal');  }};/** * get style property use for hide/reveal transition end * @param {String} styleProperty - hiddenStyle/visibleStyle * @returns {String} */proto.getHideRevealTransitionEndProperty = function( styleProperty ) {  var optionStyle = this.layout.options[ styleProperty ];  // use opacity  if ( optionStyle.opacity ) {    return 'opacity';  }  // get first property  for ( var prop in optionStyle ) {    return prop;  }};proto.hide = function() {  // set flag  this.isHidden = true;  // remove display: none  this.css({ display: '' });  var options = this.layout.options;  var onTransitionEnd = {};  var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');  onTransitionEnd[ transitionEndProperty ] = this.onHideTransitionEnd;  this.transition({    from: options.visibleStyle,    to: options.hiddenStyle,    // keep hidden stuff hidden    isCleaning: true,    onTransitionEnd: onTransitionEnd  });};proto.onHideTransitionEnd = function() {  // check if still hidden  // during transition, item may have been un-hidden  if ( this.isHidden ) {    this.css({ display: 'none' });    this.emitEvent('hide');  }};proto.destroy = function() {  this.css({    position: '',    left: '',    right: '',    top: '',    bottom: '',    transition: '',    transform: ''  });};return Item;}));/*! * Outlayer v2.1.0 * the brains and guts of a layout library * MIT license */( function( window, factory ) {  'use strict';  // universal module definition  /* jshint strict: false */ /* globals define, module, require */  if ( typeof define == 'function' && define.amd ) {    // AMD - RequireJS    define( 'outlayer/outlayer',[        'ev-emitter/ev-emitter',        'get-size/get-size',        'fizzy-ui-utils/utils',        './item'      ],      function( EvEmitter, getSize, utils, Item ) {        return factory( window, EvEmitter, getSize, utils, Item);      }    );  } else if ( typeof module == 'object' && module.exports ) {    // CommonJS - Browserify, Webpack    module.exports = factory(      window,      require('ev-emitter'),      require('get-size'),      require('fizzy-ui-utils'),      require('./item')    );  } else {    // browser global    window.Outlayer = factory(      window,      window.EvEmitter,      window.getSize,      window.fizzyUIUtils,      window.Outlayer.Item    );  }}( window, function factory( window, EvEmitter, getSize, utils, Item ) {'use strict';// ----- vars ----- //var console = window.console;var jQuery = window.jQuery;var noop = function() {};// -------------------------- Outlayer -------------------------- //// globally unique identifiersvar GUID = 0;// internal store of all Outlayer intancesvar instances = {};/** * @param {Element, String} element * @param {Object} options * @constructor */function Outlayer( element, options ) {  var queryElement = utils.getQueryElement( element );  if ( !queryElement ) {    if ( console ) {      console.error( 'Bad element for ' + this.constructor.namespace +        ': ' + ( queryElement || element ) );    }    return;  }  this.element = queryElement;  // add jQuery  if ( jQuery ) {    this.$element = jQuery( this.element );  }  // options  this.options = utils.extend( {}, this.constructor.defaults );  this.option( options );  // add id for Outlayer.getFromElement  var id = ++GUID;  this.element.outlayerGUID = id; // expando  instances[ id ] = this; // associate via id  // kick it off  this._create();  var isInitLayout = this._getOption('initLayout');  if ( isInitLayout ) {    this.layout();  }}// settings are for internal use onlyOutlayer.namespace = 'outlayer';Outlayer.Item = Item;// default optionsOutlayer.defaults = {  containerStyle: {    position: 'relative'  },  initLayout: true,  originLeft: true,  originTop: true,  resize: true,  resizeContainer: true,  // item options  transitionDuration: '0.4s',  hiddenStyle: {    opacity: 0,    transform: 'scale(0.001)'  },  visibleStyle: {    opacity: 1,    transform: 'scale(1)'  }};var proto = Outlayer.prototype;// inherit EvEmitterutils.extend( proto, EvEmitter.prototype );/** * set options * @param {Object} opts */proto.option = function( opts ) {  utils.extend( this.options, opts );};/** * get backwards compatible option value, check old name */proto._getOption = function( option ) {  var oldOption = this.constructor.compatOptions[ option ];  return oldOption && this.options[ oldOption ] !== undefined ?    this.options[ oldOption ] : this.options[ option ];};Outlayer.compatOptions = {  // currentName: oldName  initLayout: 'isInitLayout',  horizontal: 'isHorizontal',  layoutInstant: 'isLayoutInstant',  originLeft: 'isOriginLeft',  originTop: 'isOriginTop',  resize: 'isResizeBound',  resizeContainer: 'isResizingContainer'};proto._create = function() {  // get items from children  this.reloadItems();  // elements that affect layout, but are not laid out  this.stamps = [];  this.stamp( this.options.stamp );  // set container style  utils.extend( this.element.style, this.options.containerStyle );  // bind resize method  var canBindResize = this._getOption('resize');  if ( canBindResize ) {    this.bindResize();  }};// goes through all children again and gets bricks in proper orderproto.reloadItems = function() {  // collection of item elements  this.items = this._itemize( this.element.children );};/** * turn elements into Outlayer.Items to be used in layout * @param {Array or NodeList or HTMLElement} elems * @returns {Array} items - collection of new Outlayer Items */proto._itemize = function( elems ) {  var itemElems = this._filterFindItemElements( elems );  var Item = this.constructor.Item;  // create new Outlayer Items for collection  var items = [];  for ( var i=0; i < itemElems.length; i++ ) {    var elem = itemElems[i];    var item = new Item( elem, this );    items.push( item );  }  return items;};/** * get item elements to be used in layout * @param {Array or NodeList or HTMLElement} elems * @returns {Array} items - item elements */proto._filterFindItemElements = function( elems ) {  return utils.filterFindElements( elems, this.options.itemSelector );};/** * getter method for getting item elements * @returns {Array} elems - collection of item elements */proto.getItemElements = function() {  return this.items.map( function( item ) {    return item.element;  });};// ----- init & layout ----- ///** * lays out all items */proto.layout = function() {  this._resetLayout();  this._manageStamps();  // don't animate first layout  var layoutInstant = this._getOption('layoutInstant');  var isInstant = layoutInstant !== undefined ?    layoutInstant : !this._isLayoutInited;  this.layoutItems( this.items, isInstant );  // flag for initalized  this._isLayoutInited = true;};// _init is alias for layoutproto._init = proto.layout;/** * logic before any new layout */proto._resetLayout = function() {  this.getSize();};proto.getSize = function() {  this.size = getSize( this.element );};/** * get measurement from option, for columnWidth, rowHeight, gutter * if option is String -> get element from selector string, & get size of element * if option is Element -> get size of element * else use option as a number * * @param {String} measurement * @param {String} size - width or height * @private */proto._getMeasurement = function( measurement, size ) {  var option = this.options[ measurement ];  var elem;  if ( !option ) {    // default to 0    this[ measurement ] = 0;  } else {    // use option as an element    if ( typeof option == 'string' ) {      elem = this.element.querySelector( option );    } else if ( option instanceof HTMLElement ) {      elem = option;    }    // use size of element, if element    this[ measurement ] = elem ? getSize( elem )[ size ] : option;  }};/** * layout a collection of item elements * @api public */proto.layoutItems = function( items, isInstant ) {  items = this._getItemsForLayout( items );  this._layoutItems( items, isInstant );  this._postLayout();};/** * get the items to be laid out * you may want to skip over some items * @param {Array} items * @returns {Array} items */proto._getItemsForLayout = function( items ) {  return items.filter( function( item ) {    return !item.isIgnored;  });};/** * layout items * @param {Array} items * @param {Boolean} isInstant */proto._layoutItems = function( items, isInstant ) {  this._emitCompleteOnItems( 'layout', items );  if ( !items || !items.length ) {    // no items, emit event with empty array    return;  }  var queue = [];  items.forEach( function( item ) {    // get x/y object from method    var position = this._getItemLayoutPosition( item );    // enqueue    position.item = item;    position.isInstant = isInstant || item.isLayoutInstant;    queue.push( position );  }, this );  this._processLayoutQueue( queue );};/** * get item layout position * @param {Outlayer.Item} item * @returns {Object} x and y position */proto._getItemLayoutPosition = function( /* item */ ) {  return {    x: 0,    y: 0  };};/** * iterate over array and position each item * Reason being - separating this logic prevents 'layout invalidation' * thx @paul_irish * @param {Array} queue */proto._processLayoutQueue = function( queue ) {  this.updateStagger();  queue.forEach( function( obj, i ) {    this._positionItem( obj.item, obj.x, obj.y, obj.isInstant, i );  }, this );};// set stagger from option in milliseconds numberproto.updateStagger = function() {  var stagger = this.options.stagger;  if ( stagger === null || stagger === undefined ) {    this.stagger = 0;    return;  }  this.stagger = getMilliseconds( stagger );  return this.stagger;};/** * Sets position of item in DOM * @param {Outlayer.Item} item * @param {Number} x - horizontal position * @param {Number} y - vertical position * @param {Boolean} isInstant - disables transitions */proto._positionItem = function( item, x, y, isInstant, i ) {  if ( isInstant ) {    // if not transition, just set CSS    item.goTo( x, y );  } else {    item.stagger( i * this.stagger );    item.moveTo( x, y );  }};/** * Any logic you want to do after each layout, * i.e. size the container */proto._postLayout = function() {  this.resizeContainer();};proto.resizeContainer = function() {  var isResizingContainer = this._getOption('resizeContainer');  if ( !isResizingContainer ) {    return;  }  var size = this._getContainerSize();  if ( size ) {    this._setContainerMeasure( size.width, true );    this._setContainerMeasure( size.height, false );  }};/** * Sets width or height of container if returned * @returns {Object} size *   @param {Number} width *   @param {Number} height */proto._getContainerSize = noop;/** * @param {Number} measure - size of width or height * @param {Boolean} isWidth */proto._setContainerMeasure = function( measure, isWidth ) {  if ( measure === undefined ) {    return;  }  var elemSize = this.size;  // add padding and border width if border box  if ( elemSize.isBorderBox ) {    measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +      elemSize.borderLeftWidth + elemSize.borderRightWidth :      elemSize.paddingBottom + elemSize.paddingTop +      elemSize.borderTopWidth + elemSize.borderBottomWidth;  }  measure = Math.max( measure, 0 );  this.element.style[ isWidth ? 'width' : 'height' ] = measure + 'px';};/** * emit eventComplete on a collection of items events * @param {String} eventName * @param {Array} items - Outlayer.Items */proto._emitCompleteOnItems = function( eventName, items ) {  var _this = this;  function onComplete() {    _this.dispatchEvent( eventName + 'Complete', null, [ items ] );  }  var count = items.length;  if ( !items || !count ) {    onComplete();    return;  }  var doneCount = 0;  function tick() {    doneCount++;    if ( doneCount == count ) {      onComplete();    }  }  // bind callback  items.forEach( function( item ) {    item.once( eventName, tick );  });};/** * emits events via EvEmitter and jQuery events * @param {String} type - name of event * @param {Event} event - original event * @param {Array} args - extra arguments */proto.dispatchEvent = function( type, event, args ) {  // add original event to arguments  var emitArgs = event ? [ event ].concat( args ) : args;  this.emitEvent( type, emitArgs );  if ( jQuery ) {    // set this.$element    this.$element = this.$element || jQuery( this.element );    if ( event ) {      // create jQuery event      var $event = jQuery.Event( event );      $event.type = type;      this.$element.trigger( $event, args );    } else {      // just trigger with type if no event available      this.$element.trigger( type, args );    }  }};// -------------------------- ignore & stamps -------------------------- ///** * keep item in collection, but do not lay it out * ignored items do not get skipped in layout * @param {Element} elem */proto.ignore = function( elem ) {  var item = this.getItem( elem );  if ( item ) {    item.isIgnored = true;  }};/** * return item to layout collection * @param {Element} elem */proto.unignore = function( elem ) {  var item = this.getItem( elem );  if ( item ) {    delete item.isIgnored;  }};/** * adds elements to stamps * @param {NodeList, Array, Element, or String} elems */proto.stamp = function( elems ) {  elems = this._find( elems );  if ( !elems ) {    return;  }  this.stamps = this.stamps.concat( elems );  // ignore  elems.forEach( this.ignore, this );};/** * removes elements to stamps * @param {NodeList, Array, or Element} elems */proto.unstamp = function( elems ) {  elems = this._find( elems );  if ( !elems ){    return;  }  elems.forEach( function( elem ) {    // filter out removed stamp elements    utils.removeFrom( this.stamps, elem );    this.unignore( elem );  }, this );};/** * finds child elements * @param {NodeList, Array, Element, or String} elems * @returns {Array} elems */proto._find = function( elems ) {  if ( !elems ) {    return;  }  // if string, use argument as selector string  if ( typeof elems == 'string' ) {    elems = this.element.querySelectorAll( elems );  }  elems = utils.makeArray( elems );  return elems;};proto._manageStamps = function() {  if ( !this.stamps || !this.stamps.length ) {    return;  }  this._getBoundingRect();  this.stamps.forEach( this._manageStamp, this );};// update boundingLeft / Topproto._getBoundingRect = function() {  // get bounding rect for container element  var boundingRect = this.element.getBoundingClientRect();  var size = this.size;  this._boundingRect = {    left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,    top: boundingRect.top + size.paddingTop + size.borderTopWidth,    right: boundingRect.right - ( size.paddingRight + size.borderRightWidth ),    bottom: boundingRect.bottom - ( size.paddingBottom + size.borderBottomWidth )  };};/** * @param {Element} stamp**/proto._manageStamp = noop;/** * get x/y position of element relative to container element * @param {Element} elem * @returns {Object} offset - has left, top, right, bottom */proto._getElementOffset = function( elem ) {  var boundingRect = elem.getBoundingClientRect();  var thisRect = this._boundingRect;  var size = getSize( elem );  var offset = {    left: boundingRect.left - thisRect.left - size.marginLeft,    top: boundingRect.top - thisRect.top - size.marginTop,    right: thisRect.right - boundingRect.right - size.marginRight,    bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom  };  return offset;};// -------------------------- resize -------------------------- //// enable event handlers for listeners// i.e. resize -> onresizeproto.handleEvent = utils.handleEvent;/** * Bind layout to window resizing */proto.bindResize = function() {  window.addEventListener( 'resize', this );  this.isResizeBound = true;};/** * Unbind layout to window resizing */proto.unbindResize = function() {  window.removeEventListener( 'resize', this );  this.isResizeBound = false;};proto.onresize = function() {  this.resize();};utils.debounceMethod( Outlayer, 'onresize', 100 );proto.resize = function() {  // don't trigger if size did not change  // or if resize was unbound. See #9  if ( !this.isResizeBound || !this.needsResizeLayout() ) {    return;  }  this.layout();};/** * check if layout is needed post layout * @returns Boolean */proto.needsResizeLayout = function() {  var size = getSize( this.element );  // check that this.size and size are there  // IE8 triggers resize on body size change, so they might not be  var hasSizes = this.size && size;  return hasSizes && size.innerWidth !== this.size.innerWidth;};// -------------------------- methods -------------------------- ///** * add items to Outlayer instance * @param {Array or NodeList or Element} elems * @returns {Array} items - Outlayer.Items**/proto.addItems = function( elems ) {  var items = this._itemize( elems );  // add items to collection  if ( items.length ) {    this.items = this.items.concat( items );  }  return items;};/** * Layout newly-appended item elements * @param {Array or NodeList or Element} elems */proto.appended = function( elems ) {  var items = this.addItems( elems );  if ( !items.length ) {    return;  }  // layout and reveal just the new items  this.layoutItems( items, true );  this.reveal( items );};/** * Layout prepended elements * @param {Array or NodeList or Element} elems */proto.prepended = function( elems ) {  var items = this._itemize( elems );  if ( !items.length ) {    return;  }  // add items to beginning of collection  var previousItems = this.items.slice(0);  this.items = items.concat( previousItems );  // start new layout  this._resetLayout();  this._manageStamps();  // layout new stuff without transition  this.layoutItems( items, true );  this.reveal( items );  // layout previous items  this.layoutItems( previousItems );};/** * reveal a collection of items * @param {Array of Outlayer.Items} items */proto.reveal = function( items ) {  this._emitCompleteOnItems( 'reveal', items );  if ( !items || !items.length ) {    return;  }  var stagger = this.updateStagger();  items.forEach( function( item, i ) {    item.stagger( i * stagger );    item.reveal();  });};/** * hide a collection of items * @param {Array of Outlayer.Items} items */proto.hide = function( items ) {  this._emitCompleteOnItems( 'hide', items );  if ( !items || !items.length ) {    return;  }  var stagger = this.updateStagger();  items.forEach( function( item, i ) {    item.stagger( i * stagger );    item.hide();  });};/** * reveal item elements * @param {Array}, {Element}, {NodeList} items */proto.revealItemElements = function( elems ) {  var items = this.getItems( elems );  this.reveal( items );};/** * hide item elements * @param {Array}, {Element}, {NodeList} items */proto.hideItemElements = function( elems ) {  var items = this.getItems( elems );  this.hide( items );};/** * get Outlayer.Item, given an Element * @param {Element} elem * @param {Function} callback * @returns {Outlayer.Item} item */proto.getItem = function( elem ) {  // loop through items to get the one that matches  for ( var i=0; i < this.items.length; i++ ) {    var item = this.items[i];    if ( item.element == elem ) {      // return item      return item;    }  }};/** * get collection of Outlayer.Items, given Elements * @param {Array} elems * @returns {Array} items - Outlayer.Items */proto.getItems = function( elems ) {  elems = utils.makeArray( elems );  var items = [];  elems.forEach( function( elem ) {    var item = this.getItem( elem );    if ( item ) {      items.push( item );    }  }, this );  return items;};/** * remove element(s) from instance and DOM * @param {Array or NodeList or Element} elems */proto.remove = function( elems ) {  var removeItems = this.getItems( elems );  this._emitCompleteOnItems( 'remove', removeItems );  // bail if no items to remove  if ( !removeItems || !removeItems.length ) {    return;  }  removeItems.forEach( function( item ) {    item.remove();    // remove item from collection    utils.removeFrom( this.items, item );  }, this );};// ----- destroy ----- //// remove and disable Outlayer instanceproto.destroy = function() {  // clean up dynamic styles  var style = this.element.style;  style.height = '';  style.position = '';  style.width = '';  // destroy items  this.items.forEach( function( item ) {    item.destroy();  });  this.unbindResize();  var id = this.element.outlayerGUID;  delete instances[ id ]; // remove reference to instance by id  delete this.element.outlayerGUID;  // remove data for jQuery  if ( jQuery ) {    jQuery.removeData( this.element, this.constructor.namespace );  }};// -------------------------- data -------------------------- ///** * get Outlayer instance from element * @param {Element} elem * @returns {Outlayer} */Outlayer.data = function( elem ) {  elem = utils.getQueryElement( elem );  var id = elem && elem.outlayerGUID;  return id && instances[ id ];};// -------------------------- create Outlayer class -------------------------- ///** * create a layout class * @param {String} namespace */Outlayer.create = function( namespace, options ) {  // sub-class Outlayer  var Layout = subclass( Outlayer );  // apply new options and compatOptions  Layout.defaults = utils.extend( {}, Outlayer.defaults );  utils.extend( Layout.defaults, options );  Layout.compatOptions = utils.extend( {}, Outlayer.compatOptions  );  Layout.namespace = namespace;  Layout.data = Outlayer.data;  // sub-class Item  Layout.Item = subclass( Item );  // -------------------------- declarative -------------------------- //  utils.htmlInit( Layout, namespace );  // -------------------------- jQuery bridge -------------------------- //  // make into jQuery plugin  if ( jQuery && jQuery.bridget ) {    jQuery.bridget( namespace, Layout );  }  return Layout;};function subclass( Parent ) {  function SubClass() {    Parent.apply( this, arguments );  }  SubClass.prototype = Object.create( Parent.prototype );  SubClass.prototype.constructor = SubClass;  return SubClass;}// ----- helpers ----- //// how many milliseconds are in each unitvar msUnits = {  ms: 1,  s: 1000};// munge time-like parameter into millisecond number// '0.4s' -> 40function getMilliseconds( time ) {  if ( typeof time == 'number' ) {    return time;  }  var matches = time.match( /(^\d*\.?\d*)(\w*)/ );  var num = matches && matches[1];  var unit = matches && matches[2];  if ( !num.length ) {    return 0;  }  num = parseFloat( num );  var mult = msUnits[ unit ] || 1;  return num * mult;}// ----- fin ----- //// back in globalOutlayer.Item = Item;return Outlayer;}));/*! * Masonry v4.2.0 * Cascading grid layout library * http://masonry.desandro.com * MIT License * by David DeSandro */( function( window, factory ) {  // universal module definition  /* jshint strict: false */ /*globals define, module, require */  if ( typeof define == 'function' && define.amd ) {    // AMD    define( [        'outlayer/outlayer',        'get-size/get-size'      ],      factory );  } else if ( typeof module == 'object' && module.exports ) {    // CommonJS    module.exports = factory(      require('outlayer'),      require('get-size')    );  } else {    // browser global    window.Masonry = factory(      window.Outlayer,      window.getSize    );  }}( window, function factory( Outlayer, getSize ) {// -------------------------- masonryDefinition -------------------------- //  // create an Outlayer layout class  var Masonry = Outlayer.create('masonry');  // isFitWidth -> fitWidth  Masonry.compatOptions.fitWidth = 'isFitWidth';  var proto = Masonry.prototype;  proto._resetLayout = function() {    this.getSize();    this._getMeasurement( 'columnWidth', 'outerWidth' );    this._getMeasurement( 'gutter', 'outerWidth' );    this.measureColumns();    // reset column Y    this.colYs = [];    for ( var i=0; i < this.cols; i++ ) {      this.colYs.push( 0 );    }    this.maxY = 0;    this.horizontalColIndex = 0;  };  proto.measureColumns = function() {    this.getContainerWidth();    // if columnWidth is 0, default to outerWidth of first item    if ( !this.columnWidth ) {      var firstItem = this.items[0];      var firstItemElem = firstItem && firstItem.element;      // columnWidth fall back to item of first element      this.columnWidth = firstItemElem && getSize( firstItemElem ).outerWidth ||        // if first elem has no width, default to size of container        this.containerWidth;    }    var columnWidth = this.columnWidth += this.gutter;    // calculate columns    var containerWidth = this.containerWidth + this.gutter;    var cols = containerWidth / columnWidth;    // fix rounding errors, typically with gutters    var excess = columnWidth - containerWidth % columnWidth;    // if overshoot is less than a pixel, round up, otherwise floor it    var mathMethod = excess && excess < 1 ? 'round' : 'floor';    cols = Math[ mathMethod ]( cols );    this.cols = Math.max( cols, 1 );  };  proto.getContainerWidth = function() {    // container is parent if fit width    var isFitWidth = this._getOption('fitWidth');    var container = isFitWidth ? this.element.parentNode : this.element;    // check that this.size and size are there    // IE8 triggers resize on body size change, so they might not be    var size = getSize( container );    this.containerWidth = size && size.innerWidth;  };  proto._getItemLayoutPosition = function( item ) {    item.getSize();    // how many columns does this brick span    var remainder = item.size.outerWidth % this.columnWidth;    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';    // round if off by 1 pixel, otherwise use ceil    var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );    colSpan = Math.min( colSpan, this.cols );    // use horizontal or top column position    var colPosMethod = this.options.horizontalOrder ?      '_getHorizontalColPosition' : '_getTopColPosition';    var colPosition = this[ colPosMethod ]( colSpan, item );    // position the brick    var position = {      x: this.columnWidth * colPosition.col,      y: colPosition.y    };    // apply setHeight to necessary columns    var setHeight = colPosition.y + item.size.outerHeight;    var setMax = colSpan + colPosition.col;    for ( var i = colPosition.col; i < setMax; i++ ) {      this.colYs[i] = setHeight;    }    return position;  };  proto._getTopColPosition = function( colSpan ) {    var colGroup = this._getTopColGroup( colSpan );    // get the minimum Y value from the columns    var minimumY = Math.min.apply( Math, colGroup );    return {      col: colGroup.indexOf( minimumY ),      y: minimumY,    };  };  /**   * @param {Number} colSpan - number of columns the element spans   * @returns {Array} colGroup   */  proto._getTopColGroup = function( colSpan ) {    if ( colSpan < 2 ) {      // if brick spans only one column, use all the column Ys      return this.colYs;    }    var colGroup = [];    // how many different places could this brick fit horizontally    var groupCount = this.cols + 1 - colSpan;    // for each group potential horizontal position    for ( var i = 0; i < groupCount; i++ ) {      colGroup[i] = this._getColGroupY( i, colSpan );    }    return colGroup;  };  proto._getColGroupY = function( col, colSpan ) {    if ( colSpan < 2 ) {      return this.colYs[ col ];    }    // make an array of colY values for that one group    var groupColYs = this.colYs.slice( col, col + colSpan );    // and get the max value of the array    return Math.max.apply( Math, groupColYs );  };  // get column position based on horizontal index. #873  proto._getHorizontalColPosition = function( colSpan, item ) {    var col = this.horizontalColIndex % this.cols;    var isOver = colSpan > 1 && col + colSpan > this.cols;    // shift to next row if item can't fit on current row    col = isOver ? 0 : col;    // don't let zero-size items take up space    var hasSize = item.size.outerWidth && item.size.outerHeight;    this.horizontalColIndex = hasSize ? col + colSpan : this.horizontalColIndex;    return {      col: col,      y: this._getColGroupY( col, colSpan ),    };  };  proto._manageStamp = function( stamp ) {    var stampSize = getSize( stamp );    var offset = this._getElementOffset( stamp );    // get the columns that this stamp affects    var isOriginLeft = this._getOption('originLeft');    var firstX = isOriginLeft ? offset.left : offset.right;    var lastX = firstX + stampSize.outerWidth;    var firstCol = Math.floor( firstX / this.columnWidth );    firstCol = Math.max( 0, firstCol );    var lastCol = Math.floor( lastX / this.columnWidth );    // lastCol should not go over if multiple of columnWidth #425    lastCol -= lastX % this.columnWidth ? 0 : 1;    lastCol = Math.min( this.cols - 1, lastCol );    // set colYs to bottom of the stamp    var isOriginTop = this._getOption('originTop');    var stampMaxY = ( isOriginTop ? offset.top : offset.bottom ) +      stampSize.outerHeight;    for ( var i = firstCol; i <= lastCol; i++ ) {      this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );    }  };  proto._getContainerSize = function() {    this.maxY = Math.max.apply( Math, this.colYs );    var size = {      height: this.maxY    };    if ( this._getOption('fitWidth') ) {      size.width = this._getContainerFitWidth();    }    return size;  };  proto._getContainerFitWidth = function() {    var unusedCols = 0;    // count unused columns    var i = this.cols;    while ( --i ) {      if ( this.colYs[i] !== 0 ) {        break;      }      unusedCols++;    }    // fit container to columns that have been used    return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;  };  proto.needsResizeLayout = function() {    var previousWidth = this.containerWidth;    this.getContainerWidth();    return previousWidth != this.containerWidth;  };  return Masonry;}));//---------------------------------------//// Подключаем плагины npm//---------------------------------------////---------------------------------------//// Подключаем плагины, которые в папке ( plugins )//---------------------------------------///* dropDown menu */var dropMenu = (function() {	var popupObj = {		changeState: function( $this, setting) {			var modals = setting.drop,				parentBlocks = $(setting.parent),				$modal = parentBlocks.find(modals),				titleLink = $this.parent();			if ($modal.hasClass('active') && setting.overlay) {				$modal.removeClass('active');				titleLink.removeClass('active');				$(parentBlocks).removeClass('active');				$('html').removeClass('overlay-overflow');				$(setting.overlay).removeClass('active');				popupObj.removeHeight(setting);			} else if (!$modal.hasClass('active') && setting.overlay) {				$modal.addClass('active');				titleLink.addClass('active');				$(parentBlocks).addClass('active');				$('html').addClass('overlay-overflow');				$(setting.overlay).addClass('active');				popupObj.fixHeight($this, setting);			} else if ($modal.hasClass('active') && !setting.overlay) {				$modal.removeClass('active');				$(parentBlocks).removeClass('active');				titleLink.removeClass('active');			} else if (!$modal.hasClass('active') && !setting.overlay) {				$modal.addClass('active');				$(parentBlocks).addClass('active');				titleLink.addClass('active');			}			console.log('changeState popup');			$('.js-clsoe-navBar').parent().removeClass('active');		},		closePopup: function(setting) {			if ( $(setting.drop).hasClass('active') && ( $(setting.overlay).hasClass('active') && $('html').hasClass('overlay-overflow')) && !setting.noMenu ) {				$(setting.drop).removeClass('active');				$(setting.overlay).removeClass('active');				$(setting.link).parent().removeClass('active');				$(setting.parent).removeClass('active');				$('html').removeClass('overlay-overflow');				popupObj.removeHeight(setting);			}else if ( setting.noMenu &&  $(setting.drop).hasClass('active') && ( $(setting.overlay).hasClass('active')  ) ) {				$(setting.drop).removeClass('active');				$(setting.overlay).removeClass('active');				$(setting.link).parent().removeClass('active');				$(setting.parent).removeClass('active');				popupObj.removeHeight(setting);			}else if ( !setting.overlay && $(setting.drop).hasClass('active') ) {				$(setting.drop).removeClass('active');				$(setting.link).parent().removeClass('active');				$(setting.parent).removeClass('active');			}		},		fixHeight: function($this, setting) {			var windowHeight = $(window).outerHeight(),					box = $(setting.drop),					boxHeight = box.outerHeight();					boxTop = box.offset().top			function checkHeight() {				if ( windowHeight < boxHeight + boxTop ) {					box.css('height', windowHeight - boxTop );				}else {					box.css('height', '');				}			}			checkHeight();		},		removeHeight: function(setting) {			var box = $(setting.drop);			box.css('height', '');		},		changePopup: function( $this ) {			var $popupBlocks = $('.modal-lk-block');			var linkId = $this.attr('href');			$popupBlocks.each(function() {				if ( '#' + $(this).attr('id') == linkId ) {					$popupBlocks.css('display', 'none');					$popupBlocks.find('.modal-lk__form-input').val('');					$(this).css('display', 'block');				}			})		},		hidePopup: function(setting) {			if ( $(setting.drop).hasClass('active') ) {				$(setting.drop).removeClass('active');				$(setting.parent).removeClass('active');				popupObj.removeHeight(setting);				console.log('hidePopup popup');			}		},		changePos: function( $this, setting ) {			var parentBox = $this.parents(setting.parent);			var filterLink = parentBox.find(setting.link);			var dropBox = parentBox.find(setting.drop);			var windW = $(window).outerWidth();			var parentBoxW = parentBox.outerWidth();			var parentBoxL = parentBox.offset().left;			var parentBoxR = windW - parentBoxL - parentBoxW;			var dropBoxW = dropBox.outerWidth();			if ( parentBoxR < dropBoxW ) {				dropBox.addClass('position-right');				filterLink.addClass('link-pos-right');			}else {				dropBox.removeClass('position-right');				filterLink.removeClass('link-pos-right');			}		},		eventClick: function(setting) {			var openLink = $(setting.link);			var closeLink = $(setting.drop).find('.modal__close');			//open popup			openLink.on('click', function(e) {				var modal = setting.drop,						parentBlock = setting.parent;				if ( $(this).parents(parentBlock).find(modal).length ) {					popupObj.changeState( $(this), setting );					if ( setting.changePos ) {						popupObj.changePos( $(this), setting );					}					e.preventDefault();				}			});			//close popup			closeLink.on('click', function(e) {				popupObj.closePopup(setting);				e.preventDefault();			});			//change popup			$('.modal-lk__bottom-link').on('click', function(e) {				popupObj.changePopup( $(this) );				e.preventDefault();			});			//close popup			$(window).on('click', function(e) {				var $this = $(e.target);				//console.log($this);				if ( $(setting.drop).hasClass('active') && !$this.closest(setting.parent).length && !$this.closest('.js-overlay').length ) {					popupObj.closePopup(setting);				}else if (  $(setting.drop).hasClass('active') && !$this.closest(setting.parent).length && $this.closest('.js-overlay').length ) {					popupObj.hidePopup(setting);				}				if ( $this.hasClass('overlay2') ) {					//popupObj.closePopup(setting);					//$('.js-clsoe-navBar').trigger('click');				}				if ( $(setting.drop).hasClass('active') && $this.closest('.js-overlay').length && !$this.closest('.header-mob-menu__list-item') ) {					console.log('12');				}			});			// close modal			$('.js-close-modal').on('click', function(e) {				popupObj.closePopup(setting);				e.preventDefault();			});			// mob close modal nav			$('.header-mob-menu__drop-lk .modal__close, .header-mob-menu__messengers .modal__close, .js-mob-search-parent .header-search__close').on('click', function(e) {				$('.js-clsoe-navBar').trigger('click');				e.preventDefault();			});			//mob search nav focus			$('.js-mob-search-nav-btn').on('click', function(e) {				$(this).parents('.header-search').find('.header-search__input').focus();				e.preventDefault();			});		}	};	return {		drop: function(setting) {			popupObj.eventClick(setting);		}	}}());/* exampledropMenu.drop({	link: '.js-filters-brand',	drop: '.js-filters-brand-drop', 	parent: '.js-filters-brand-parent',	noMenu: false,	overlay: false,});*//* dropDown menu end*//* filter blocks */var FilterBlocks = function(setting) {	//constructor props	this.input = $(setting.input);	this.blocks = $(setting.blocks);	this.title = $(setting.title);	this.events();};//proto methodsFilterBlocks.prototype = {	markMatch: function(text, term, $this) {		// Find where the match is    var match = text.toUpperCase().indexOf(term.toUpperCase());    //console.log(match);    var $result = $('<span></span>');    // If there is no match, move on    if (match < 0) {    	$this.hide();      return $result.text(text);    }    // Put in whatever text is before the match    $result.text(text.substring(0, match));    // Mark the match    var $match = $('<b></b>');    $match.text(text.substring(match, match + term.length));    // Append the matching text    $result.append($match);    // Put in whatever is after the match    $result.append(text.substring(match + term.length));    $this.show();    return $result;	},	filterBlocks: function(val) {		var thet = this;		var $title = this.title;		var val = val.toLowerCase();		var $blocks = this.blocks;		$blocks.show();		$blocks.each(function() {			var thisText = $(this).find($title).text();			var result = thet.markMatch(thisText, val, $(this));			$(this).find($title).html(result)		})	},	events: function() {		var _this = this;		this.input.on('input', function() {			_this.filterBlocks( $(this).val() )		})	}}/* examplevar mySearch = new FilterBlocks({	input: '.js-filter-input',	blocks: '.product-filter-check__row',	title: '.checkbox__text'});*//* filter blocks end*/// Sticky Plugin v1.0.4 for jQuery// =============// Author: Anthony Garand// Improvements by German M. Bravo (Kronuz) and Ruud Kamphuis (ruudk)// Improvements by Leonardo C. Daronco (daronco)// Created: 02/14/2011// Date: 07/20/2015// Website: http://stickyjs.com/// Description: Makes an element on the page stick on the screen as you scroll//              It will only set the 'top' and 'position' of your element, you//              might need to adjust the width in some cases.;(function (factory) {    if (typeof define === 'function' && define.amd) {        // AMD. Register as an anonymous module.        define(['jquery'], factory);    } else if (typeof module === 'object' && module.exports) {        // Node/CommonJS        module.exports = factory(require('jquery'));    } else {        // Browser globals        factory(jQuery);    }}(function ($) {    var slice = Array.prototype.slice; // save ref to original slice()    var splice = Array.prototype.splice; // save ref to original slice()  var defaults = {      topSpacing: 0,      bottomSpacing: 0,      className: 'is-sticky',      wrapperClassName: 'sticky-wrapper',      center: false,      getWidthFrom: '',      widthFromWrapper: true, // works only when .getWidthFrom is empty      responsiveWidth: false,      zIndex: 'inherit'    },    $window = $(window),    $document = $(document),    sticked = [],    windowHeight = $window.height(),    scroller = function() {      var scrollTop = $window.scrollTop(),        documentHeight = $document.height(),        dwh = documentHeight - windowHeight,        extra = (scrollTop > dwh) ? dwh - scrollTop : 0;      for (var i = 0, l = sticked.length; i < l; i++) {        var s = sticked[i],          elementTop = s.stickyWrapper.offset().top,          etse = elementTop - s.topSpacing - extra;        //update height in case of dynamic content        s.stickyWrapper.css('height', s.stickyElement.outerHeight());        if (scrollTop <= etse) {          if (s.currentTop !== null) {            s.stickyElement              .css({                'width': '',                'position': '',                'top': '',                'z-index': ''              });            s.stickyElement.parent().removeClass(s.className);            s.stickyElement.trigger('sticky-end', [s]);            s.currentTop = null;          }        }        else {          var newTop = documentHeight - s.stickyElement.outerHeight()            - s.topSpacing - s.bottomSpacing - scrollTop - extra;          if (newTop < 0) {            newTop = newTop + s.topSpacing;          } else {            newTop = s.topSpacing;          }          if (s.currentTop !== newTop) {            var newWidth;            if (s.getWidthFrom) {                padding =  s.stickyElement.innerWidth() - s.stickyElement.width();                newWidth = $(s.getWidthFrom).width() - padding || null;            } else if (s.widthFromWrapper) {                newWidth = s.stickyWrapper.width();            }            if (newWidth == null) {                newWidth = s.stickyElement.width();            }            s.stickyElement              .css('width', newWidth)              .css('position', 'fixed')              .css('top', newTop)              .css('z-index', s.zIndex);            s.stickyElement.parent().addClass(s.className);            if (s.currentTop === null) {              s.stickyElement.trigger('sticky-start', [s]);            } else {              // sticky is started but it have to be repositioned              s.stickyElement.trigger('sticky-update', [s]);            }            if (s.currentTop === s.topSpacing && s.currentTop > newTop || s.currentTop === null && newTop < s.topSpacing) {              // just reached bottom || just started to stick but bottom is already reached              s.stickyElement.trigger('sticky-bottom-reached', [s]);            } else if(s.currentTop !== null && newTop === s.topSpacing && s.currentTop < newTop) {              // sticky is started && sticked at topSpacing && overflowing from top just finished              s.stickyElement.trigger('sticky-bottom-unreached', [s]);            }            s.currentTop = newTop;          }          // Check if sticky has reached end of container and stop sticking          var stickyWrapperContainer = s.stickyWrapper.parent();          var unstick = (s.stickyElement.offset().top + s.stickyElement.outerHeight() >= stickyWrapperContainer.offset().top + stickyWrapperContainer.outerHeight()) && (s.stickyElement.offset().top <= s.topSpacing);          if( unstick ) {            s.stickyElement              .css('position', 'absolute')              .css('top', '')              .css('bottom', 0)              .css('z-index', '');          } else {            s.stickyElement              .css('position', 'fixed')              .css('top', newTop)              .css('bottom', '')              .css('z-index', s.zIndex);          }        }      }    },    resizer = function() {      windowHeight = $window.height();      for (var i = 0, l = sticked.length; i < l; i++) {        var s = sticked[i];        var newWidth = null;        if (s.getWidthFrom) {            if (s.responsiveWidth) {                newWidth = $(s.getWidthFrom).width();            }        } else if(s.widthFromWrapper) {            newWidth = s.stickyWrapper.width();        }        if (newWidth != null) {            s.stickyElement.css('width', newWidth);        }      }    },    methods = {      init: function(options) {        return this.each(function() {          var o = $.extend({}, defaults, options);          var stickyElement = $(this);          var stickyId = stickyElement.attr('id');          var wrapperId = stickyId ? stickyId + '-' + defaults.wrapperClassName : defaults.wrapperClassName;          var wrapper = $('<div></div>')            .attr('id', wrapperId)            .addClass(o.wrapperClassName);          stickyElement.wrapAll(function() {            if ($(this).parent("#" + wrapperId).length == 0) {                    return wrapper;            }});          var stickyWrapper = stickyElement.parent();          if (o.center) {            stickyWrapper.css({width:stickyElement.outerWidth(),marginLeft:"auto",marginRight:"auto"});          }          if (stickyElement.css("float") === "right") {            stickyElement.css({"float":"none"}).parent().css({"float":"right"});          }          o.stickyElement = stickyElement;          o.stickyWrapper = stickyWrapper;          o.currentTop    = null;          sticked.push(o);          methods.setWrapperHeight(this);          methods.setupChangeListeners(this);        });      },      setWrapperHeight: function(stickyElement) {        var element = $(stickyElement);        var stickyWrapper = element.parent();        if (stickyWrapper) {          stickyWrapper.css('height', element.outerHeight());        }      },      setupChangeListeners: function(stickyElement) {        if (window.MutationObserver) {          var mutationObserver = new window.MutationObserver(function(mutations) {            if (mutations[0].addedNodes.length || mutations[0].removedNodes.length) {              methods.setWrapperHeight(stickyElement);            }          });          mutationObserver.observe(stickyElement, {subtree: true, childList: true});        } else {          if (window.addEventListener) {            stickyElement.addEventListener('DOMNodeInserted', function() {              methods.setWrapperHeight(stickyElement);            }, false);            stickyElement.addEventListener('DOMNodeRemoved', function() {              methods.setWrapperHeight(stickyElement);            }, false);          } else if (window.attachEvent) {            stickyElement.attachEvent('onDOMNodeInserted', function() {              methods.setWrapperHeight(stickyElement);            });            stickyElement.attachEvent('onDOMNodeRemoved', function() {              methods.setWrapperHeight(stickyElement);            });          }        }      },      update: scroller,      unstick: function(options) {        return this.each(function() {          var that = this;          var unstickyElement = $(that);          var removeIdx = -1;          var i = sticked.length;          while (i-- > 0) {            if (sticked[i].stickyElement.get(0) === that) {                splice.call(sticked,i,1);                removeIdx = i;            }          }          if(removeIdx !== -1) {            unstickyElement.unwrap();            unstickyElement              .css({                'width': '',                'position': '',                'top': '',                'float': '',                'z-index': ''              })            ;          }        });      }    };  // should be more efficient than using $window.scroll(scroller) and $window.resize(resizer):  if (window.addEventListener) {    window.addEventListener('scroll', scroller, false);    window.addEventListener('resize', resizer, false);  } else if (window.attachEvent) {    window.attachEvent('onscroll', scroller);    window.attachEvent('onresize', resizer);  }  $.fn.sticky = function(method) {    if (methods[method]) {      return methods[method].apply(this, slice.call(arguments, 1));    } else if (typeof method === 'object' || !method ) {      return methods.init.apply( this, arguments );    } else {      $.error('Method ' + method + ' does not exist on jQuery.sticky');    }  };  $.fn.unstick = function(method) {    if (methods[method]) {      return methods[method].apply(this, slice.call(arguments, 1));    } else if (typeof method === 'object' || !method ) {      return methods.unstick.apply( this, arguments );    } else {      $.error('Method ' + method + ' does not exist on jQuery.sticky');    }  };  $(function() {    setTimeout(scroller, 0);  });}));$.fn.spinner = function(options) {	options = $.extend({     min: 0  }, options);  var make = function() {			var self = $(this),				$input = self.find('input'),				$plus = self.find('.js-spinner-plus'),				$minus = self.find('.js-spinner-minus'),				min = self.data('min'),				max = self.data('max');			function disable() {				if (parseInt($input.val(), 10) < min) {					$input.val(min);                                        $minus.addClass('disable');				} else if (parseInt($input.val(), 10) >= max) {					$plus.addClass('disable');				} else {					$minus.removeClass('disable');					$plus.removeClass('disable');				}			} 			disable();			$input.on('keydown', function(e){e.preventDefault()});			$plus.on('click', function(e) {				e.preventDefault();				if(parseInt($input.val(), 10) >= max){					return false;				} else {					$input.attr('value',parseInt($input.val(), 10) + 1).change();					disable();					self.trigger('plus');					self.trigger('update');				}			});			$minus.on('click', function(e) {				e.preventDefault();				if(parseInt($input.val(), 10) <= min){					return false;				} else {					$input.attr('value', parseInt($input.val(), 10) - 1).change();					disable();					self.trigger('minus');					self.trigger('update');				}			});		}  return this.each(make); };